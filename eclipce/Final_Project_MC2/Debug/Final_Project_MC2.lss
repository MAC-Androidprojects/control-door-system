
Final_Project_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  000032dc  00003370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080017c  0080017c  0000348c  2**0
                  ALLOC
  3 .stab         0000240c  00000000  00000000  0000348c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001362  00000000  00000000  00005898  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00006d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002766  00000000  00000000  00006f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001300  00000000  00000000  000096f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000122b  00000000  00000000  0000a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bc1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000333  00000000  00000000  0000bddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000177f  00000000  00000000  0000c10f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0000d88e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1e 13 	call	0x263c	; 0x263c <main>
      8a:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__subsf3>
      be:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__divdi3>:
      ea:	a2 e7       	ldi	r26, 0x72	; 114
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 35 19 	jmp	0x326a	; 0x326a <__prologue_saves__>
      f6:	98 2e       	mov	r9, r24
      f8:	89 2e       	mov	r8, r25
      fa:	71 2e       	mov	r7, r17
      fc:	88 e0       	ldi	r24, 0x08	; 8
      fe:	fe 01       	movw	r30, r28
     100:	31 96       	adiw	r30, 0x01	; 1
     102:	df 01       	movw	r26, r30
     104:	68 2e       	mov	r6, r24
     106:	1d 92       	st	X+, r1
     108:	6a 94       	dec	r6
     10a:	e9 f7       	brne	.-6      	; 0x106 <__divdi3+0x1c>
     10c:	29 83       	std	Y+1, r18	; 0x01
     10e:	3a 83       	std	Y+2, r19	; 0x02
     110:	4b 83       	std	Y+3, r20	; 0x03
     112:	5c 83       	std	Y+4, r21	; 0x04
     114:	6d 83       	std	Y+5, r22	; 0x05
     116:	7e 83       	std	Y+6, r23	; 0x06
     118:	9f 82       	std	Y+7, r9	; 0x07
     11a:	98 87       	std	Y+8, r25	; 0x08
     11c:	fe 01       	movw	r30, r28
     11e:	39 96       	adiw	r30, 0x09	; 9
     120:	df 01       	movw	r26, r30
     122:	1d 92       	st	X+, r1
     124:	8a 95       	dec	r24
     126:	e9 f7       	brne	.-6      	; 0x122 <__divdi3+0x38>
     128:	a9 86       	std	Y+9, r10	; 0x09
     12a:	ba 86       	std	Y+10, r11	; 0x0a
     12c:	cb 86       	std	Y+11, r12	; 0x0b
     12e:	dc 86       	std	Y+12, r13	; 0x0c
     130:	ed 86       	std	Y+13, r14	; 0x0d
     132:	fe 86       	std	Y+14, r15	; 0x0e
     134:	0f 87       	std	Y+15, r16	; 0x0f
     136:	18 8b       	std	Y+16, r17	; 0x10
     138:	8d 81       	ldd	r24, Y+5	; 0x05
     13a:	9e 81       	ldd	r25, Y+6	; 0x06
     13c:	af 81       	ldd	r26, Y+7	; 0x07
     13e:	b8 85       	ldd	r27, Y+8	; 0x08
     140:	b7 fd       	sbrc	r27, 7
     142:	07 c0       	rjmp	.+14     	; 0x152 <__divdi3+0x68>
     144:	e1 96       	adiw	r28, 0x31	; 49
     146:	1c ae       	std	Y+60, r1	; 0x3c
     148:	1d ae       	std	Y+61, r1	; 0x3d
     14a:	1e ae       	std	Y+62, r1	; 0x3e
     14c:	1f ae       	std	Y+63, r1	; 0x3f
     14e:	e1 97       	sbiw	r28, 0x31	; 49
     150:	64 c0       	rjmp	.+200    	; 0x21a <__divdi3+0x130>
     152:	21 95       	neg	r18
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	12 16       	cp	r1, r18
     158:	08 f0       	brcs	.+2      	; 0x15c <__divdi3+0x72>
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	31 95       	neg	r19
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	13 16       	cp	r1, r19
     162:	08 f0       	brcs	.+2      	; 0x166 <__divdi3+0x7c>
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	b3 2f       	mov	r27, r19
     168:	b8 1b       	sub	r27, r24
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	3b 17       	cp	r19, r27
     16e:	08 f0       	brcs	.+2      	; 0x172 <__divdi3+0x88>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	98 2b       	or	r25, r24
     174:	41 95       	neg	r20
     176:	31 e0       	ldi	r19, 0x01	; 1
     178:	14 16       	cp	r1, r20
     17a:	08 f0       	brcs	.+2      	; 0x17e <__divdi3+0x94>
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	a4 2f       	mov	r26, r20
     180:	a9 1b       	sub	r26, r25
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	4a 17       	cp	r20, r26
     186:	08 f0       	brcs	.+2      	; 0x18a <__divdi3+0xa0>
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	38 2b       	or	r19, r24
     18c:	51 95       	neg	r21
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	15 16       	cp	r1, r21
     192:	08 f0       	brcs	.+2      	; 0x196 <__divdi3+0xac>
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	f5 2f       	mov	r31, r21
     198:	f3 1b       	sub	r31, r19
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	5f 17       	cp	r21, r31
     19e:	08 f0       	brcs	.+2      	; 0x1a2 <__divdi3+0xb8>
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	98 2b       	or	r25, r24
     1a4:	61 95       	neg	r22
     1a6:	31 e0       	ldi	r19, 0x01	; 1
     1a8:	16 16       	cp	r1, r22
     1aa:	08 f0       	brcs	.+2      	; 0x1ae <__divdi3+0xc4>
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	e6 2f       	mov	r30, r22
     1b0:	e9 1b       	sub	r30, r25
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	6e 17       	cp	r22, r30
     1b6:	08 f0       	brcs	.+2      	; 0x1ba <__divdi3+0xd0>
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	38 2b       	or	r19, r24
     1bc:	71 95       	neg	r23
     1be:	41 e0       	ldi	r20, 0x01	; 1
     1c0:	17 16       	cp	r1, r23
     1c2:	08 f0       	brcs	.+2      	; 0x1c6 <__divdi3+0xdc>
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	57 2f       	mov	r21, r23
     1c8:	53 1b       	sub	r21, r19
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	75 17       	cp	r23, r21
     1ce:	08 f0       	brcs	.+2      	; 0x1d2 <__divdi3+0xe8>
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	48 2b       	or	r20, r24
     1d4:	89 2d       	mov	r24, r9
     1d6:	81 95       	neg	r24
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	18 16       	cp	r1, r24
     1dc:	08 f0       	brcs	.+2      	; 0x1e0 <__divdi3+0xf6>
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	68 2e       	mov	r6, r24
     1e2:	64 1a       	sub	r6, r20
     1e4:	46 2d       	mov	r20, r6
     1e6:	31 e0       	ldi	r19, 0x01	; 1
     1e8:	86 15       	cp	r24, r6
     1ea:	08 f0       	brcs	.+2      	; 0x1ee <__divdi3+0x104>
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	93 2b       	or	r25, r19
     1f0:	88 2d       	mov	r24, r8
     1f2:	81 95       	neg	r24
     1f4:	89 1b       	sub	r24, r25
     1f6:	29 83       	std	Y+1, r18	; 0x01
     1f8:	ba 83       	std	Y+2, r27	; 0x02
     1fa:	ab 83       	std	Y+3, r26	; 0x03
     1fc:	fc 83       	std	Y+4, r31	; 0x04
     1fe:	ed 83       	std	Y+5, r30	; 0x05
     200:	5e 83       	std	Y+6, r21	; 0x06
     202:	4f 83       	std	Y+7, r20	; 0x07
     204:	88 87       	std	Y+8, r24	; 0x08
     206:	2f ef       	ldi	r18, 0xFF	; 255
     208:	3f ef       	ldi	r19, 0xFF	; 255
     20a:	4f ef       	ldi	r20, 0xFF	; 255
     20c:	5f ef       	ldi	r21, 0xFF	; 255
     20e:	e1 96       	adiw	r28, 0x31	; 49
     210:	2c af       	std	Y+60, r18	; 0x3c
     212:	3d af       	std	Y+61, r19	; 0x3d
     214:	4e af       	std	Y+62, r20	; 0x3e
     216:	5f af       	std	Y+63, r21	; 0x3f
     218:	e1 97       	sbiw	r28, 0x31	; 49
     21a:	8d 85       	ldd	r24, Y+13	; 0x0d
     21c:	9e 85       	ldd	r25, Y+14	; 0x0e
     21e:	af 85       	ldd	r26, Y+15	; 0x0f
     220:	b8 89       	ldd	r27, Y+16	; 0x10
     222:	b7 ff       	sbrs	r27, 7
     224:	6a c0       	rjmp	.+212    	; 0x2fa <__divdi3+0x210>
     226:	e1 96       	adiw	r28, 0x31	; 49
     228:	4c ad       	ldd	r20, Y+60	; 0x3c
     22a:	5d ad       	ldd	r21, Y+61	; 0x3d
     22c:	6e ad       	ldd	r22, Y+62	; 0x3e
     22e:	7f ad       	ldd	r23, Y+63	; 0x3f
     230:	e1 97       	sbiw	r28, 0x31	; 49
     232:	40 95       	com	r20
     234:	50 95       	com	r21
     236:	60 95       	com	r22
     238:	70 95       	com	r23
     23a:	e1 96       	adiw	r28, 0x31	; 49
     23c:	4c af       	std	Y+60, r20	; 0x3c
     23e:	5d af       	std	Y+61, r21	; 0x3d
     240:	6e af       	std	Y+62, r22	; 0x3e
     242:	7f af       	std	Y+63, r23	; 0x3f
     244:	e1 97       	sbiw	r28, 0x31	; 49
     246:	a1 94       	neg	r10
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	1a 14       	cp	r1, r10
     24c:	08 f0       	brcs	.+2      	; 0x250 <__divdi3+0x166>
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	b1 94       	neg	r11
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	1b 14       	cp	r1, r11
     256:	08 f0       	brcs	.+2      	; 0x25a <__divdi3+0x170>
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	6b 2d       	mov	r22, r11
     25c:	68 1b       	sub	r22, r24
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	b6 16       	cp	r11, r22
     262:	08 f0       	brcs	.+2      	; 0x266 <__divdi3+0x17c>
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	98 2b       	or	r25, r24
     268:	c1 94       	neg	r12
     26a:	21 e0       	ldi	r18, 0x01	; 1
     26c:	1c 14       	cp	r1, r12
     26e:	08 f0       	brcs	.+2      	; 0x272 <__divdi3+0x188>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	5c 2d       	mov	r21, r12
     274:	59 1b       	sub	r21, r25
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	c5 16       	cp	r12, r21
     27a:	08 f0       	brcs	.+2      	; 0x27e <__divdi3+0x194>
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	28 2b       	or	r18, r24
     280:	d1 94       	neg	r13
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	1d 14       	cp	r1, r13
     286:	08 f0       	brcs	.+2      	; 0x28a <__divdi3+0x1a0>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	4d 2d       	mov	r20, r13
     28c:	42 1b       	sub	r20, r18
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	d4 16       	cp	r13, r20
     292:	08 f0       	brcs	.+2      	; 0x296 <__divdi3+0x1ac>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	98 2b       	or	r25, r24
     298:	e1 94       	neg	r14
     29a:	21 e0       	ldi	r18, 0x01	; 1
     29c:	1e 14       	cp	r1, r14
     29e:	08 f0       	brcs	.+2      	; 0x2a2 <__divdi3+0x1b8>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	3e 2d       	mov	r19, r14
     2a4:	39 1b       	sub	r19, r25
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	e3 16       	cp	r14, r19
     2aa:	08 f0       	brcs	.+2      	; 0x2ae <__divdi3+0x1c4>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	28 2b       	or	r18, r24
     2b0:	f1 94       	neg	r15
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	1f 14       	cp	r1, r15
     2b6:	08 f0       	brcs	.+2      	; 0x2ba <__divdi3+0x1d0>
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	7f 2d       	mov	r23, r15
     2bc:	72 1b       	sub	r23, r18
     2be:	27 2f       	mov	r18, r23
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	f7 16       	cp	r15, r23
     2c4:	08 f0       	brcs	.+2      	; 0x2c8 <__divdi3+0x1de>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	98 2b       	or	r25, r24
     2ca:	01 95       	neg	r16
     2cc:	11 e0       	ldi	r17, 0x01	; 1
     2ce:	10 16       	cp	r1, r16
     2d0:	08 f0       	brcs	.+2      	; 0x2d4 <__divdi3+0x1ea>
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	80 2f       	mov	r24, r16
     2d6:	89 1b       	sub	r24, r25
     2d8:	98 2f       	mov	r25, r24
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	09 17       	cp	r16, r25
     2de:	08 f0       	brcs	.+2      	; 0x2e2 <__divdi3+0x1f8>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	18 2b       	or	r17, r24
     2e4:	87 2d       	mov	r24, r7
     2e6:	81 95       	neg	r24
     2e8:	81 1b       	sub	r24, r17
     2ea:	a9 86       	std	Y+9, r10	; 0x09
     2ec:	6a 87       	std	Y+10, r22	; 0x0a
     2ee:	5b 87       	std	Y+11, r21	; 0x0b
     2f0:	4c 87       	std	Y+12, r20	; 0x0c
     2f2:	3d 87       	std	Y+13, r19	; 0x0d
     2f4:	2e 87       	std	Y+14, r18	; 0x0e
     2f6:	9f 87       	std	Y+15, r25	; 0x0f
     2f8:	88 8b       	std	Y+16, r24	; 0x10
     2fa:	99 81       	ldd	r25, Y+1	; 0x01
     2fc:	2a 81       	ldd	r18, Y+2	; 0x02
     2fe:	3b 81       	ldd	r19, Y+3	; 0x03
     300:	4c 81       	ldd	r20, Y+4	; 0x04
     302:	5d 81       	ldd	r21, Y+5	; 0x05
     304:	6e 81       	ldd	r22, Y+6	; 0x06
     306:	7f 81       	ldd	r23, Y+7	; 0x07
     308:	a8 85       	ldd	r26, Y+8	; 0x08
     30a:	b9 85       	ldd	r27, Y+9	; 0x09
     30c:	1a 85       	ldd	r17, Y+10	; 0x0a
     30e:	0b 85       	ldd	r16, Y+11	; 0x0b
     310:	fc 84       	ldd	r15, Y+12	; 0x0c
     312:	ed 84       	ldd	r14, Y+13	; 0x0d
     314:	de 84       	ldd	r13, Y+14	; 0x0e
     316:	cf 84       	ldd	r12, Y+15	; 0x0f
     318:	b8 88       	ldd	r11, Y+16	; 0x10
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	e1 e1       	ldi	r30, 0x11	; 17
     31e:	8e 2e       	mov	r8, r30
     320:	91 2c       	mov	r9, r1
     322:	8c 0e       	add	r8, r28
     324:	9d 1e       	adc	r9, r29
     326:	f4 01       	movw	r30, r8
     328:	68 2e       	mov	r6, r24
     32a:	11 92       	st	Z+, r1
     32c:	6a 94       	dec	r6
     32e:	e9 f7       	brne	.-6      	; 0x32a <__divdi3+0x240>
     330:	99 8b       	std	Y+17, r25	; 0x11
     332:	2a 8b       	std	Y+18, r18	; 0x12
     334:	3b 8b       	std	Y+19, r19	; 0x13
     336:	4c 8b       	std	Y+20, r20	; 0x14
     338:	5d 8b       	std	Y+21, r21	; 0x15
     33a:	6e 8b       	std	Y+22, r22	; 0x16
     33c:	7f 8b       	std	Y+23, r23	; 0x17
     33e:	a8 8f       	std	Y+24, r26	; 0x18
     340:	9e 01       	movw	r18, r28
     342:	27 5e       	subi	r18, 0xE7	; 231
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	f9 01       	movw	r30, r18
     348:	11 92       	st	Z+, r1
     34a:	8a 95       	dec	r24
     34c:	e9 f7       	brne	.-6      	; 0x348 <__divdi3+0x25e>
     34e:	b9 8f       	std	Y+25, r27	; 0x19
     350:	1a 8f       	std	Y+26, r17	; 0x1a
     352:	0b 8f       	std	Y+27, r16	; 0x1b
     354:	fc 8e       	std	Y+28, r15	; 0x1c
     356:	ed 8e       	std	Y+29, r14	; 0x1d
     358:	de 8e       	std	Y+30, r13	; 0x1e
     35a:	cf 8e       	std	Y+31, r12	; 0x1f
     35c:	b8 a2       	std	Y+32, r11	; 0x20
     35e:	29 8c       	ldd	r2, Y+25	; 0x19
     360:	3a 8c       	ldd	r3, Y+26	; 0x1a
     362:	4b 8c       	ldd	r4, Y+27	; 0x1b
     364:	5c 8c       	ldd	r5, Y+28	; 0x1c
     366:	ed 8c       	ldd	r14, Y+29	; 0x1d
     368:	fe 8c       	ldd	r15, Y+30	; 0x1e
     36a:	0f 8d       	ldd	r16, Y+31	; 0x1f
     36c:	18 a1       	ldd	r17, Y+32	; 0x20
     36e:	69 88       	ldd	r6, Y+17	; 0x11
     370:	7a 88       	ldd	r7, Y+18	; 0x12
     372:	8b 88       	ldd	r8, Y+19	; 0x13
     374:	9c 88       	ldd	r9, Y+20	; 0x14
     376:	21 96       	adiw	r28, 0x01	; 1
     378:	6c ae       	std	Y+60, r6	; 0x3c
     37a:	7d ae       	std	Y+61, r7	; 0x3d
     37c:	8e ae       	std	Y+62, r8	; 0x3e
     37e:	9f ae       	std	Y+63, r9	; 0x3f
     380:	21 97       	sbiw	r28, 0x01	; 1
     382:	6d 88       	ldd	r6, Y+21	; 0x15
     384:	7e 88       	ldd	r7, Y+22	; 0x16
     386:	8f 88       	ldd	r8, Y+23	; 0x17
     388:	98 8c       	ldd	r9, Y+24	; 0x18
     38a:	e1 14       	cp	r14, r1
     38c:	f1 04       	cpc	r15, r1
     38e:	01 05       	cpc	r16, r1
     390:	11 05       	cpc	r17, r1
     392:	09 f0       	breq	.+2      	; 0x396 <__divdi3+0x2ac>
     394:	d9 c3       	rjmp	.+1970   	; 0xb48 <__stack+0x6e9>
     396:	62 14       	cp	r6, r2
     398:	73 04       	cpc	r7, r3
     39a:	84 04       	cpc	r8, r4
     39c:	95 04       	cpc	r9, r5
     39e:	08 f0       	brcs	.+2      	; 0x3a2 <__divdi3+0x2b8>
     3a0:	57 c1       	rjmp	.+686    	; 0x650 <__stack+0x1f1>
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	20 16       	cp	r2, r16
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	30 06       	cpc	r3, r16
     3aa:	01 e0       	ldi	r16, 0x01	; 1
     3ac:	40 06       	cpc	r4, r16
     3ae:	00 e0       	ldi	r16, 0x00	; 0
     3b0:	50 06       	cpc	r5, r16
     3b2:	88 f4       	brcc	.+34     	; 0x3d6 <__divdi3+0x2ec>
     3b4:	1f ef       	ldi	r17, 0xFF	; 255
     3b6:	21 16       	cp	r2, r17
     3b8:	31 04       	cpc	r3, r1
     3ba:	41 04       	cpc	r4, r1
     3bc:	51 04       	cpc	r5, r1
     3be:	39 f0       	breq	.+14     	; 0x3ce <__divdi3+0x2e4>
     3c0:	30 f0       	brcs	.+12     	; 0x3ce <__divdi3+0x2e4>
     3c2:	48 e0       	ldi	r20, 0x08	; 8
     3c4:	e4 2e       	mov	r14, r20
     3c6:	f1 2c       	mov	r15, r1
     3c8:	01 2d       	mov	r16, r1
     3ca:	11 2d       	mov	r17, r1
     3cc:	18 c0       	rjmp	.+48     	; 0x3fe <__divdi3+0x314>
     3ce:	ee 24       	eor	r14, r14
     3d0:	ff 24       	eor	r15, r15
     3d2:	87 01       	movw	r16, r14
     3d4:	14 c0       	rjmp	.+40     	; 0x3fe <__divdi3+0x314>
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	22 16       	cp	r2, r18
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	32 06       	cpc	r3, r18
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	42 06       	cpc	r4, r18
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	52 06       	cpc	r5, r18
     3e6:	30 f0       	brcs	.+12     	; 0x3f4 <__divdi3+0x30a>
     3e8:	38 e1       	ldi	r19, 0x18	; 24
     3ea:	e3 2e       	mov	r14, r19
     3ec:	f1 2c       	mov	r15, r1
     3ee:	01 2d       	mov	r16, r1
     3f0:	11 2d       	mov	r17, r1
     3f2:	05 c0       	rjmp	.+10     	; 0x3fe <__divdi3+0x314>
     3f4:	20 e1       	ldi	r18, 0x10	; 16
     3f6:	e2 2e       	mov	r14, r18
     3f8:	f1 2c       	mov	r15, r1
     3fa:	01 2d       	mov	r16, r1
     3fc:	11 2d       	mov	r17, r1
     3fe:	d2 01       	movw	r26, r4
     400:	c1 01       	movw	r24, r2
     402:	0e 2c       	mov	r0, r14
     404:	04 c0       	rjmp	.+8      	; 0x40e <__divdi3+0x324>
     406:	b6 95       	lsr	r27
     408:	a7 95       	ror	r26
     40a:	97 95       	ror	r25
     40c:	87 95       	ror	r24
     40e:	0a 94       	dec	r0
     410:	d2 f7       	brpl	.-12     	; 0x406 <__divdi3+0x31c>
     412:	88 59       	subi	r24, 0x98	; 152
     414:	9f 4f       	sbci	r25, 0xFF	; 255
     416:	dc 01       	movw	r26, r24
     418:	2c 91       	ld	r18, X
     41a:	80 e2       	ldi	r24, 0x20	; 32
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	8e 19       	sub	r24, r14
     424:	9f 09       	sbc	r25, r15
     426:	a0 0b       	sbc	r26, r16
     428:	b1 0b       	sbc	r27, r17
     42a:	7c 01       	movw	r14, r24
     42c:	8d 01       	movw	r16, r26
     42e:	e2 1a       	sub	r14, r18
     430:	f1 08       	sbc	r15, r1
     432:	01 09       	sbc	r16, r1
     434:	11 09       	sbc	r17, r1
     436:	e1 14       	cp	r14, r1
     438:	f1 04       	cpc	r15, r1
     43a:	01 05       	cpc	r16, r1
     43c:	11 05       	cpc	r17, r1
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <__stack+0x55>
     440:	0e 2c       	mov	r0, r14
     442:	04 c0       	rjmp	.+8      	; 0x44c <__divdi3+0x362>
     444:	22 0c       	add	r2, r2
     446:	33 1c       	adc	r3, r3
     448:	44 1c       	adc	r4, r4
     44a:	55 1c       	adc	r5, r5
     44c:	0a 94       	dec	r0
     44e:	d2 f7       	brpl	.-12     	; 0x444 <__divdi3+0x35a>
     450:	a4 01       	movw	r20, r8
     452:	93 01       	movw	r18, r6
     454:	0e 2c       	mov	r0, r14
     456:	04 c0       	rjmp	.+8      	; 0x460 <__stack+0x1>
     458:	22 0f       	add	r18, r18
     45a:	33 1f       	adc	r19, r19
     45c:	44 1f       	adc	r20, r20
     45e:	55 1f       	adc	r21, r21
     460:	0a 94       	dec	r0
     462:	d2 f7       	brpl	.-12     	; 0x458 <__divdi3+0x36e>
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	8e 19       	sub	r24, r14
     46a:	9f 09       	sbc	r25, r15
     46c:	21 96       	adiw	r28, 0x01	; 1
     46e:	6c ac       	ldd	r6, Y+60	; 0x3c
     470:	7d ac       	ldd	r7, Y+61	; 0x3d
     472:	8e ac       	ldd	r8, Y+62	; 0x3e
     474:	9f ac       	ldd	r9, Y+63	; 0x3f
     476:	21 97       	sbiw	r28, 0x01	; 1
     478:	04 c0       	rjmp	.+8      	; 0x482 <__stack+0x23>
     47a:	96 94       	lsr	r9
     47c:	87 94       	ror	r8
     47e:	77 94       	ror	r7
     480:	67 94       	ror	r6
     482:	8a 95       	dec	r24
     484:	d2 f7       	brpl	.-12     	; 0x47a <__stack+0x1b>
     486:	62 2a       	or	r6, r18
     488:	73 2a       	or	r7, r19
     48a:	84 2a       	or	r8, r20
     48c:	95 2a       	or	r9, r21
     48e:	21 96       	adiw	r28, 0x01	; 1
     490:	ac ac       	ldd	r10, Y+60	; 0x3c
     492:	bd ac       	ldd	r11, Y+61	; 0x3d
     494:	ce ac       	ldd	r12, Y+62	; 0x3e
     496:	df ac       	ldd	r13, Y+63	; 0x3f
     498:	21 97       	sbiw	r28, 0x01	; 1
     49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__stack+0x45>
     49c:	aa 0c       	add	r10, r10
     49e:	bb 1c       	adc	r11, r11
     4a0:	cc 1c       	adc	r12, r12
     4a2:	dd 1c       	adc	r13, r13
     4a4:	ea 94       	dec	r14
     4a6:	d2 f7       	brpl	.-12     	; 0x49c <__stack+0x3d>
     4a8:	21 96       	adiw	r28, 0x01	; 1
     4aa:	ac ae       	std	Y+60, r10	; 0x3c
     4ac:	bd ae       	std	Y+61, r11	; 0x3d
     4ae:	ce ae       	std	Y+62, r12	; 0x3e
     4b0:	df ae       	std	Y+63, r13	; 0x3f
     4b2:	21 97       	sbiw	r28, 0x01	; 1
     4b4:	62 01       	movw	r12, r4
     4b6:	ee 24       	eor	r14, r14
     4b8:	ff 24       	eor	r15, r15
     4ba:	29 96       	adiw	r28, 0x09	; 9
     4bc:	cc ae       	std	Y+60, r12	; 0x3c
     4be:	dd ae       	std	Y+61, r13	; 0x3d
     4c0:	ee ae       	std	Y+62, r14	; 0x3e
     4c2:	ff ae       	std	Y+63, r15	; 0x3f
     4c4:	29 97       	sbiw	r28, 0x09	; 9
     4c6:	92 01       	movw	r18, r4
     4c8:	81 01       	movw	r16, r2
     4ca:	20 70       	andi	r18, 0x00	; 0
     4cc:	30 70       	andi	r19, 0x00	; 0
     4ce:	2d 96       	adiw	r28, 0x0d	; 13
     4d0:	0c af       	std	Y+60, r16	; 0x3c
     4d2:	1d af       	std	Y+61, r17	; 0x3d
     4d4:	2e af       	std	Y+62, r18	; 0x3e
     4d6:	3f af       	std	Y+63, r19	; 0x3f
     4d8:	2d 97       	sbiw	r28, 0x0d	; 13
     4da:	c4 01       	movw	r24, r8
     4dc:	b3 01       	movw	r22, r6
     4de:	a7 01       	movw	r20, r14
     4e0:	96 01       	movw	r18, r12
     4e2:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     4e6:	7b 01       	movw	r14, r22
     4e8:	8c 01       	movw	r16, r24
     4ea:	c4 01       	movw	r24, r8
     4ec:	b3 01       	movw	r22, r6
     4ee:	29 96       	adiw	r28, 0x09	; 9
     4f0:	2c ad       	ldd	r18, Y+60	; 0x3c
     4f2:	3d ad       	ldd	r19, Y+61	; 0x3d
     4f4:	4e ad       	ldd	r20, Y+62	; 0x3e
     4f6:	5f ad       	ldd	r21, Y+63	; 0x3f
     4f8:	29 97       	sbiw	r28, 0x09	; 9
     4fa:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     4fe:	c9 01       	movw	r24, r18
     500:	da 01       	movw	r26, r20
     502:	3c 01       	movw	r6, r24
     504:	4d 01       	movw	r8, r26
     506:	c4 01       	movw	r24, r8
     508:	b3 01       	movw	r22, r6
     50a:	2d 96       	adiw	r28, 0x0d	; 13
     50c:	2c ad       	ldd	r18, Y+60	; 0x3c
     50e:	3d ad       	ldd	r19, Y+61	; 0x3d
     510:	4e ad       	ldd	r20, Y+62	; 0x3e
     512:	5f ad       	ldd	r21, Y+63	; 0x3f
     514:	2d 97       	sbiw	r28, 0x0d	; 13
     516:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsi3>
     51a:	9b 01       	movw	r18, r22
     51c:	ac 01       	movw	r20, r24
     51e:	87 01       	movw	r16, r14
     520:	ff 24       	eor	r15, r15
     522:	ee 24       	eor	r14, r14
     524:	21 96       	adiw	r28, 0x01	; 1
     526:	ac ac       	ldd	r10, Y+60	; 0x3c
     528:	bd ac       	ldd	r11, Y+61	; 0x3d
     52a:	ce ac       	ldd	r12, Y+62	; 0x3e
     52c:	df ac       	ldd	r13, Y+63	; 0x3f
     52e:	21 97       	sbiw	r28, 0x01	; 1
     530:	c6 01       	movw	r24, r12
     532:	aa 27       	eor	r26, r26
     534:	bb 27       	eor	r27, r27
     536:	57 01       	movw	r10, r14
     538:	68 01       	movw	r12, r16
     53a:	a8 2a       	or	r10, r24
     53c:	b9 2a       	or	r11, r25
     53e:	ca 2a       	or	r12, r26
     540:	db 2a       	or	r13, r27
     542:	a2 16       	cp	r10, r18
     544:	b3 06       	cpc	r11, r19
     546:	c4 06       	cpc	r12, r20
     548:	d5 06       	cpc	r13, r21
     54a:	e0 f4       	brcc	.+56     	; 0x584 <__stack+0x125>
     54c:	08 94       	sec
     54e:	61 08       	sbc	r6, r1
     550:	71 08       	sbc	r7, r1
     552:	81 08       	sbc	r8, r1
     554:	91 08       	sbc	r9, r1
     556:	a2 0c       	add	r10, r2
     558:	b3 1c       	adc	r11, r3
     55a:	c4 1c       	adc	r12, r4
     55c:	d5 1c       	adc	r13, r5
     55e:	a2 14       	cp	r10, r2
     560:	b3 04       	cpc	r11, r3
     562:	c4 04       	cpc	r12, r4
     564:	d5 04       	cpc	r13, r5
     566:	70 f0       	brcs	.+28     	; 0x584 <__stack+0x125>
     568:	a2 16       	cp	r10, r18
     56a:	b3 06       	cpc	r11, r19
     56c:	c4 06       	cpc	r12, r20
     56e:	d5 06       	cpc	r13, r21
     570:	48 f4       	brcc	.+18     	; 0x584 <__stack+0x125>
     572:	08 94       	sec
     574:	61 08       	sbc	r6, r1
     576:	71 08       	sbc	r7, r1
     578:	81 08       	sbc	r8, r1
     57a:	91 08       	sbc	r9, r1
     57c:	a2 0c       	add	r10, r2
     57e:	b3 1c       	adc	r11, r3
     580:	c4 1c       	adc	r12, r4
     582:	d5 1c       	adc	r13, r5
     584:	a2 1a       	sub	r10, r18
     586:	b3 0a       	sbc	r11, r19
     588:	c4 0a       	sbc	r12, r20
     58a:	d5 0a       	sbc	r13, r21
     58c:	c6 01       	movw	r24, r12
     58e:	b5 01       	movw	r22, r10
     590:	29 96       	adiw	r28, 0x09	; 9
     592:	2c ad       	ldd	r18, Y+60	; 0x3c
     594:	3d ad       	ldd	r19, Y+61	; 0x3d
     596:	4e ad       	ldd	r20, Y+62	; 0x3e
     598:	5f ad       	ldd	r21, Y+63	; 0x3f
     59a:	29 97       	sbiw	r28, 0x09	; 9
     59c:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     5a0:	7b 01       	movw	r14, r22
     5a2:	8c 01       	movw	r16, r24
     5a4:	c6 01       	movw	r24, r12
     5a6:	b5 01       	movw	r22, r10
     5a8:	29 96       	adiw	r28, 0x09	; 9
     5aa:	2c ad       	ldd	r18, Y+60	; 0x3c
     5ac:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ae:	4e ad       	ldd	r20, Y+62	; 0x3e
     5b0:	5f ad       	ldd	r21, Y+63	; 0x3f
     5b2:	29 97       	sbiw	r28, 0x09	; 9
     5b4:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     5b8:	c9 01       	movw	r24, r18
     5ba:	da 01       	movw	r26, r20
     5bc:	5c 01       	movw	r10, r24
     5be:	6d 01       	movw	r12, r26
     5c0:	c6 01       	movw	r24, r12
     5c2:	b5 01       	movw	r22, r10
     5c4:	2d 96       	adiw	r28, 0x0d	; 13
     5c6:	2c ad       	ldd	r18, Y+60	; 0x3c
     5c8:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ca:	4e ad       	ldd	r20, Y+62	; 0x3e
     5cc:	5f ad       	ldd	r21, Y+63	; 0x3f
     5ce:	2d 97       	sbiw	r28, 0x0d	; 13
     5d0:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsi3>
     5d4:	9b 01       	movw	r18, r22
     5d6:	ac 01       	movw	r20, r24
     5d8:	87 01       	movw	r16, r14
     5da:	ff 24       	eor	r15, r15
     5dc:	ee 24       	eor	r14, r14
     5de:	21 96       	adiw	r28, 0x01	; 1
     5e0:	8c ad       	ldd	r24, Y+60	; 0x3c
     5e2:	9d ad       	ldd	r25, Y+61	; 0x3d
     5e4:	ae ad       	ldd	r26, Y+62	; 0x3e
     5e6:	bf ad       	ldd	r27, Y+63	; 0x3f
     5e8:	21 97       	sbiw	r28, 0x01	; 1
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	e8 2a       	or	r14, r24
     5f0:	f9 2a       	or	r15, r25
     5f2:	0a 2b       	or	r16, r26
     5f4:	1b 2b       	or	r17, r27
     5f6:	e2 16       	cp	r14, r18
     5f8:	f3 06       	cpc	r15, r19
     5fa:	04 07       	cpc	r16, r20
     5fc:	15 07       	cpc	r17, r21
     5fe:	c0 f4       	brcc	.+48     	; 0x630 <__stack+0x1d1>
     600:	08 94       	sec
     602:	a1 08       	sbc	r10, r1
     604:	b1 08       	sbc	r11, r1
     606:	c1 08       	sbc	r12, r1
     608:	d1 08       	sbc	r13, r1
     60a:	e2 0c       	add	r14, r2
     60c:	f3 1c       	adc	r15, r3
     60e:	04 1d       	adc	r16, r4
     610:	15 1d       	adc	r17, r5
     612:	e2 14       	cp	r14, r2
     614:	f3 04       	cpc	r15, r3
     616:	04 05       	cpc	r16, r4
     618:	15 05       	cpc	r17, r5
     61a:	50 f0       	brcs	.+20     	; 0x630 <__stack+0x1d1>
     61c:	e2 16       	cp	r14, r18
     61e:	f3 06       	cpc	r15, r19
     620:	04 07       	cpc	r16, r20
     622:	15 07       	cpc	r17, r21
     624:	28 f4       	brcc	.+10     	; 0x630 <__stack+0x1d1>
     626:	08 94       	sec
     628:	a1 08       	sbc	r10, r1
     62a:	b1 08       	sbc	r11, r1
     62c:	c1 08       	sbc	r12, r1
     62e:	d1 08       	sbc	r13, r1
     630:	d3 01       	movw	r26, r6
     632:	99 27       	eor	r25, r25
     634:	88 27       	eor	r24, r24
     636:	86 01       	movw	r16, r12
     638:	75 01       	movw	r14, r10
     63a:	e8 2a       	or	r14, r24
     63c:	f9 2a       	or	r15, r25
     63e:	0a 2b       	or	r16, r26
     640:	1b 2b       	or	r17, r27
     642:	25 96       	adiw	r28, 0x05	; 5
     644:	ec ae       	std	Y+60, r14	; 0x3c
     646:	fd ae       	std	Y+61, r15	; 0x3d
     648:	0e af       	std	Y+62, r16	; 0x3e
     64a:	1f af       	std	Y+63, r17	; 0x3f
     64c:	25 97       	sbiw	r28, 0x05	; 5
     64e:	eb c4       	rjmp	.+2518   	; 0x1026 <__stack+0xbc7>
     650:	21 14       	cp	r2, r1
     652:	31 04       	cpc	r3, r1
     654:	41 04       	cpc	r4, r1
     656:	51 04       	cpc	r5, r1
     658:	71 f4       	brne	.+28     	; 0x676 <__stack+0x217>
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	1c 01       	movw	r2, r24
     674:	2d 01       	movw	r4, r26
     676:	00 e0       	ldi	r16, 0x00	; 0
     678:	20 16       	cp	r2, r16
     67a:	00 e0       	ldi	r16, 0x00	; 0
     67c:	30 06       	cpc	r3, r16
     67e:	01 e0       	ldi	r16, 0x01	; 1
     680:	40 06       	cpc	r4, r16
     682:	00 e0       	ldi	r16, 0x00	; 0
     684:	50 06       	cpc	r5, r16
     686:	88 f4       	brcc	.+34     	; 0x6aa <__stack+0x24b>
     688:	1f ef       	ldi	r17, 0xFF	; 255
     68a:	21 16       	cp	r2, r17
     68c:	31 04       	cpc	r3, r1
     68e:	41 04       	cpc	r4, r1
     690:	51 04       	cpc	r5, r1
     692:	31 f0       	breq	.+12     	; 0x6a0 <__stack+0x241>
     694:	28 f0       	brcs	.+10     	; 0x6a0 <__stack+0x241>
     696:	48 e0       	ldi	r20, 0x08	; 8
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	17 c0       	rjmp	.+46     	; 0x6ce <__stack+0x26f>
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	12 c0       	rjmp	.+36     	; 0x6ce <__stack+0x26f>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	22 16       	cp	r2, r18
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	32 06       	cpc	r3, r18
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	42 06       	cpc	r4, r18
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	52 06       	cpc	r5, r18
     6ba:	28 f0       	brcs	.+10     	; 0x6c6 <__stack+0x267>
     6bc:	48 e1       	ldi	r20, 0x18	; 24
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__stack+0x26f>
     6c6:	40 e1       	ldi	r20, 0x10	; 16
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	d2 01       	movw	r26, r4
     6d0:	c1 01       	movw	r24, r2
     6d2:	04 2e       	mov	r0, r20
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <__stack+0x27f>
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
     6de:	0a 94       	dec	r0
     6e0:	d2 f7       	brpl	.-12     	; 0x6d6 <__stack+0x277>
     6e2:	88 59       	subi	r24, 0x98	; 152
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	dc 01       	movw	r26, r24
     6e8:	2c 91       	ld	r18, X
     6ea:	e0 e2       	ldi	r30, 0x20	; 32
     6ec:	ee 2e       	mov	r14, r30
     6ee:	f1 2c       	mov	r15, r1
     6f0:	01 2d       	mov	r16, r1
     6f2:	11 2d       	mov	r17, r1
     6f4:	d8 01       	movw	r26, r16
     6f6:	c7 01       	movw	r24, r14
     6f8:	84 1b       	sub	r24, r20
     6fa:	95 0b       	sbc	r25, r21
     6fc:	a6 0b       	sbc	r26, r22
     6fe:	b7 0b       	sbc	r27, r23
     700:	82 1b       	sub	r24, r18
     702:	91 09       	sbc	r25, r1
     704:	a1 09       	sbc	r26, r1
     706:	b1 09       	sbc	r27, r1
     708:	00 97       	sbiw	r24, 0x00	; 0
     70a:	a1 05       	cpc	r26, r1
     70c:	b1 05       	cpc	r27, r1
     70e:	61 f4       	brne	.+24     	; 0x728 <__stack+0x2c9>
     710:	64 01       	movw	r12, r8
     712:	53 01       	movw	r10, r6
     714:	a2 18       	sub	r10, r2
     716:	b3 08       	sbc	r11, r3
     718:	c4 08       	sbc	r12, r4
     71a:	d5 08       	sbc	r13, r5
     71c:	31 e0       	ldi	r19, 0x01	; 1
     71e:	63 2e       	mov	r6, r19
     720:	71 2c       	mov	r7, r1
     722:	81 2c       	mov	r8, r1
     724:	91 2c       	mov	r9, r1
     726:	24 c1       	rjmp	.+584    	; 0x970 <__stack+0x511>
     728:	e3 96       	adiw	r28, 0x33	; 51
     72a:	8f af       	std	Y+63, r24	; 0x3f
     72c:	e3 97       	sbiw	r28, 0x33	; 51
     72e:	08 2e       	mov	r0, r24
     730:	04 c0       	rjmp	.+8      	; 0x73a <__stack+0x2db>
     732:	22 0c       	add	r2, r2
     734:	33 1c       	adc	r3, r3
     736:	44 1c       	adc	r4, r4
     738:	55 1c       	adc	r5, r5
     73a:	0a 94       	dec	r0
     73c:	d2 f7       	brpl	.-12     	; 0x732 <__stack+0x2d3>
     73e:	ee 2d       	mov	r30, r14
     740:	e8 1b       	sub	r30, r24
     742:	64 01       	movw	r12, r8
     744:	53 01       	movw	r10, r6
     746:	0e 2e       	mov	r0, r30
     748:	04 c0       	rjmp	.+8      	; 0x752 <__stack+0x2f3>
     74a:	d6 94       	lsr	r13
     74c:	c7 94       	ror	r12
     74e:	b7 94       	ror	r11
     750:	a7 94       	ror	r10
     752:	0a 94       	dec	r0
     754:	d2 f7       	brpl	.-12     	; 0x74a <__stack+0x2eb>
     756:	a4 01       	movw	r20, r8
     758:	93 01       	movw	r18, r6
     75a:	e3 96       	adiw	r28, 0x33	; 51
     75c:	0f ac       	ldd	r0, Y+63	; 0x3f
     75e:	e3 97       	sbiw	r28, 0x33	; 51
     760:	04 c0       	rjmp	.+8      	; 0x76a <__stack+0x30b>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	44 1f       	adc	r20, r20
     768:	55 1f       	adc	r21, r21
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__stack+0x303>
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	6c ac       	ldd	r6, Y+60	; 0x3c
     772:	7d ac       	ldd	r7, Y+61	; 0x3d
     774:	8e ac       	ldd	r8, Y+62	; 0x3e
     776:	9f ac       	ldd	r9, Y+63	; 0x3f
     778:	21 97       	sbiw	r28, 0x01	; 1
     77a:	0e 2e       	mov	r0, r30
     77c:	04 c0       	rjmp	.+8      	; 0x786 <__stack+0x327>
     77e:	96 94       	lsr	r9
     780:	87 94       	ror	r8
     782:	77 94       	ror	r7
     784:	67 94       	ror	r6
     786:	0a 94       	dec	r0
     788:	d2 f7       	brpl	.-12     	; 0x77e <__stack+0x31f>
     78a:	84 01       	movw	r16, r8
     78c:	73 01       	movw	r14, r6
     78e:	e2 2a       	or	r14, r18
     790:	f3 2a       	or	r15, r19
     792:	04 2b       	or	r16, r20
     794:	15 2b       	or	r17, r21
     796:	e9 ae       	std	Y+57, r14	; 0x39
     798:	fa ae       	std	Y+58, r15	; 0x3a
     79a:	0b af       	std	Y+59, r16	; 0x3b
     79c:	1c af       	std	Y+60, r17	; 0x3c
     79e:	32 01       	movw	r6, r4
     7a0:	88 24       	eor	r8, r8
     7a2:	99 24       	eor	r9, r9
     7a4:	92 01       	movw	r18, r4
     7a6:	81 01       	movw	r16, r2
     7a8:	20 70       	andi	r18, 0x00	; 0
     7aa:	30 70       	andi	r19, 0x00	; 0
     7ac:	61 96       	adiw	r28, 0x11	; 17
     7ae:	0c af       	std	Y+60, r16	; 0x3c
     7b0:	1d af       	std	Y+61, r17	; 0x3d
     7b2:	2e af       	std	Y+62, r18	; 0x3e
     7b4:	3f af       	std	Y+63, r19	; 0x3f
     7b6:	61 97       	sbiw	r28, 0x11	; 17
     7b8:	c6 01       	movw	r24, r12
     7ba:	b5 01       	movw	r22, r10
     7bc:	a4 01       	movw	r20, r8
     7be:	93 01       	movw	r18, r6
     7c0:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     7c4:	7b 01       	movw	r14, r22
     7c6:	8c 01       	movw	r16, r24
     7c8:	c6 01       	movw	r24, r12
     7ca:	b5 01       	movw	r22, r10
     7cc:	a4 01       	movw	r20, r8
     7ce:	93 01       	movw	r18, r6
     7d0:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     7d4:	c9 01       	movw	r24, r18
     7d6:	da 01       	movw	r26, r20
     7d8:	65 96       	adiw	r28, 0x15	; 21
     7da:	8c af       	std	Y+60, r24	; 0x3c
     7dc:	9d af       	std	Y+61, r25	; 0x3d
     7de:	ae af       	std	Y+62, r26	; 0x3e
     7e0:	bf af       	std	Y+63, r27	; 0x3f
     7e2:	65 97       	sbiw	r28, 0x15	; 21
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	61 96       	adiw	r28, 0x11	; 17
     7ea:	2c ad       	ldd	r18, Y+60	; 0x3c
     7ec:	3d ad       	ldd	r19, Y+61	; 0x3d
     7ee:	4e ad       	ldd	r20, Y+62	; 0x3e
     7f0:	5f ad       	ldd	r21, Y+63	; 0x3f
     7f2:	61 97       	sbiw	r28, 0x11	; 17
     7f4:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsi3>
     7f8:	9b 01       	movw	r18, r22
     7fa:	ac 01       	movw	r20, r24
     7fc:	87 01       	movw	r16, r14
     7fe:	ff 24       	eor	r15, r15
     800:	ee 24       	eor	r14, r14
     802:	a9 ac       	ldd	r10, Y+57	; 0x39
     804:	ba ac       	ldd	r11, Y+58	; 0x3a
     806:	cb ac       	ldd	r12, Y+59	; 0x3b
     808:	dc ac       	ldd	r13, Y+60	; 0x3c
     80a:	c6 01       	movw	r24, r12
     80c:	aa 27       	eor	r26, r26
     80e:	bb 27       	eor	r27, r27
     810:	5c 01       	movw	r10, r24
     812:	6d 01       	movw	r12, r26
     814:	ae 28       	or	r10, r14
     816:	bf 28       	or	r11, r15
     818:	c0 2a       	or	r12, r16
     81a:	d1 2a       	or	r13, r17
     81c:	a2 16       	cp	r10, r18
     81e:	b3 06       	cpc	r11, r19
     820:	c4 06       	cpc	r12, r20
     822:	d5 06       	cpc	r13, r21
     824:	60 f5       	brcc	.+88     	; 0x87e <__stack+0x41f>
     826:	65 96       	adiw	r28, 0x15	; 21
     828:	6c ad       	ldd	r22, Y+60	; 0x3c
     82a:	7d ad       	ldd	r23, Y+61	; 0x3d
     82c:	8e ad       	ldd	r24, Y+62	; 0x3e
     82e:	9f ad       	ldd	r25, Y+63	; 0x3f
     830:	65 97       	sbiw	r28, 0x15	; 21
     832:	61 50       	subi	r22, 0x01	; 1
     834:	70 40       	sbci	r23, 0x00	; 0
     836:	80 40       	sbci	r24, 0x00	; 0
     838:	90 40       	sbci	r25, 0x00	; 0
     83a:	65 96       	adiw	r28, 0x15	; 21
     83c:	6c af       	std	Y+60, r22	; 0x3c
     83e:	7d af       	std	Y+61, r23	; 0x3d
     840:	8e af       	std	Y+62, r24	; 0x3e
     842:	9f af       	std	Y+63, r25	; 0x3f
     844:	65 97       	sbiw	r28, 0x15	; 21
     846:	a2 0c       	add	r10, r2
     848:	b3 1c       	adc	r11, r3
     84a:	c4 1c       	adc	r12, r4
     84c:	d5 1c       	adc	r13, r5
     84e:	a2 14       	cp	r10, r2
     850:	b3 04       	cpc	r11, r3
     852:	c4 04       	cpc	r12, r4
     854:	d5 04       	cpc	r13, r5
     856:	98 f0       	brcs	.+38     	; 0x87e <__stack+0x41f>
     858:	a2 16       	cp	r10, r18
     85a:	b3 06       	cpc	r11, r19
     85c:	c4 06       	cpc	r12, r20
     85e:	d5 06       	cpc	r13, r21
     860:	70 f4       	brcc	.+28     	; 0x87e <__stack+0x41f>
     862:	61 50       	subi	r22, 0x01	; 1
     864:	70 40       	sbci	r23, 0x00	; 0
     866:	80 40       	sbci	r24, 0x00	; 0
     868:	90 40       	sbci	r25, 0x00	; 0
     86a:	65 96       	adiw	r28, 0x15	; 21
     86c:	6c af       	std	Y+60, r22	; 0x3c
     86e:	7d af       	std	Y+61, r23	; 0x3d
     870:	8e af       	std	Y+62, r24	; 0x3e
     872:	9f af       	std	Y+63, r25	; 0x3f
     874:	65 97       	sbiw	r28, 0x15	; 21
     876:	a2 0c       	add	r10, r2
     878:	b3 1c       	adc	r11, r3
     87a:	c4 1c       	adc	r12, r4
     87c:	d5 1c       	adc	r13, r5
     87e:	a2 1a       	sub	r10, r18
     880:	b3 0a       	sbc	r11, r19
     882:	c4 0a       	sbc	r12, r20
     884:	d5 0a       	sbc	r13, r21
     886:	c6 01       	movw	r24, r12
     888:	b5 01       	movw	r22, r10
     88a:	a4 01       	movw	r20, r8
     88c:	93 01       	movw	r18, r6
     88e:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     892:	7b 01       	movw	r14, r22
     894:	8c 01       	movw	r16, r24
     896:	c6 01       	movw	r24, r12
     898:	b5 01       	movw	r22, r10
     89a:	a4 01       	movw	r20, r8
     89c:	93 01       	movw	r18, r6
     89e:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     8a2:	c9 01       	movw	r24, r18
     8a4:	da 01       	movw	r26, r20
     8a6:	3c 01       	movw	r6, r24
     8a8:	4d 01       	movw	r8, r26
     8aa:	c4 01       	movw	r24, r8
     8ac:	b3 01       	movw	r22, r6
     8ae:	61 96       	adiw	r28, 0x11	; 17
     8b0:	2c ad       	ldd	r18, Y+60	; 0x3c
     8b2:	3d ad       	ldd	r19, Y+61	; 0x3d
     8b4:	4e ad       	ldd	r20, Y+62	; 0x3e
     8b6:	5f ad       	ldd	r21, Y+63	; 0x3f
     8b8:	61 97       	sbiw	r28, 0x11	; 17
     8ba:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsi3>
     8be:	9b 01       	movw	r18, r22
     8c0:	ac 01       	movw	r20, r24
     8c2:	87 01       	movw	r16, r14
     8c4:	ff 24       	eor	r15, r15
     8c6:	ee 24       	eor	r14, r14
     8c8:	89 ad       	ldd	r24, Y+57	; 0x39
     8ca:	9a ad       	ldd	r25, Y+58	; 0x3a
     8cc:	ab ad       	ldd	r26, Y+59	; 0x3b
     8ce:	bc ad       	ldd	r27, Y+60	; 0x3c
     8d0:	a0 70       	andi	r26, 0x00	; 0
     8d2:	b0 70       	andi	r27, 0x00	; 0
     8d4:	57 01       	movw	r10, r14
     8d6:	68 01       	movw	r12, r16
     8d8:	a8 2a       	or	r10, r24
     8da:	b9 2a       	or	r11, r25
     8dc:	ca 2a       	or	r12, r26
     8de:	db 2a       	or	r13, r27
     8e0:	a2 16       	cp	r10, r18
     8e2:	b3 06       	cpc	r11, r19
     8e4:	c4 06       	cpc	r12, r20
     8e6:	d5 06       	cpc	r13, r21
     8e8:	e0 f4       	brcc	.+56     	; 0x922 <__stack+0x4c3>
     8ea:	08 94       	sec
     8ec:	61 08       	sbc	r6, r1
     8ee:	71 08       	sbc	r7, r1
     8f0:	81 08       	sbc	r8, r1
     8f2:	91 08       	sbc	r9, r1
     8f4:	a2 0c       	add	r10, r2
     8f6:	b3 1c       	adc	r11, r3
     8f8:	c4 1c       	adc	r12, r4
     8fa:	d5 1c       	adc	r13, r5
     8fc:	a2 14       	cp	r10, r2
     8fe:	b3 04       	cpc	r11, r3
     900:	c4 04       	cpc	r12, r4
     902:	d5 04       	cpc	r13, r5
     904:	70 f0       	brcs	.+28     	; 0x922 <__stack+0x4c3>
     906:	a2 16       	cp	r10, r18
     908:	b3 06       	cpc	r11, r19
     90a:	c4 06       	cpc	r12, r20
     90c:	d5 06       	cpc	r13, r21
     90e:	48 f4       	brcc	.+18     	; 0x922 <__stack+0x4c3>
     910:	08 94       	sec
     912:	61 08       	sbc	r6, r1
     914:	71 08       	sbc	r7, r1
     916:	81 08       	sbc	r8, r1
     918:	91 08       	sbc	r9, r1
     91a:	a2 0c       	add	r10, r2
     91c:	b3 1c       	adc	r11, r3
     91e:	c4 1c       	adc	r12, r4
     920:	d5 1c       	adc	r13, r5
     922:	21 96       	adiw	r28, 0x01	; 1
     924:	8c ad       	ldd	r24, Y+60	; 0x3c
     926:	9d ad       	ldd	r25, Y+61	; 0x3d
     928:	ae ad       	ldd	r26, Y+62	; 0x3e
     92a:	bf ad       	ldd	r27, Y+63	; 0x3f
     92c:	21 97       	sbiw	r28, 0x01	; 1
     92e:	e3 96       	adiw	r28, 0x33	; 51
     930:	0f ac       	ldd	r0, Y+63	; 0x3f
     932:	e3 97       	sbiw	r28, 0x33	; 51
     934:	04 c0       	rjmp	.+8      	; 0x93e <__stack+0x4df>
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	aa 1f       	adc	r26, r26
     93c:	bb 1f       	adc	r27, r27
     93e:	0a 94       	dec	r0
     940:	d2 f7       	brpl	.-12     	; 0x936 <__stack+0x4d7>
     942:	21 96       	adiw	r28, 0x01	; 1
     944:	8c af       	std	Y+60, r24	; 0x3c
     946:	9d af       	std	Y+61, r25	; 0x3d
     948:	ae af       	std	Y+62, r26	; 0x3e
     94a:	bf af       	std	Y+63, r27	; 0x3f
     94c:	21 97       	sbiw	r28, 0x01	; 1
     94e:	a2 1a       	sub	r10, r18
     950:	b3 0a       	sbc	r11, r19
     952:	c4 0a       	sbc	r12, r20
     954:	d5 0a       	sbc	r13, r21
     956:	65 96       	adiw	r28, 0x15	; 21
     958:	ec ac       	ldd	r14, Y+60	; 0x3c
     95a:	fd ac       	ldd	r15, Y+61	; 0x3d
     95c:	0e ad       	ldd	r16, Y+62	; 0x3e
     95e:	1f ad       	ldd	r17, Y+63	; 0x3f
     960:	65 97       	sbiw	r28, 0x15	; 21
     962:	d7 01       	movw	r26, r14
     964:	99 27       	eor	r25, r25
     966:	88 27       	eor	r24, r24
     968:	68 2a       	or	r6, r24
     96a:	79 2a       	or	r7, r25
     96c:	8a 2a       	or	r8, r26
     96e:	9b 2a       	or	r9, r27
     970:	82 01       	movw	r16, r4
     972:	22 27       	eor	r18, r18
     974:	33 27       	eor	r19, r19
     976:	69 96       	adiw	r28, 0x19	; 25
     978:	0c af       	std	Y+60, r16	; 0x3c
     97a:	1d af       	std	Y+61, r17	; 0x3d
     97c:	2e af       	std	Y+62, r18	; 0x3e
     97e:	3f af       	std	Y+63, r19	; 0x3f
     980:	69 97       	sbiw	r28, 0x19	; 25
     982:	a2 01       	movw	r20, r4
     984:	91 01       	movw	r18, r2
     986:	40 70       	andi	r20, 0x00	; 0
     988:	50 70       	andi	r21, 0x00	; 0
     98a:	6d 96       	adiw	r28, 0x1d	; 29
     98c:	2c af       	std	Y+60, r18	; 0x3c
     98e:	3d af       	std	Y+61, r19	; 0x3d
     990:	4e af       	std	Y+62, r20	; 0x3e
     992:	5f af       	std	Y+63, r21	; 0x3f
     994:	6d 97       	sbiw	r28, 0x1d	; 29
     996:	c6 01       	movw	r24, r12
     998:	b5 01       	movw	r22, r10
     99a:	69 96       	adiw	r28, 0x19	; 25
     99c:	2c ad       	ldd	r18, Y+60	; 0x3c
     99e:	3d ad       	ldd	r19, Y+61	; 0x3d
     9a0:	4e ad       	ldd	r20, Y+62	; 0x3e
     9a2:	5f ad       	ldd	r21, Y+63	; 0x3f
     9a4:	69 97       	sbiw	r28, 0x19	; 25
     9a6:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     9aa:	7b 01       	movw	r14, r22
     9ac:	8c 01       	movw	r16, r24
     9ae:	c6 01       	movw	r24, r12
     9b0:	b5 01       	movw	r22, r10
     9b2:	69 96       	adiw	r28, 0x19	; 25
     9b4:	2c ad       	ldd	r18, Y+60	; 0x3c
     9b6:	3d ad       	ldd	r19, Y+61	; 0x3d
     9b8:	4e ad       	ldd	r20, Y+62	; 0x3e
     9ba:	5f ad       	ldd	r21, Y+63	; 0x3f
     9bc:	69 97       	sbiw	r28, 0x19	; 25
     9be:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     9c2:	c9 01       	movw	r24, r18
     9c4:	da 01       	movw	r26, r20
     9c6:	a1 96       	adiw	r28, 0x21	; 33
     9c8:	8c af       	std	Y+60, r24	; 0x3c
     9ca:	9d af       	std	Y+61, r25	; 0x3d
     9cc:	ae af       	std	Y+62, r26	; 0x3e
     9ce:	bf af       	std	Y+63, r27	; 0x3f
     9d0:	a1 97       	sbiw	r28, 0x21	; 33
     9d2:	bc 01       	movw	r22, r24
     9d4:	cd 01       	movw	r24, r26
     9d6:	6d 96       	adiw	r28, 0x1d	; 29
     9d8:	2c ad       	ldd	r18, Y+60	; 0x3c
     9da:	3d ad       	ldd	r19, Y+61	; 0x3d
     9dc:	4e ad       	ldd	r20, Y+62	; 0x3e
     9de:	5f ad       	ldd	r21, Y+63	; 0x3f
     9e0:	6d 97       	sbiw	r28, 0x1d	; 29
     9e2:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsi3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	87 01       	movw	r16, r14
     9ec:	ff 24       	eor	r15, r15
     9ee:	ee 24       	eor	r14, r14
     9f0:	21 96       	adiw	r28, 0x01	; 1
     9f2:	ac ac       	ldd	r10, Y+60	; 0x3c
     9f4:	bd ac       	ldd	r11, Y+61	; 0x3d
     9f6:	ce ac       	ldd	r12, Y+62	; 0x3e
     9f8:	df ac       	ldd	r13, Y+63	; 0x3f
     9fa:	21 97       	sbiw	r28, 0x01	; 1
     9fc:	c6 01       	movw	r24, r12
     9fe:	aa 27       	eor	r26, r26
     a00:	bb 27       	eor	r27, r27
     a02:	57 01       	movw	r10, r14
     a04:	68 01       	movw	r12, r16
     a06:	a8 2a       	or	r10, r24
     a08:	b9 2a       	or	r11, r25
     a0a:	ca 2a       	or	r12, r26
     a0c:	db 2a       	or	r13, r27
     a0e:	a2 16       	cp	r10, r18
     a10:	b3 06       	cpc	r11, r19
     a12:	c4 06       	cpc	r12, r20
     a14:	d5 06       	cpc	r13, r21
     a16:	60 f5       	brcc	.+88     	; 0xa70 <__stack+0x611>
     a18:	a1 96       	adiw	r28, 0x21	; 33
     a1a:	6c ad       	ldd	r22, Y+60	; 0x3c
     a1c:	7d ad       	ldd	r23, Y+61	; 0x3d
     a1e:	8e ad       	ldd	r24, Y+62	; 0x3e
     a20:	9f ad       	ldd	r25, Y+63	; 0x3f
     a22:	a1 97       	sbiw	r28, 0x21	; 33
     a24:	61 50       	subi	r22, 0x01	; 1
     a26:	70 40       	sbci	r23, 0x00	; 0
     a28:	80 40       	sbci	r24, 0x00	; 0
     a2a:	90 40       	sbci	r25, 0x00	; 0
     a2c:	a1 96       	adiw	r28, 0x21	; 33
     a2e:	6c af       	std	Y+60, r22	; 0x3c
     a30:	7d af       	std	Y+61, r23	; 0x3d
     a32:	8e af       	std	Y+62, r24	; 0x3e
     a34:	9f af       	std	Y+63, r25	; 0x3f
     a36:	a1 97       	sbiw	r28, 0x21	; 33
     a38:	a2 0c       	add	r10, r2
     a3a:	b3 1c       	adc	r11, r3
     a3c:	c4 1c       	adc	r12, r4
     a3e:	d5 1c       	adc	r13, r5
     a40:	a2 14       	cp	r10, r2
     a42:	b3 04       	cpc	r11, r3
     a44:	c4 04       	cpc	r12, r4
     a46:	d5 04       	cpc	r13, r5
     a48:	98 f0       	brcs	.+38     	; 0xa70 <__stack+0x611>
     a4a:	a2 16       	cp	r10, r18
     a4c:	b3 06       	cpc	r11, r19
     a4e:	c4 06       	cpc	r12, r20
     a50:	d5 06       	cpc	r13, r21
     a52:	70 f4       	brcc	.+28     	; 0xa70 <__stack+0x611>
     a54:	61 50       	subi	r22, 0x01	; 1
     a56:	70 40       	sbci	r23, 0x00	; 0
     a58:	80 40       	sbci	r24, 0x00	; 0
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	a1 96       	adiw	r28, 0x21	; 33
     a5e:	6c af       	std	Y+60, r22	; 0x3c
     a60:	7d af       	std	Y+61, r23	; 0x3d
     a62:	8e af       	std	Y+62, r24	; 0x3e
     a64:	9f af       	std	Y+63, r25	; 0x3f
     a66:	a1 97       	sbiw	r28, 0x21	; 33
     a68:	a2 0c       	add	r10, r2
     a6a:	b3 1c       	adc	r11, r3
     a6c:	c4 1c       	adc	r12, r4
     a6e:	d5 1c       	adc	r13, r5
     a70:	a2 1a       	sub	r10, r18
     a72:	b3 0a       	sbc	r11, r19
     a74:	c4 0a       	sbc	r12, r20
     a76:	d5 0a       	sbc	r13, r21
     a78:	c6 01       	movw	r24, r12
     a7a:	b5 01       	movw	r22, r10
     a7c:	69 96       	adiw	r28, 0x19	; 25
     a7e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a80:	3d ad       	ldd	r19, Y+61	; 0x3d
     a82:	4e ad       	ldd	r20, Y+62	; 0x3e
     a84:	5f ad       	ldd	r21, Y+63	; 0x3f
     a86:	69 97       	sbiw	r28, 0x19	; 25
     a88:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     a8c:	7b 01       	movw	r14, r22
     a8e:	8c 01       	movw	r16, r24
     a90:	c6 01       	movw	r24, r12
     a92:	b5 01       	movw	r22, r10
     a94:	69 96       	adiw	r28, 0x19	; 25
     a96:	2c ad       	ldd	r18, Y+60	; 0x3c
     a98:	3d ad       	ldd	r19, Y+61	; 0x3d
     a9a:	4e ad       	ldd	r20, Y+62	; 0x3e
     a9c:	5f ad       	ldd	r21, Y+63	; 0x3f
     a9e:	69 97       	sbiw	r28, 0x19	; 25
     aa0:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     aa4:	c9 01       	movw	r24, r18
     aa6:	da 01       	movw	r26, r20
     aa8:	5c 01       	movw	r10, r24
     aaa:	6d 01       	movw	r12, r26
     aac:	c6 01       	movw	r24, r12
     aae:	b5 01       	movw	r22, r10
     ab0:	6d 96       	adiw	r28, 0x1d	; 29
     ab2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ab4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ab6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ab8:	5f ad       	ldd	r21, Y+63	; 0x3f
     aba:	6d 97       	sbiw	r28, 0x1d	; 29
     abc:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsi3>
     ac0:	9b 01       	movw	r18, r22
     ac2:	ac 01       	movw	r20, r24
     ac4:	87 01       	movw	r16, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	ee 24       	eor	r14, r14
     aca:	21 96       	adiw	r28, 0x01	; 1
     acc:	8c ad       	ldd	r24, Y+60	; 0x3c
     ace:	9d ad       	ldd	r25, Y+61	; 0x3d
     ad0:	ae ad       	ldd	r26, Y+62	; 0x3e
     ad2:	bf ad       	ldd	r27, Y+63	; 0x3f
     ad4:	21 97       	sbiw	r28, 0x01	; 1
     ad6:	a0 70       	andi	r26, 0x00	; 0
     ad8:	b0 70       	andi	r27, 0x00	; 0
     ada:	e8 2a       	or	r14, r24
     adc:	f9 2a       	or	r15, r25
     ade:	0a 2b       	or	r16, r26
     ae0:	1b 2b       	or	r17, r27
     ae2:	e2 16       	cp	r14, r18
     ae4:	f3 06       	cpc	r15, r19
     ae6:	04 07       	cpc	r16, r20
     ae8:	15 07       	cpc	r17, r21
     aea:	c0 f4       	brcc	.+48     	; 0xb1c <__stack+0x6bd>
     aec:	08 94       	sec
     aee:	a1 08       	sbc	r10, r1
     af0:	b1 08       	sbc	r11, r1
     af2:	c1 08       	sbc	r12, r1
     af4:	d1 08       	sbc	r13, r1
     af6:	e2 0c       	add	r14, r2
     af8:	f3 1c       	adc	r15, r3
     afa:	04 1d       	adc	r16, r4
     afc:	15 1d       	adc	r17, r5
     afe:	e2 14       	cp	r14, r2
     b00:	f3 04       	cpc	r15, r3
     b02:	04 05       	cpc	r16, r4
     b04:	15 05       	cpc	r17, r5
     b06:	50 f0       	brcs	.+20     	; 0xb1c <__stack+0x6bd>
     b08:	e2 16       	cp	r14, r18
     b0a:	f3 06       	cpc	r15, r19
     b0c:	04 07       	cpc	r16, r20
     b0e:	15 07       	cpc	r17, r21
     b10:	28 f4       	brcc	.+10     	; 0xb1c <__stack+0x6bd>
     b12:	08 94       	sec
     b14:	a1 08       	sbc	r10, r1
     b16:	b1 08       	sbc	r11, r1
     b18:	c1 08       	sbc	r12, r1
     b1a:	d1 08       	sbc	r13, r1
     b1c:	a1 96       	adiw	r28, 0x21	; 33
     b1e:	ec ac       	ldd	r14, Y+60	; 0x3c
     b20:	fd ac       	ldd	r15, Y+61	; 0x3d
     b22:	0e ad       	ldd	r16, Y+62	; 0x3e
     b24:	1f ad       	ldd	r17, Y+63	; 0x3f
     b26:	a1 97       	sbiw	r28, 0x21	; 33
     b28:	d7 01       	movw	r26, r14
     b2a:	99 27       	eor	r25, r25
     b2c:	88 27       	eor	r24, r24
     b2e:	96 01       	movw	r18, r12
     b30:	85 01       	movw	r16, r10
     b32:	08 2b       	or	r16, r24
     b34:	19 2b       	or	r17, r25
     b36:	2a 2b       	or	r18, r26
     b38:	3b 2b       	or	r19, r27
     b3a:	25 96       	adiw	r28, 0x05	; 5
     b3c:	0c af       	std	Y+60, r16	; 0x3c
     b3e:	1d af       	std	Y+61, r17	; 0x3d
     b40:	2e af       	std	Y+62, r18	; 0x3e
     b42:	3f af       	std	Y+63, r19	; 0x3f
     b44:	25 97       	sbiw	r28, 0x05	; 5
     b46:	72 c2       	rjmp	.+1252   	; 0x102c <__stack+0xbcd>
     b48:	6e 14       	cp	r6, r14
     b4a:	7f 04       	cpc	r7, r15
     b4c:	80 06       	cpc	r8, r16
     b4e:	91 06       	cpc	r9, r17
     b50:	08 f4       	brcc	.+2      	; 0xb54 <__stack+0x6f5>
     b52:	5f c2       	rjmp	.+1214   	; 0x1012 <__stack+0xbb3>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	e2 16       	cp	r14, r18
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	f2 06       	cpc	r15, r18
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	02 07       	cpc	r16, r18
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	12 07       	cpc	r17, r18
     b64:	88 f4       	brcc	.+34     	; 0xb88 <__stack+0x729>
     b66:	3f ef       	ldi	r19, 0xFF	; 255
     b68:	e3 16       	cp	r14, r19
     b6a:	f1 04       	cpc	r15, r1
     b6c:	01 05       	cpc	r16, r1
     b6e:	11 05       	cpc	r17, r1
     b70:	31 f0       	breq	.+12     	; 0xb7e <__stack+0x71f>
     b72:	28 f0       	brcs	.+10     	; 0xb7e <__stack+0x71f>
     b74:	48 e0       	ldi	r20, 0x08	; 8
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	17 c0       	rjmp	.+46     	; 0xbac <__stack+0x74d>
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	12 c0       	rjmp	.+36     	; 0xbac <__stack+0x74d>
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	e4 16       	cp	r14, r20
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	f4 06       	cpc	r15, r20
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	04 07       	cpc	r16, r20
     b94:	41 e0       	ldi	r20, 0x01	; 1
     b96:	14 07       	cpc	r17, r20
     b98:	28 f0       	brcs	.+10     	; 0xba4 <__stack+0x745>
     b9a:	48 e1       	ldi	r20, 0x18	; 24
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <__stack+0x74d>
     ba4:	40 e1       	ldi	r20, 0x10	; 16
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	d8 01       	movw	r26, r16
     bae:	c7 01       	movw	r24, r14
     bb0:	04 2e       	mov	r0, r20
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__stack+0x75d>
     bb4:	b6 95       	lsr	r27
     bb6:	a7 95       	ror	r26
     bb8:	97 95       	ror	r25
     bba:	87 95       	ror	r24
     bbc:	0a 94       	dec	r0
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__stack+0x755>
     bc0:	88 59       	subi	r24, 0x98	; 152
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	dc 01       	movw	r26, r24
     bc6:	2c 91       	ld	r18, X
     bc8:	30 e2       	ldi	r19, 0x20	; 32
     bca:	a3 2e       	mov	r10, r19
     bcc:	b1 2c       	mov	r11, r1
     bce:	c1 2c       	mov	r12, r1
     bd0:	d1 2c       	mov	r13, r1
     bd2:	d6 01       	movw	r26, r12
     bd4:	c5 01       	movw	r24, r10
     bd6:	84 1b       	sub	r24, r20
     bd8:	95 0b       	sbc	r25, r21
     bda:	a6 0b       	sbc	r26, r22
     bdc:	b7 0b       	sbc	r27, r23
     bde:	82 1b       	sub	r24, r18
     be0:	91 09       	sbc	r25, r1
     be2:	a1 09       	sbc	r26, r1
     be4:	b1 09       	sbc	r27, r1
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	a1 05       	cpc	r26, r1
     bea:	b1 05       	cpc	r27, r1
     bec:	99 f4       	brne	.+38     	; 0xc14 <__stack+0x7b5>
     bee:	e6 14       	cp	r14, r6
     bf0:	f7 04       	cpc	r15, r7
     bf2:	08 05       	cpc	r16, r8
     bf4:	19 05       	cpc	r17, r9
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__stack+0x79b>
     bf8:	fe c1       	rjmp	.+1020   	; 0xff6 <__stack+0xb97>
     bfa:	21 96       	adiw	r28, 0x01	; 1
     bfc:	6c ac       	ldd	r6, Y+60	; 0x3c
     bfe:	7d ac       	ldd	r7, Y+61	; 0x3d
     c00:	8e ac       	ldd	r8, Y+62	; 0x3e
     c02:	9f ac       	ldd	r9, Y+63	; 0x3f
     c04:	21 97       	sbiw	r28, 0x01	; 1
     c06:	62 14       	cp	r6, r2
     c08:	73 04       	cpc	r7, r3
     c0a:	84 04       	cpc	r8, r4
     c0c:	95 04       	cpc	r9, r5
     c0e:	08 f0       	brcs	.+2      	; 0xc12 <__stack+0x7b3>
     c10:	f2 c1       	rjmp	.+996    	; 0xff6 <__stack+0xb97>
     c12:	ff c1       	rjmp	.+1022   	; 0x1012 <__stack+0xbb3>
     c14:	e2 96       	adiw	r28, 0x32	; 50
     c16:	8f af       	std	Y+63, r24	; 0x3f
     c18:	e2 97       	sbiw	r28, 0x32	; 50
     c1a:	08 2e       	mov	r0, r24
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <__stack+0x7c7>
     c1e:	ee 0c       	add	r14, r14
     c20:	ff 1c       	adc	r15, r15
     c22:	00 1f       	adc	r16, r16
     c24:	11 1f       	adc	r17, r17
     c26:	0a 94       	dec	r0
     c28:	d2 f7       	brpl	.-12     	; 0xc1e <__stack+0x7bf>
     c2a:	6a 2d       	mov	r22, r10
     c2c:	68 1b       	sub	r22, r24
     c2e:	d2 01       	movw	r26, r4
     c30:	c1 01       	movw	r24, r2
     c32:	06 2e       	mov	r0, r22
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__stack+0x7df>
     c36:	b6 95       	lsr	r27
     c38:	a7 95       	ror	r26
     c3a:	97 95       	ror	r25
     c3c:	87 95       	ror	r24
     c3e:	0a 94       	dec	r0
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__stack+0x7d7>
     c42:	5c 01       	movw	r10, r24
     c44:	6d 01       	movw	r12, r26
     c46:	ae 28       	or	r10, r14
     c48:	bf 28       	or	r11, r15
     c4a:	c0 2a       	or	r12, r16
     c4c:	d1 2a       	or	r13, r17
     c4e:	ad aa       	std	Y+53, r10	; 0x35
     c50:	be aa       	std	Y+54, r11	; 0x36
     c52:	cf aa       	std	Y+55, r12	; 0x37
     c54:	d8 ae       	std	Y+56, r13	; 0x38
     c56:	72 01       	movw	r14, r4
     c58:	61 01       	movw	r12, r2
     c5a:	e2 96       	adiw	r28, 0x32	; 50
     c5c:	0f ac       	ldd	r0, Y+63	; 0x3f
     c5e:	e2 97       	sbiw	r28, 0x32	; 50
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <__stack+0x80b>
     c62:	cc 0c       	add	r12, r12
     c64:	dd 1c       	adc	r13, r13
     c66:	ee 1c       	adc	r14, r14
     c68:	ff 1c       	adc	r15, r15
     c6a:	0a 94       	dec	r0
     c6c:	d2 f7       	brpl	.-12     	; 0xc62 <__stack+0x803>
     c6e:	c9 aa       	std	Y+49, r12	; 0x31
     c70:	da aa       	std	Y+50, r13	; 0x32
     c72:	eb aa       	std	Y+51, r14	; 0x33
     c74:	fc aa       	std	Y+52, r15	; 0x34
     c76:	64 01       	movw	r12, r8
     c78:	53 01       	movw	r10, r6
     c7a:	06 2e       	mov	r0, r22
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__stack+0x827>
     c7e:	d6 94       	lsr	r13
     c80:	c7 94       	ror	r12
     c82:	b7 94       	ror	r11
     c84:	a7 94       	ror	r10
     c86:	0a 94       	dec	r0
     c88:	d2 f7       	brpl	.-12     	; 0xc7e <__stack+0x81f>
     c8a:	d4 01       	movw	r26, r8
     c8c:	c3 01       	movw	r24, r6
     c8e:	e2 96       	adiw	r28, 0x32	; 50
     c90:	0f ac       	ldd	r0, Y+63	; 0x3f
     c92:	e2 97       	sbiw	r28, 0x32	; 50
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__stack+0x83f>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	aa 1f       	adc	r26, r26
     c9c:	bb 1f       	adc	r27, r27
     c9e:	0a 94       	dec	r0
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__stack+0x837>
     ca2:	21 96       	adiw	r28, 0x01	; 1
     ca4:	ec ac       	ldd	r14, Y+60	; 0x3c
     ca6:	fd ac       	ldd	r15, Y+61	; 0x3d
     ca8:	0e ad       	ldd	r16, Y+62	; 0x3e
     caa:	1f ad       	ldd	r17, Y+63	; 0x3f
     cac:	21 97       	sbiw	r28, 0x01	; 1
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__stack+0x859>
     cb0:	16 95       	lsr	r17
     cb2:	07 95       	ror	r16
     cb4:	f7 94       	ror	r15
     cb6:	e7 94       	ror	r14
     cb8:	6a 95       	dec	r22
     cba:	d2 f7       	brpl	.-12     	; 0xcb0 <__stack+0x851>
     cbc:	37 01       	movw	r6, r14
     cbe:	48 01       	movw	r8, r16
     cc0:	68 2a       	or	r6, r24
     cc2:	79 2a       	or	r7, r25
     cc4:	8a 2a       	or	r8, r26
     cc6:	9b 2a       	or	r9, r27
     cc8:	6d a6       	std	Y+45, r6	; 0x2d
     cca:	7e a6       	std	Y+46, r7	; 0x2e
     ccc:	8f a6       	std	Y+47, r8	; 0x2f
     cce:	98 aa       	std	Y+48, r9	; 0x30
     cd0:	ed a8       	ldd	r14, Y+53	; 0x35
     cd2:	fe a8       	ldd	r15, Y+54	; 0x36
     cd4:	0f a9       	ldd	r16, Y+55	; 0x37
     cd6:	18 ad       	ldd	r17, Y+56	; 0x38
     cd8:	38 01       	movw	r6, r16
     cda:	88 24       	eor	r8, r8
     cdc:	99 24       	eor	r9, r9
     cde:	98 01       	movw	r18, r16
     ce0:	87 01       	movw	r16, r14
     ce2:	20 70       	andi	r18, 0x00	; 0
     ce4:	30 70       	andi	r19, 0x00	; 0
     ce6:	a5 96       	adiw	r28, 0x25	; 37
     ce8:	0c af       	std	Y+60, r16	; 0x3c
     cea:	1d af       	std	Y+61, r17	; 0x3d
     cec:	2e af       	std	Y+62, r18	; 0x3e
     cee:	3f af       	std	Y+63, r19	; 0x3f
     cf0:	a5 97       	sbiw	r28, 0x25	; 37
     cf2:	c6 01       	movw	r24, r12
     cf4:	b5 01       	movw	r22, r10
     cf6:	a4 01       	movw	r20, r8
     cf8:	93 01       	movw	r18, r6
     cfa:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     cfe:	7b 01       	movw	r14, r22
     d00:	8c 01       	movw	r16, r24
     d02:	c6 01       	movw	r24, r12
     d04:	b5 01       	movw	r22, r10
     d06:	a4 01       	movw	r20, r8
     d08:	93 01       	movw	r18, r6
     d0a:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     d0e:	c9 01       	movw	r24, r18
     d10:	da 01       	movw	r26, r20
     d12:	1c 01       	movw	r2, r24
     d14:	2d 01       	movw	r4, r26
     d16:	c2 01       	movw	r24, r4
     d18:	b1 01       	movw	r22, r2
     d1a:	a5 96       	adiw	r28, 0x25	; 37
     d1c:	2c ad       	ldd	r18, Y+60	; 0x3c
     d1e:	3d ad       	ldd	r19, Y+61	; 0x3d
     d20:	4e ad       	ldd	r20, Y+62	; 0x3e
     d22:	5f ad       	ldd	r21, Y+63	; 0x3f
     d24:	a5 97       	sbiw	r28, 0x25	; 37
     d26:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsi3>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	87 01       	movw	r16, r14
     d30:	ff 24       	eor	r15, r15
     d32:	ee 24       	eor	r14, r14
     d34:	ad a4       	ldd	r10, Y+45	; 0x2d
     d36:	be a4       	ldd	r11, Y+46	; 0x2e
     d38:	cf a4       	ldd	r12, Y+47	; 0x2f
     d3a:	d8 a8       	ldd	r13, Y+48	; 0x30
     d3c:	c6 01       	movw	r24, r12
     d3e:	aa 27       	eor	r26, r26
     d40:	bb 27       	eor	r27, r27
     d42:	57 01       	movw	r10, r14
     d44:	68 01       	movw	r12, r16
     d46:	a8 2a       	or	r10, r24
     d48:	b9 2a       	or	r11, r25
     d4a:	ca 2a       	or	r12, r26
     d4c:	db 2a       	or	r13, r27
     d4e:	a2 16       	cp	r10, r18
     d50:	b3 06       	cpc	r11, r19
     d52:	c4 06       	cpc	r12, r20
     d54:	d5 06       	cpc	r13, r21
     d56:	00 f5       	brcc	.+64     	; 0xd98 <__stack+0x939>
     d58:	08 94       	sec
     d5a:	21 08       	sbc	r2, r1
     d5c:	31 08       	sbc	r3, r1
     d5e:	41 08       	sbc	r4, r1
     d60:	51 08       	sbc	r5, r1
     d62:	ed a8       	ldd	r14, Y+53	; 0x35
     d64:	fe a8       	ldd	r15, Y+54	; 0x36
     d66:	0f a9       	ldd	r16, Y+55	; 0x37
     d68:	18 ad       	ldd	r17, Y+56	; 0x38
     d6a:	ae 0c       	add	r10, r14
     d6c:	bf 1c       	adc	r11, r15
     d6e:	c0 1e       	adc	r12, r16
     d70:	d1 1e       	adc	r13, r17
     d72:	ae 14       	cp	r10, r14
     d74:	bf 04       	cpc	r11, r15
     d76:	c0 06       	cpc	r12, r16
     d78:	d1 06       	cpc	r13, r17
     d7a:	70 f0       	brcs	.+28     	; 0xd98 <__stack+0x939>
     d7c:	a2 16       	cp	r10, r18
     d7e:	b3 06       	cpc	r11, r19
     d80:	c4 06       	cpc	r12, r20
     d82:	d5 06       	cpc	r13, r21
     d84:	48 f4       	brcc	.+18     	; 0xd98 <__stack+0x939>
     d86:	08 94       	sec
     d88:	21 08       	sbc	r2, r1
     d8a:	31 08       	sbc	r3, r1
     d8c:	41 08       	sbc	r4, r1
     d8e:	51 08       	sbc	r5, r1
     d90:	ae 0c       	add	r10, r14
     d92:	bf 1c       	adc	r11, r15
     d94:	c0 1e       	adc	r12, r16
     d96:	d1 1e       	adc	r13, r17
     d98:	a2 1a       	sub	r10, r18
     d9a:	b3 0a       	sbc	r11, r19
     d9c:	c4 0a       	sbc	r12, r20
     d9e:	d5 0a       	sbc	r13, r21
     da0:	c6 01       	movw	r24, r12
     da2:	b5 01       	movw	r22, r10
     da4:	a4 01       	movw	r20, r8
     da6:	93 01       	movw	r18, r6
     da8:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     dac:	7b 01       	movw	r14, r22
     dae:	8c 01       	movw	r16, r24
     db0:	c6 01       	movw	r24, r12
     db2:	b5 01       	movw	r22, r10
     db4:	a4 01       	movw	r20, r8
     db6:	93 01       	movw	r18, r6
     db8:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
     dbc:	c9 01       	movw	r24, r18
     dbe:	da 01       	movw	r26, r20
     dc0:	3c 01       	movw	r6, r24
     dc2:	4d 01       	movw	r8, r26
     dc4:	c4 01       	movw	r24, r8
     dc6:	b3 01       	movw	r22, r6
     dc8:	a5 96       	adiw	r28, 0x25	; 37
     dca:	2c ad       	ldd	r18, Y+60	; 0x3c
     dcc:	3d ad       	ldd	r19, Y+61	; 0x3d
     dce:	4e ad       	ldd	r20, Y+62	; 0x3e
     dd0:	5f ad       	ldd	r21, Y+63	; 0x3f
     dd2:	a5 97       	sbiw	r28, 0x25	; 37
     dd4:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsi3>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24
     ddc:	87 01       	movw	r16, r14
     dde:	ff 24       	eor	r15, r15
     de0:	ee 24       	eor	r14, r14
     de2:	8d a5       	ldd	r24, Y+45	; 0x2d
     de4:	9e a5       	ldd	r25, Y+46	; 0x2e
     de6:	af a5       	ldd	r26, Y+47	; 0x2f
     de8:	b8 a9       	ldd	r27, Y+48	; 0x30
     dea:	a0 70       	andi	r26, 0x00	; 0
     dec:	b0 70       	andi	r27, 0x00	; 0
     dee:	57 01       	movw	r10, r14
     df0:	68 01       	movw	r12, r16
     df2:	a8 2a       	or	r10, r24
     df4:	b9 2a       	or	r11, r25
     df6:	ca 2a       	or	r12, r26
     df8:	db 2a       	or	r13, r27
     dfa:	a2 16       	cp	r10, r18
     dfc:	b3 06       	cpc	r11, r19
     dfe:	c4 06       	cpc	r12, r20
     e00:	d5 06       	cpc	r13, r21
     e02:	00 f5       	brcc	.+64     	; 0xe44 <__stack+0x9e5>
     e04:	08 94       	sec
     e06:	61 08       	sbc	r6, r1
     e08:	71 08       	sbc	r7, r1
     e0a:	81 08       	sbc	r8, r1
     e0c:	91 08       	sbc	r9, r1
     e0e:	6d a9       	ldd	r22, Y+53	; 0x35
     e10:	7e a9       	ldd	r23, Y+54	; 0x36
     e12:	8f a9       	ldd	r24, Y+55	; 0x37
     e14:	98 ad       	ldd	r25, Y+56	; 0x38
     e16:	a6 0e       	add	r10, r22
     e18:	b7 1e       	adc	r11, r23
     e1a:	c8 1e       	adc	r12, r24
     e1c:	d9 1e       	adc	r13, r25
     e1e:	a6 16       	cp	r10, r22
     e20:	b7 06       	cpc	r11, r23
     e22:	c8 06       	cpc	r12, r24
     e24:	d9 06       	cpc	r13, r25
     e26:	70 f0       	brcs	.+28     	; 0xe44 <__stack+0x9e5>
     e28:	a2 16       	cp	r10, r18
     e2a:	b3 06       	cpc	r11, r19
     e2c:	c4 06       	cpc	r12, r20
     e2e:	d5 06       	cpc	r13, r21
     e30:	48 f4       	brcc	.+18     	; 0xe44 <__stack+0x9e5>
     e32:	08 94       	sec
     e34:	61 08       	sbc	r6, r1
     e36:	71 08       	sbc	r7, r1
     e38:	81 08       	sbc	r8, r1
     e3a:	91 08       	sbc	r9, r1
     e3c:	a6 0e       	add	r10, r22
     e3e:	b7 1e       	adc	r11, r23
     e40:	c8 1e       	adc	r12, r24
     e42:	d9 1e       	adc	r13, r25
     e44:	d6 01       	movw	r26, r12
     e46:	c5 01       	movw	r24, r10
     e48:	82 1b       	sub	r24, r18
     e4a:	93 0b       	sbc	r25, r19
     e4c:	a4 0b       	sbc	r26, r20
     e4e:	b5 0b       	sbc	r27, r21
     e50:	89 a7       	std	Y+41, r24	; 0x29
     e52:	9a a7       	std	Y+42, r25	; 0x2a
     e54:	ab a7       	std	Y+43, r26	; 0x2b
     e56:	bc a7       	std	Y+44, r27	; 0x2c
     e58:	d1 01       	movw	r26, r2
     e5a:	99 27       	eor	r25, r25
     e5c:	88 27       	eor	r24, r24
     e5e:	64 01       	movw	r12, r8
     e60:	53 01       	movw	r10, r6
     e62:	a8 2a       	or	r10, r24
     e64:	b9 2a       	or	r11, r25
     e66:	ca 2a       	or	r12, r26
     e68:	db 2a       	or	r13, r27
     e6a:	25 96       	adiw	r28, 0x05	; 5
     e6c:	ac ae       	std	Y+60, r10	; 0x3c
     e6e:	bd ae       	std	Y+61, r11	; 0x3d
     e70:	ce ae       	std	Y+62, r12	; 0x3e
     e72:	df ae       	std	Y+63, r13	; 0x3f
     e74:	25 97       	sbiw	r28, 0x05	; 5
     e76:	86 01       	movw	r16, r12
     e78:	75 01       	movw	r14, r10
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	3f ef       	ldi	r19, 0xFF	; 255
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	e2 22       	and	r14, r18
     e84:	f3 22       	and	r15, r19
     e86:	04 23       	and	r16, r20
     e88:	15 23       	and	r17, r21
     e8a:	a6 01       	movw	r20, r12
     e8c:	66 27       	eor	r22, r22
     e8e:	77 27       	eor	r23, r23
     e90:	ad 96       	adiw	r28, 0x2d	; 45
     e92:	4c af       	std	Y+60, r20	; 0x3c
     e94:	5d af       	std	Y+61, r21	; 0x3d
     e96:	6e af       	std	Y+62, r22	; 0x3e
     e98:	7f af       	std	Y+63, r23	; 0x3f
     e9a:	ad 97       	sbiw	r28, 0x2d	; 45
     e9c:	a9 a8       	ldd	r10, Y+49	; 0x31
     e9e:	ba a8       	ldd	r11, Y+50	; 0x32
     ea0:	cb a8       	ldd	r12, Y+51	; 0x33
     ea2:	dc a8       	ldd	r13, Y+52	; 0x34
     ea4:	6f ef       	ldi	r22, 0xFF	; 255
     ea6:	7f ef       	ldi	r23, 0xFF	; 255
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	a6 22       	and	r10, r22
     eae:	b7 22       	and	r11, r23
     eb0:	c8 22       	and	r12, r24
     eb2:	d9 22       	and	r13, r25
     eb4:	89 a9       	ldd	r24, Y+49	; 0x31
     eb6:	9a a9       	ldd	r25, Y+50	; 0x32
     eb8:	ab a9       	ldd	r26, Y+51	; 0x33
     eba:	bc a9       	ldd	r27, Y+52	; 0x34
     ebc:	1d 01       	movw	r2, r26
     ebe:	44 24       	eor	r4, r4
     ec0:	55 24       	eor	r5, r5
     ec2:	c8 01       	movw	r24, r16
     ec4:	b7 01       	movw	r22, r14
     ec6:	a6 01       	movw	r20, r12
     ec8:	95 01       	movw	r18, r10
     eca:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsi3>
     ece:	a9 96       	adiw	r28, 0x29	; 41
     ed0:	6c af       	std	Y+60, r22	; 0x3c
     ed2:	7d af       	std	Y+61, r23	; 0x3d
     ed4:	8e af       	std	Y+62, r24	; 0x3e
     ed6:	9f af       	std	Y+63, r25	; 0x3f
     ed8:	a9 97       	sbiw	r28, 0x29	; 41
     eda:	c8 01       	movw	r24, r16
     edc:	b7 01       	movw	r22, r14
     ede:	a2 01       	movw	r20, r4
     ee0:	91 01       	movw	r18, r2
     ee2:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsi3>
     ee6:	3b 01       	movw	r6, r22
     ee8:	4c 01       	movw	r8, r24
     eea:	ad 96       	adiw	r28, 0x2d	; 45
     eec:	6c ad       	ldd	r22, Y+60	; 0x3c
     eee:	7d ad       	ldd	r23, Y+61	; 0x3d
     ef0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ef4:	ad 97       	sbiw	r28, 0x2d	; 45
     ef6:	a6 01       	movw	r20, r12
     ef8:	95 01       	movw	r18, r10
     efa:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsi3>
     efe:	7b 01       	movw	r14, r22
     f00:	8c 01       	movw	r16, r24
     f02:	ad 96       	adiw	r28, 0x2d	; 45
     f04:	6c ad       	ldd	r22, Y+60	; 0x3c
     f06:	7d ad       	ldd	r23, Y+61	; 0x3d
     f08:	8e ad       	ldd	r24, Y+62	; 0x3e
     f0a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f0c:	ad 97       	sbiw	r28, 0x2d	; 45
     f0e:	a2 01       	movw	r20, r4
     f10:	91 01       	movw	r18, r2
     f12:	0e 94 16 19 	call	0x322c	; 0x322c <__mulsi3>
     f16:	5b 01       	movw	r10, r22
     f18:	6c 01       	movw	r12, r24
     f1a:	a8 01       	movw	r20, r16
     f1c:	97 01       	movw	r18, r14
     f1e:	26 0d       	add	r18, r6
     f20:	37 1d       	adc	r19, r7
     f22:	48 1d       	adc	r20, r8
     f24:	59 1d       	adc	r21, r9
     f26:	a9 96       	adiw	r28, 0x29	; 41
     f28:	6c ac       	ldd	r6, Y+60	; 0x3c
     f2a:	7d ac       	ldd	r7, Y+61	; 0x3d
     f2c:	8e ac       	ldd	r8, Y+62	; 0x3e
     f2e:	9f ac       	ldd	r9, Y+63	; 0x3f
     f30:	a9 97       	sbiw	r28, 0x29	; 41
     f32:	c4 01       	movw	r24, r8
     f34:	aa 27       	eor	r26, r26
     f36:	bb 27       	eor	r27, r27
     f38:	28 0f       	add	r18, r24
     f3a:	39 1f       	adc	r19, r25
     f3c:	4a 1f       	adc	r20, r26
     f3e:	5b 1f       	adc	r21, r27
     f40:	2e 15       	cp	r18, r14
     f42:	3f 05       	cpc	r19, r15
     f44:	40 07       	cpc	r20, r16
     f46:	51 07       	cpc	r21, r17
     f48:	48 f4       	brcc	.+18     	; 0xf5c <__stack+0xafd>
     f4a:	e1 2c       	mov	r14, r1
     f4c:	f1 2c       	mov	r15, r1
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	06 2f       	mov	r16, r22
     f52:	11 2d       	mov	r17, r1
     f54:	ae 0c       	add	r10, r14
     f56:	bf 1c       	adc	r11, r15
     f58:	c0 1e       	adc	r12, r16
     f5a:	d1 1e       	adc	r13, r17
     f5c:	ca 01       	movw	r24, r20
     f5e:	aa 27       	eor	r26, r26
     f60:	bb 27       	eor	r27, r27
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	6a 0d       	add	r22, r10
     f68:	7b 1d       	adc	r23, r11
     f6a:	8c 1d       	adc	r24, r12
     f6c:	9d 1d       	adc	r25, r13
     f6e:	69 a4       	ldd	r6, Y+41	; 0x29
     f70:	7a a4       	ldd	r7, Y+42	; 0x2a
     f72:	8b a4       	ldd	r8, Y+43	; 0x2b
     f74:	9c a4       	ldd	r9, Y+44	; 0x2c
     f76:	66 16       	cp	r6, r22
     f78:	77 06       	cpc	r7, r23
     f7a:	88 06       	cpc	r8, r24
     f7c:	99 06       	cpc	r9, r25
     f7e:	50 f1       	brcs	.+84     	; 0xfd4 <__stack+0xb75>
     f80:	66 15       	cp	r22, r6
     f82:	77 05       	cpc	r23, r7
     f84:	88 05       	cpc	r24, r8
     f86:	99 05       	cpc	r25, r9
     f88:	09 f0       	breq	.+2      	; 0xf8c <__stack+0xb2d>
     f8a:	4d c0       	rjmp	.+154    	; 0x1026 <__stack+0xbc7>
     f8c:	d9 01       	movw	r26, r18
     f8e:	99 27       	eor	r25, r25
     f90:	88 27       	eor	r24, r24
     f92:	a9 96       	adiw	r28, 0x29	; 41
     f94:	2c ad       	ldd	r18, Y+60	; 0x3c
     f96:	3d ad       	ldd	r19, Y+61	; 0x3d
     f98:	4e ad       	ldd	r20, Y+62	; 0x3e
     f9a:	5f ad       	ldd	r21, Y+63	; 0x3f
     f9c:	a9 97       	sbiw	r28, 0x29	; 41
     f9e:	40 70       	andi	r20, 0x00	; 0
     fa0:	50 70       	andi	r21, 0x00	; 0
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	a4 1f       	adc	r26, r20
     fa8:	b5 1f       	adc	r27, r21
     faa:	21 96       	adiw	r28, 0x01	; 1
     fac:	2c ad       	ldd	r18, Y+60	; 0x3c
     fae:	3d ad       	ldd	r19, Y+61	; 0x3d
     fb0:	4e ad       	ldd	r20, Y+62	; 0x3e
     fb2:	5f ad       	ldd	r21, Y+63	; 0x3f
     fb4:	21 97       	sbiw	r28, 0x01	; 1
     fb6:	e2 96       	adiw	r28, 0x32	; 50
     fb8:	0f ac       	ldd	r0, Y+63	; 0x3f
     fba:	e2 97       	sbiw	r28, 0x32	; 50
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <__stack+0xb67>
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	44 1f       	adc	r20, r20
     fc4:	55 1f       	adc	r21, r21
     fc6:	0a 94       	dec	r0
     fc8:	d2 f7       	brpl	.-12     	; 0xfbe <__stack+0xb5f>
     fca:	28 17       	cp	r18, r24
     fcc:	39 07       	cpc	r19, r25
     fce:	4a 07       	cpc	r20, r26
     fd0:	5b 07       	cpc	r21, r27
     fd2:	48 f5       	brcc	.+82     	; 0x1026 <__stack+0xbc7>
     fd4:	25 96       	adiw	r28, 0x05	; 5
     fd6:	0c ad       	ldd	r16, Y+60	; 0x3c
     fd8:	1d ad       	ldd	r17, Y+61	; 0x3d
     fda:	2e ad       	ldd	r18, Y+62	; 0x3e
     fdc:	3f ad       	ldd	r19, Y+63	; 0x3f
     fde:	25 97       	sbiw	r28, 0x05	; 5
     fe0:	01 50       	subi	r16, 0x01	; 1
     fe2:	10 40       	sbci	r17, 0x00	; 0
     fe4:	20 40       	sbci	r18, 0x00	; 0
     fe6:	30 40       	sbci	r19, 0x00	; 0
     fe8:	25 96       	adiw	r28, 0x05	; 5
     fea:	0c af       	std	Y+60, r16	; 0x3c
     fec:	1d af       	std	Y+61, r17	; 0x3d
     fee:	2e af       	std	Y+62, r18	; 0x3e
     ff0:	3f af       	std	Y+63, r19	; 0x3f
     ff2:	25 97       	sbiw	r28, 0x05	; 5
     ff4:	18 c0       	rjmp	.+48     	; 0x1026 <__stack+0xbc7>
     ff6:	66 24       	eor	r6, r6
     ff8:	77 24       	eor	r7, r7
     ffa:	43 01       	movw	r8, r6
     ffc:	21 e0       	ldi	r18, 0x01	; 1
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	25 96       	adiw	r28, 0x05	; 5
    1006:	2c af       	std	Y+60, r18	; 0x3c
    1008:	3d af       	std	Y+61, r19	; 0x3d
    100a:	4e af       	std	Y+62, r20	; 0x3e
    100c:	5f af       	std	Y+63, r21	; 0x3f
    100e:	25 97       	sbiw	r28, 0x05	; 5
    1010:	0d c0       	rjmp	.+26     	; 0x102c <__stack+0xbcd>
    1012:	66 24       	eor	r6, r6
    1014:	77 24       	eor	r7, r7
    1016:	43 01       	movw	r8, r6
    1018:	25 96       	adiw	r28, 0x05	; 5
    101a:	1c ae       	std	Y+60, r1	; 0x3c
    101c:	1d ae       	std	Y+61, r1	; 0x3d
    101e:	1e ae       	std	Y+62, r1	; 0x3e
    1020:	1f ae       	std	Y+63, r1	; 0x3f
    1022:	25 97       	sbiw	r28, 0x05	; 5
    1024:	03 c0       	rjmp	.+6      	; 0x102c <__stack+0xbcd>
    1026:	66 24       	eor	r6, r6
    1028:	77 24       	eor	r7, r7
    102a:	43 01       	movw	r8, r6
    102c:	fe 01       	movw	r30, r28
    102e:	b1 96       	adiw	r30, 0x21	; 33
    1030:	88 e0       	ldi	r24, 0x08	; 8
    1032:	df 01       	movw	r26, r30
    1034:	1d 92       	st	X+, r1
    1036:	8a 95       	dec	r24
    1038:	e9 f7       	brne	.-6      	; 0x1034 <__stack+0xbd5>
    103a:	25 96       	adiw	r28, 0x05	; 5
    103c:	ac ac       	ldd	r10, Y+60	; 0x3c
    103e:	bd ac       	ldd	r11, Y+61	; 0x3d
    1040:	ce ac       	ldd	r12, Y+62	; 0x3e
    1042:	df ac       	ldd	r13, Y+63	; 0x3f
    1044:	25 97       	sbiw	r28, 0x05	; 5
    1046:	a9 a2       	std	Y+33, r10	; 0x21
    1048:	ba a2       	std	Y+34, r11	; 0x22
    104a:	cb a2       	std	Y+35, r12	; 0x23
    104c:	dc a2       	std	Y+36, r13	; 0x24
    104e:	6d a2       	std	Y+37, r6	; 0x25
    1050:	7e a2       	std	Y+38, r7	; 0x26
    1052:	8f a2       	std	Y+39, r8	; 0x27
    1054:	98 a6       	std	Y+40, r9	; 0x28
    1056:	22 96       	adiw	r28, 0x02	; 2
    1058:	2f ad       	ldd	r18, Y+63	; 0x3f
    105a:	22 97       	sbiw	r28, 0x02	; 2
    105c:	3a a1       	ldd	r19, Y+34	; 0x22
    105e:	4b a1       	ldd	r20, Y+35	; 0x23
    1060:	5c a1       	ldd	r21, Y+36	; 0x24
    1062:	66 2d       	mov	r22, r6
    1064:	7e a1       	ldd	r23, Y+38	; 0x26
    1066:	df a0       	ldd	r13, Y+39	; 0x27
    1068:	98 a5       	ldd	r25, Y+40	; 0x28
    106a:	e1 96       	adiw	r28, 0x31	; 49
    106c:	ec ac       	ldd	r14, Y+60	; 0x3c
    106e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1070:	0e ad       	ldd	r16, Y+62	; 0x3e
    1072:	1f ad       	ldd	r17, Y+63	; 0x3f
    1074:	e1 97       	sbiw	r28, 0x31	; 49
    1076:	e1 14       	cp	r14, r1
    1078:	f1 04       	cpc	r15, r1
    107a:	01 05       	cpc	r16, r1
    107c:	11 05       	cpc	r17, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <__stack+0xc23>
    1080:	56 c0       	rjmp	.+172    	; 0x112e <__stack+0xccf>
    1082:	21 95       	neg	r18
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	12 16       	cp	r1, r18
    1088:	08 f0       	brcs	.+2      	; 0x108c <__stack+0xc2d>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	31 95       	neg	r19
    108e:	e1 e0       	ldi	r30, 0x01	; 1
    1090:	13 16       	cp	r1, r19
    1092:	08 f0       	brcs	.+2      	; 0x1096 <__stack+0xc37>
    1094:	e0 e0       	ldi	r30, 0x00	; 0
    1096:	93 2e       	mov	r9, r19
    1098:	98 1a       	sub	r9, r24
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	39 15       	cp	r19, r9
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <__stack+0xc43>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	e8 2b       	or	r30, r24
    10a4:	41 95       	neg	r20
    10a6:	f1 e0       	ldi	r31, 0x01	; 1
    10a8:	14 16       	cp	r1, r20
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <__stack+0xc4f>
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	a4 2e       	mov	r10, r20
    10b0:	ae 1a       	sub	r10, r30
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	4a 15       	cp	r20, r10
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <__stack+0xc5b>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	f8 2b       	or	r31, r24
    10bc:	51 95       	neg	r21
    10be:	e1 e0       	ldi	r30, 0x01	; 1
    10c0:	15 16       	cp	r1, r21
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__stack+0xc67>
    10c4:	e0 e0       	ldi	r30, 0x00	; 0
    10c6:	b5 2e       	mov	r11, r21
    10c8:	bf 1a       	sub	r11, r31
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	5b 15       	cp	r21, r11
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <__stack+0xc73>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	e8 2b       	or	r30, r24
    10d4:	61 95       	neg	r22
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	16 16       	cp	r1, r22
    10da:	08 f0       	brcs	.+2      	; 0x10de <__stack+0xc7f>
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	a6 2f       	mov	r26, r22
    10e0:	ae 1b       	sub	r26, r30
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	6a 17       	cp	r22, r26
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <__stack+0xc8b>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	f8 2b       	or	r31, r24
    10ec:	71 95       	neg	r23
    10ee:	e1 e0       	ldi	r30, 0x01	; 1
    10f0:	17 16       	cp	r1, r23
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <__stack+0xc97>
    10f4:	e0 e0       	ldi	r30, 0x00	; 0
    10f6:	c7 2e       	mov	r12, r23
    10f8:	cf 1a       	sub	r12, r31
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	7c 15       	cp	r23, r12
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <__stack+0xca3>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	e8 2b       	or	r30, r24
    1104:	8d 2d       	mov	r24, r13
    1106:	81 95       	neg	r24
    1108:	f1 e0       	ldi	r31, 0x01	; 1
    110a:	18 16       	cp	r1, r24
    110c:	08 f0       	brcs	.+2      	; 0x1110 <__stack+0xcb1>
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	d8 2e       	mov	r13, r24
    1112:	de 1a       	sub	r13, r30
    1114:	e1 e0       	ldi	r30, 0x01	; 1
    1116:	8d 15       	cp	r24, r13
    1118:	08 f0       	brcs	.+2      	; 0x111c <__stack+0xcbd>
    111a:	e0 e0       	ldi	r30, 0x00	; 0
    111c:	fe 2b       	or	r31, r30
    111e:	89 2f       	mov	r24, r25
    1120:	81 95       	neg	r24
    1122:	39 2d       	mov	r19, r9
    1124:	a5 01       	movw	r20, r10
    1126:	6a 2f       	mov	r22, r26
    1128:	7c 2d       	mov	r23, r12
    112a:	98 2f       	mov	r25, r24
    112c:	9f 1b       	sub	r25, r31
    112e:	8d 2d       	mov	r24, r13
    1130:	ce 58       	subi	r28, 0x8E	; 142
    1132:	df 4f       	sbci	r29, 0xFF	; 255
    1134:	e2 e1       	ldi	r30, 0x12	; 18
    1136:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__epilogue_restores__>

0000113a <_fpadd_parts>:
    113a:	a0 e0       	ldi	r26, 0x00	; 0
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e3 ea       	ldi	r30, 0xA3	; 163
    1140:	f8 e0       	ldi	r31, 0x08	; 8
    1142:	0c 94 35 19 	jmp	0x326a	; 0x326a <__prologue_saves__>
    1146:	dc 01       	movw	r26, r24
    1148:	2b 01       	movw	r4, r22
    114a:	fa 01       	movw	r30, r20
    114c:	9c 91       	ld	r25, X
    114e:	92 30       	cpi	r25, 0x02	; 2
    1150:	08 f4       	brcc	.+2      	; 0x1154 <_fpadd_parts+0x1a>
    1152:	39 c1       	rjmp	.+626    	; 0x13c6 <_fpadd_parts+0x28c>
    1154:	eb 01       	movw	r28, r22
    1156:	88 81       	ld	r24, Y
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	08 f4       	brcc	.+2      	; 0x115e <_fpadd_parts+0x24>
    115c:	33 c1       	rjmp	.+614    	; 0x13c4 <_fpadd_parts+0x28a>
    115e:	94 30       	cpi	r25, 0x04	; 4
    1160:	69 f4       	brne	.+26     	; 0x117c <_fpadd_parts+0x42>
    1162:	84 30       	cpi	r24, 0x04	; 4
    1164:	09 f0       	breq	.+2      	; 0x1168 <_fpadd_parts+0x2e>
    1166:	2f c1       	rjmp	.+606    	; 0x13c6 <_fpadd_parts+0x28c>
    1168:	11 96       	adiw	r26, 0x01	; 1
    116a:	9c 91       	ld	r25, X
    116c:	11 97       	sbiw	r26, 0x01	; 1
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	98 17       	cp	r25, r24
    1172:	09 f4       	brne	.+2      	; 0x1176 <_fpadd_parts+0x3c>
    1174:	28 c1       	rjmp	.+592    	; 0x13c6 <_fpadd_parts+0x28c>
    1176:	a0 e6       	ldi	r26, 0x60	; 96
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	25 c1       	rjmp	.+586    	; 0x13c6 <_fpadd_parts+0x28c>
    117c:	84 30       	cpi	r24, 0x04	; 4
    117e:	09 f4       	brne	.+2      	; 0x1182 <_fpadd_parts+0x48>
    1180:	21 c1       	rjmp	.+578    	; 0x13c4 <_fpadd_parts+0x28a>
    1182:	82 30       	cpi	r24, 0x02	; 2
    1184:	a9 f4       	brne	.+42     	; 0x11b0 <_fpadd_parts+0x76>
    1186:	92 30       	cpi	r25, 0x02	; 2
    1188:	09 f0       	breq	.+2      	; 0x118c <_fpadd_parts+0x52>
    118a:	1d c1       	rjmp	.+570    	; 0x13c6 <_fpadd_parts+0x28c>
    118c:	9a 01       	movw	r18, r20
    118e:	ad 01       	movw	r20, r26
    1190:	88 e0       	ldi	r24, 0x08	; 8
    1192:	ea 01       	movw	r28, r20
    1194:	09 90       	ld	r0, Y+
    1196:	ae 01       	movw	r20, r28
    1198:	e9 01       	movw	r28, r18
    119a:	09 92       	st	Y+, r0
    119c:	9e 01       	movw	r18, r28
    119e:	81 50       	subi	r24, 0x01	; 1
    11a0:	c1 f7       	brne	.-16     	; 0x1192 <_fpadd_parts+0x58>
    11a2:	e2 01       	movw	r28, r4
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	11 96       	adiw	r26, 0x01	; 1
    11a8:	9c 91       	ld	r25, X
    11aa:	89 23       	and	r24, r25
    11ac:	81 83       	std	Z+1, r24	; 0x01
    11ae:	08 c1       	rjmp	.+528    	; 0x13c0 <_fpadd_parts+0x286>
    11b0:	92 30       	cpi	r25, 0x02	; 2
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <_fpadd_parts+0x7c>
    11b4:	07 c1       	rjmp	.+526    	; 0x13c4 <_fpadd_parts+0x28a>
    11b6:	12 96       	adiw	r26, 0x02	; 2
    11b8:	2d 90       	ld	r2, X+
    11ba:	3c 90       	ld	r3, X
    11bc:	13 97       	sbiw	r26, 0x03	; 3
    11be:	eb 01       	movw	r28, r22
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	9b 81       	ldd	r25, Y+3	; 0x03
    11c4:	14 96       	adiw	r26, 0x04	; 4
    11c6:	ad 90       	ld	r10, X+
    11c8:	bd 90       	ld	r11, X+
    11ca:	cd 90       	ld	r12, X+
    11cc:	dc 90       	ld	r13, X
    11ce:	17 97       	sbiw	r26, 0x07	; 7
    11d0:	ec 80       	ldd	r14, Y+4	; 0x04
    11d2:	fd 80       	ldd	r15, Y+5	; 0x05
    11d4:	0e 81       	ldd	r16, Y+6	; 0x06
    11d6:	1f 81       	ldd	r17, Y+7	; 0x07
    11d8:	91 01       	movw	r18, r2
    11da:	28 1b       	sub	r18, r24
    11dc:	39 0b       	sbc	r19, r25
    11de:	b9 01       	movw	r22, r18
    11e0:	37 ff       	sbrs	r19, 7
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <_fpadd_parts+0xb2>
    11e4:	66 27       	eor	r22, r22
    11e6:	77 27       	eor	r23, r23
    11e8:	62 1b       	sub	r22, r18
    11ea:	73 0b       	sbc	r23, r19
    11ec:	60 32       	cpi	r22, 0x20	; 32
    11ee:	71 05       	cpc	r23, r1
    11f0:	0c f0       	brlt	.+2      	; 0x11f4 <_fpadd_parts+0xba>
    11f2:	61 c0       	rjmp	.+194    	; 0x12b6 <_fpadd_parts+0x17c>
    11f4:	12 16       	cp	r1, r18
    11f6:	13 06       	cpc	r1, r19
    11f8:	6c f5       	brge	.+90     	; 0x1254 <_fpadd_parts+0x11a>
    11fa:	37 01       	movw	r6, r14
    11fc:	48 01       	movw	r8, r16
    11fe:	06 2e       	mov	r0, r22
    1200:	04 c0       	rjmp	.+8      	; 0x120a <_fpadd_parts+0xd0>
    1202:	96 94       	lsr	r9
    1204:	87 94       	ror	r8
    1206:	77 94       	ror	r7
    1208:	67 94       	ror	r6
    120a:	0a 94       	dec	r0
    120c:	d2 f7       	brpl	.-12     	; 0x1202 <_fpadd_parts+0xc8>
    120e:	21 e0       	ldi	r18, 0x01	; 1
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <_fpadd_parts+0xe6>
    1218:	22 0f       	add	r18, r18
    121a:	33 1f       	adc	r19, r19
    121c:	44 1f       	adc	r20, r20
    121e:	55 1f       	adc	r21, r21
    1220:	6a 95       	dec	r22
    1222:	d2 f7       	brpl	.-12     	; 0x1218 <_fpadd_parts+0xde>
    1224:	21 50       	subi	r18, 0x01	; 1
    1226:	30 40       	sbci	r19, 0x00	; 0
    1228:	40 40       	sbci	r20, 0x00	; 0
    122a:	50 40       	sbci	r21, 0x00	; 0
    122c:	2e 21       	and	r18, r14
    122e:	3f 21       	and	r19, r15
    1230:	40 23       	and	r20, r16
    1232:	51 23       	and	r21, r17
    1234:	21 15       	cp	r18, r1
    1236:	31 05       	cpc	r19, r1
    1238:	41 05       	cpc	r20, r1
    123a:	51 05       	cpc	r21, r1
    123c:	21 f0       	breq	.+8      	; 0x1246 <_fpadd_parts+0x10c>
    123e:	21 e0       	ldi	r18, 0x01	; 1
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	79 01       	movw	r14, r18
    1248:	8a 01       	movw	r16, r20
    124a:	e6 28       	or	r14, r6
    124c:	f7 28       	or	r15, r7
    124e:	08 29       	or	r16, r8
    1250:	19 29       	or	r17, r9
    1252:	3c c0       	rjmp	.+120    	; 0x12cc <_fpadd_parts+0x192>
    1254:	23 2b       	or	r18, r19
    1256:	d1 f1       	breq	.+116    	; 0x12cc <_fpadd_parts+0x192>
    1258:	26 0e       	add	r2, r22
    125a:	37 1e       	adc	r3, r23
    125c:	35 01       	movw	r6, r10
    125e:	46 01       	movw	r8, r12
    1260:	06 2e       	mov	r0, r22
    1262:	04 c0       	rjmp	.+8      	; 0x126c <_fpadd_parts+0x132>
    1264:	96 94       	lsr	r9
    1266:	87 94       	ror	r8
    1268:	77 94       	ror	r7
    126a:	67 94       	ror	r6
    126c:	0a 94       	dec	r0
    126e:	d2 f7       	brpl	.-12     	; 0x1264 <_fpadd_parts+0x12a>
    1270:	21 e0       	ldi	r18, 0x01	; 1
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <_fpadd_parts+0x148>
    127a:	22 0f       	add	r18, r18
    127c:	33 1f       	adc	r19, r19
    127e:	44 1f       	adc	r20, r20
    1280:	55 1f       	adc	r21, r21
    1282:	6a 95       	dec	r22
    1284:	d2 f7       	brpl	.-12     	; 0x127a <_fpadd_parts+0x140>
    1286:	21 50       	subi	r18, 0x01	; 1
    1288:	30 40       	sbci	r19, 0x00	; 0
    128a:	40 40       	sbci	r20, 0x00	; 0
    128c:	50 40       	sbci	r21, 0x00	; 0
    128e:	2a 21       	and	r18, r10
    1290:	3b 21       	and	r19, r11
    1292:	4c 21       	and	r20, r12
    1294:	5d 21       	and	r21, r13
    1296:	21 15       	cp	r18, r1
    1298:	31 05       	cpc	r19, r1
    129a:	41 05       	cpc	r20, r1
    129c:	51 05       	cpc	r21, r1
    129e:	21 f0       	breq	.+8      	; 0x12a8 <_fpadd_parts+0x16e>
    12a0:	21 e0       	ldi	r18, 0x01	; 1
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	59 01       	movw	r10, r18
    12aa:	6a 01       	movw	r12, r20
    12ac:	a6 28       	or	r10, r6
    12ae:	b7 28       	or	r11, r7
    12b0:	c8 28       	or	r12, r8
    12b2:	d9 28       	or	r13, r9
    12b4:	0b c0       	rjmp	.+22     	; 0x12cc <_fpadd_parts+0x192>
    12b6:	82 15       	cp	r24, r2
    12b8:	93 05       	cpc	r25, r3
    12ba:	2c f0       	brlt	.+10     	; 0x12c6 <_fpadd_parts+0x18c>
    12bc:	1c 01       	movw	r2, r24
    12be:	aa 24       	eor	r10, r10
    12c0:	bb 24       	eor	r11, r11
    12c2:	65 01       	movw	r12, r10
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <_fpadd_parts+0x192>
    12c6:	ee 24       	eor	r14, r14
    12c8:	ff 24       	eor	r15, r15
    12ca:	87 01       	movw	r16, r14
    12cc:	11 96       	adiw	r26, 0x01	; 1
    12ce:	9c 91       	ld	r25, X
    12d0:	d2 01       	movw	r26, r4
    12d2:	11 96       	adiw	r26, 0x01	; 1
    12d4:	8c 91       	ld	r24, X
    12d6:	98 17       	cp	r25, r24
    12d8:	09 f4       	brne	.+2      	; 0x12dc <_fpadd_parts+0x1a2>
    12da:	45 c0       	rjmp	.+138    	; 0x1366 <_fpadd_parts+0x22c>
    12dc:	99 23       	and	r25, r25
    12de:	39 f0       	breq	.+14     	; 0x12ee <_fpadd_parts+0x1b4>
    12e0:	a8 01       	movw	r20, r16
    12e2:	97 01       	movw	r18, r14
    12e4:	2a 19       	sub	r18, r10
    12e6:	3b 09       	sbc	r19, r11
    12e8:	4c 09       	sbc	r20, r12
    12ea:	5d 09       	sbc	r21, r13
    12ec:	06 c0       	rjmp	.+12     	; 0x12fa <_fpadd_parts+0x1c0>
    12ee:	a6 01       	movw	r20, r12
    12f0:	95 01       	movw	r18, r10
    12f2:	2e 19       	sub	r18, r14
    12f4:	3f 09       	sbc	r19, r15
    12f6:	40 0b       	sbc	r20, r16
    12f8:	51 0b       	sbc	r21, r17
    12fa:	57 fd       	sbrc	r21, 7
    12fc:	08 c0       	rjmp	.+16     	; 0x130e <_fpadd_parts+0x1d4>
    12fe:	11 82       	std	Z+1, r1	; 0x01
    1300:	33 82       	std	Z+3, r3	; 0x03
    1302:	22 82       	std	Z+2, r2	; 0x02
    1304:	24 83       	std	Z+4, r18	; 0x04
    1306:	35 83       	std	Z+5, r19	; 0x05
    1308:	46 83       	std	Z+6, r20	; 0x06
    130a:	57 83       	std	Z+7, r21	; 0x07
    130c:	1d c0       	rjmp	.+58     	; 0x1348 <_fpadd_parts+0x20e>
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	81 83       	std	Z+1, r24	; 0x01
    1312:	33 82       	std	Z+3, r3	; 0x03
    1314:	22 82       	std	Z+2, r2	; 0x02
    1316:	88 27       	eor	r24, r24
    1318:	99 27       	eor	r25, r25
    131a:	dc 01       	movw	r26, r24
    131c:	82 1b       	sub	r24, r18
    131e:	93 0b       	sbc	r25, r19
    1320:	a4 0b       	sbc	r26, r20
    1322:	b5 0b       	sbc	r27, r21
    1324:	84 83       	std	Z+4, r24	; 0x04
    1326:	95 83       	std	Z+5, r25	; 0x05
    1328:	a6 83       	std	Z+6, r26	; 0x06
    132a:	b7 83       	std	Z+7, r27	; 0x07
    132c:	0d c0       	rjmp	.+26     	; 0x1348 <_fpadd_parts+0x20e>
    132e:	22 0f       	add	r18, r18
    1330:	33 1f       	adc	r19, r19
    1332:	44 1f       	adc	r20, r20
    1334:	55 1f       	adc	r21, r21
    1336:	24 83       	std	Z+4, r18	; 0x04
    1338:	35 83       	std	Z+5, r19	; 0x05
    133a:	46 83       	std	Z+6, r20	; 0x06
    133c:	57 83       	std	Z+7, r21	; 0x07
    133e:	82 81       	ldd	r24, Z+2	; 0x02
    1340:	93 81       	ldd	r25, Z+3	; 0x03
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	93 83       	std	Z+3, r25	; 0x03
    1346:	82 83       	std	Z+2, r24	; 0x02
    1348:	24 81       	ldd	r18, Z+4	; 0x04
    134a:	35 81       	ldd	r19, Z+5	; 0x05
    134c:	46 81       	ldd	r20, Z+6	; 0x06
    134e:	57 81       	ldd	r21, Z+7	; 0x07
    1350:	da 01       	movw	r26, r20
    1352:	c9 01       	movw	r24, r18
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	a1 09       	sbc	r26, r1
    1358:	b1 09       	sbc	r27, r1
    135a:	8f 5f       	subi	r24, 0xFF	; 255
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	af 4f       	sbci	r26, 0xFF	; 255
    1360:	bf 43       	sbci	r27, 0x3F	; 63
    1362:	28 f3       	brcs	.-54     	; 0x132e <_fpadd_parts+0x1f4>
    1364:	0b c0       	rjmp	.+22     	; 0x137c <_fpadd_parts+0x242>
    1366:	91 83       	std	Z+1, r25	; 0x01
    1368:	33 82       	std	Z+3, r3	; 0x03
    136a:	22 82       	std	Z+2, r2	; 0x02
    136c:	ea 0c       	add	r14, r10
    136e:	fb 1c       	adc	r15, r11
    1370:	0c 1d       	adc	r16, r12
    1372:	1d 1d       	adc	r17, r13
    1374:	e4 82       	std	Z+4, r14	; 0x04
    1376:	f5 82       	std	Z+5, r15	; 0x05
    1378:	06 83       	std	Z+6, r16	; 0x06
    137a:	17 83       	std	Z+7, r17	; 0x07
    137c:	83 e0       	ldi	r24, 0x03	; 3
    137e:	80 83       	st	Z, r24
    1380:	24 81       	ldd	r18, Z+4	; 0x04
    1382:	35 81       	ldd	r19, Z+5	; 0x05
    1384:	46 81       	ldd	r20, Z+6	; 0x06
    1386:	57 81       	ldd	r21, Z+7	; 0x07
    1388:	57 ff       	sbrs	r21, 7
    138a:	1a c0       	rjmp	.+52     	; 0x13c0 <_fpadd_parts+0x286>
    138c:	c9 01       	movw	r24, r18
    138e:	aa 27       	eor	r26, r26
    1390:	97 fd       	sbrc	r25, 7
    1392:	a0 95       	com	r26
    1394:	ba 2f       	mov	r27, r26
    1396:	81 70       	andi	r24, 0x01	; 1
    1398:	90 70       	andi	r25, 0x00	; 0
    139a:	a0 70       	andi	r26, 0x00	; 0
    139c:	b0 70       	andi	r27, 0x00	; 0
    139e:	56 95       	lsr	r21
    13a0:	47 95       	ror	r20
    13a2:	37 95       	ror	r19
    13a4:	27 95       	ror	r18
    13a6:	82 2b       	or	r24, r18
    13a8:	93 2b       	or	r25, r19
    13aa:	a4 2b       	or	r26, r20
    13ac:	b5 2b       	or	r27, r21
    13ae:	84 83       	std	Z+4, r24	; 0x04
    13b0:	95 83       	std	Z+5, r25	; 0x05
    13b2:	a6 83       	std	Z+6, r26	; 0x06
    13b4:	b7 83       	std	Z+7, r27	; 0x07
    13b6:	82 81       	ldd	r24, Z+2	; 0x02
    13b8:	93 81       	ldd	r25, Z+3	; 0x03
    13ba:	01 96       	adiw	r24, 0x01	; 1
    13bc:	93 83       	std	Z+3, r25	; 0x03
    13be:	82 83       	std	Z+2, r24	; 0x02
    13c0:	df 01       	movw	r26, r30
    13c2:	01 c0       	rjmp	.+2      	; 0x13c6 <_fpadd_parts+0x28c>
    13c4:	d2 01       	movw	r26, r4
    13c6:	cd 01       	movw	r24, r26
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	e2 e1       	ldi	r30, 0x12	; 18
    13ce:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__epilogue_restores__>

000013d2 <__subsf3>:
    13d2:	a0 e2       	ldi	r26, 0x20	; 32
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ef ee       	ldi	r30, 0xEF	; 239
    13d8:	f9 e0       	ldi	r31, 0x09	; 9
    13da:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__prologue_saves__+0x18>
    13de:	69 83       	std	Y+1, r22	; 0x01
    13e0:	7a 83       	std	Y+2, r23	; 0x02
    13e2:	8b 83       	std	Y+3, r24	; 0x03
    13e4:	9c 83       	std	Y+4, r25	; 0x04
    13e6:	2d 83       	std	Y+5, r18	; 0x05
    13e8:	3e 83       	std	Y+6, r19	; 0x06
    13ea:	4f 83       	std	Y+7, r20	; 0x07
    13ec:	58 87       	std	Y+8, r21	; 0x08
    13ee:	e9 e0       	ldi	r30, 0x09	; 9
    13f0:	ee 2e       	mov	r14, r30
    13f2:	f1 2c       	mov	r15, r1
    13f4:	ec 0e       	add	r14, r28
    13f6:	fd 1e       	adc	r15, r29
    13f8:	ce 01       	movw	r24, r28
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	b7 01       	movw	r22, r14
    13fe:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__unpack_f>
    1402:	8e 01       	movw	r16, r28
    1404:	0f 5e       	subi	r16, 0xEF	; 239
    1406:	1f 4f       	sbci	r17, 0xFF	; 255
    1408:	ce 01       	movw	r24, r28
    140a:	05 96       	adiw	r24, 0x05	; 5
    140c:	b8 01       	movw	r22, r16
    140e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__unpack_f>
    1412:	8a 89       	ldd	r24, Y+18	; 0x12
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	89 27       	eor	r24, r25
    1418:	8a 8b       	std	Y+18, r24	; 0x12
    141a:	c7 01       	movw	r24, r14
    141c:	b8 01       	movw	r22, r16
    141e:	ae 01       	movw	r20, r28
    1420:	47 5e       	subi	r20, 0xE7	; 231
    1422:	5f 4f       	sbci	r21, 0xFF	; 255
    1424:	0e 94 9d 08 	call	0x113a	; 0x113a <_fpadd_parts>
    1428:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__pack_f>
    142c:	a0 96       	adiw	r28, 0x20	; 32
    142e:	e6 e0       	ldi	r30, 0x06	; 6
    1430:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__epilogue_restores__+0x18>

00001434 <__addsf3>:
    1434:	a0 e2       	ldi	r26, 0x20	; 32
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e0 e2       	ldi	r30, 0x20	; 32
    143a:	fa e0       	ldi	r31, 0x0A	; 10
    143c:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__prologue_saves__+0x18>
    1440:	69 83       	std	Y+1, r22	; 0x01
    1442:	7a 83       	std	Y+2, r23	; 0x02
    1444:	8b 83       	std	Y+3, r24	; 0x03
    1446:	9c 83       	std	Y+4, r25	; 0x04
    1448:	2d 83       	std	Y+5, r18	; 0x05
    144a:	3e 83       	std	Y+6, r19	; 0x06
    144c:	4f 83       	std	Y+7, r20	; 0x07
    144e:	58 87       	std	Y+8, r21	; 0x08
    1450:	f9 e0       	ldi	r31, 0x09	; 9
    1452:	ef 2e       	mov	r14, r31
    1454:	f1 2c       	mov	r15, r1
    1456:	ec 0e       	add	r14, r28
    1458:	fd 1e       	adc	r15, r29
    145a:	ce 01       	movw	r24, r28
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	b7 01       	movw	r22, r14
    1460:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__unpack_f>
    1464:	8e 01       	movw	r16, r28
    1466:	0f 5e       	subi	r16, 0xEF	; 239
    1468:	1f 4f       	sbci	r17, 0xFF	; 255
    146a:	ce 01       	movw	r24, r28
    146c:	05 96       	adiw	r24, 0x05	; 5
    146e:	b8 01       	movw	r22, r16
    1470:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__unpack_f>
    1474:	c7 01       	movw	r24, r14
    1476:	b8 01       	movw	r22, r16
    1478:	ae 01       	movw	r20, r28
    147a:	47 5e       	subi	r20, 0xE7	; 231
    147c:	5f 4f       	sbci	r21, 0xFF	; 255
    147e:	0e 94 9d 08 	call	0x113a	; 0x113a <_fpadd_parts>
    1482:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__pack_f>
    1486:	a0 96       	adiw	r28, 0x20	; 32
    1488:	e6 e0       	ldi	r30, 0x06	; 6
    148a:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__epilogue_restores__+0x18>

0000148e <__mulsf3>:
    148e:	a0 e2       	ldi	r26, 0x20	; 32
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	ed e4       	ldi	r30, 0x4D	; 77
    1494:	fa e0       	ldi	r31, 0x0A	; 10
    1496:	0c 94 35 19 	jmp	0x326a	; 0x326a <__prologue_saves__>
    149a:	69 83       	std	Y+1, r22	; 0x01
    149c:	7a 83       	std	Y+2, r23	; 0x02
    149e:	8b 83       	std	Y+3, r24	; 0x03
    14a0:	9c 83       	std	Y+4, r25	; 0x04
    14a2:	2d 83       	std	Y+5, r18	; 0x05
    14a4:	3e 83       	std	Y+6, r19	; 0x06
    14a6:	4f 83       	std	Y+7, r20	; 0x07
    14a8:	58 87       	std	Y+8, r21	; 0x08
    14aa:	ce 01       	movw	r24, r28
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	be 01       	movw	r22, r28
    14b0:	67 5f       	subi	r22, 0xF7	; 247
    14b2:	7f 4f       	sbci	r23, 0xFF	; 255
    14b4:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__unpack_f>
    14b8:	ce 01       	movw	r24, r28
    14ba:	05 96       	adiw	r24, 0x05	; 5
    14bc:	be 01       	movw	r22, r28
    14be:	6f 5e       	subi	r22, 0xEF	; 239
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__unpack_f>
    14c6:	99 85       	ldd	r25, Y+9	; 0x09
    14c8:	92 30       	cpi	r25, 0x02	; 2
    14ca:	88 f0       	brcs	.+34     	; 0x14ee <__mulsf3+0x60>
    14cc:	89 89       	ldd	r24, Y+17	; 0x11
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	c8 f0       	brcs	.+50     	; 0x1504 <__mulsf3+0x76>
    14d2:	94 30       	cpi	r25, 0x04	; 4
    14d4:	19 f4       	brne	.+6      	; 0x14dc <__mulsf3+0x4e>
    14d6:	82 30       	cpi	r24, 0x02	; 2
    14d8:	51 f4       	brne	.+20     	; 0x14ee <__mulsf3+0x60>
    14da:	04 c0       	rjmp	.+8      	; 0x14e4 <__mulsf3+0x56>
    14dc:	84 30       	cpi	r24, 0x04	; 4
    14de:	29 f4       	brne	.+10     	; 0x14ea <__mulsf3+0x5c>
    14e0:	92 30       	cpi	r25, 0x02	; 2
    14e2:	81 f4       	brne	.+32     	; 0x1504 <__mulsf3+0x76>
    14e4:	80 e6       	ldi	r24, 0x60	; 96
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	c6 c0       	rjmp	.+396    	; 0x1676 <__mulsf3+0x1e8>
    14ea:	92 30       	cpi	r25, 0x02	; 2
    14ec:	49 f4       	brne	.+18     	; 0x1500 <__mulsf3+0x72>
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f2:	8a 89       	ldd	r24, Y+18	; 0x12
    14f4:	98 13       	cpse	r25, r24
    14f6:	21 e0       	ldi	r18, 0x01	; 1
    14f8:	2a 87       	std	Y+10, r18	; 0x0a
    14fa:	ce 01       	movw	r24, r28
    14fc:	09 96       	adiw	r24, 0x09	; 9
    14fe:	bb c0       	rjmp	.+374    	; 0x1676 <__mulsf3+0x1e8>
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	49 f4       	brne	.+18     	; 0x1516 <__mulsf3+0x88>
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	9a 85       	ldd	r25, Y+10	; 0x0a
    1508:	8a 89       	ldd	r24, Y+18	; 0x12
    150a:	98 13       	cpse	r25, r24
    150c:	21 e0       	ldi	r18, 0x01	; 1
    150e:	2a 8b       	std	Y+18, r18	; 0x12
    1510:	ce 01       	movw	r24, r28
    1512:	41 96       	adiw	r24, 0x11	; 17
    1514:	b0 c0       	rjmp	.+352    	; 0x1676 <__mulsf3+0x1e8>
    1516:	2d 84       	ldd	r2, Y+13	; 0x0d
    1518:	3e 84       	ldd	r3, Y+14	; 0x0e
    151a:	4f 84       	ldd	r4, Y+15	; 0x0f
    151c:	58 88       	ldd	r5, Y+16	; 0x10
    151e:	6d 88       	ldd	r6, Y+21	; 0x15
    1520:	7e 88       	ldd	r7, Y+22	; 0x16
    1522:	8f 88       	ldd	r8, Y+23	; 0x17
    1524:	98 8c       	ldd	r9, Y+24	; 0x18
    1526:	ee 24       	eor	r14, r14
    1528:	ff 24       	eor	r15, r15
    152a:	87 01       	movw	r16, r14
    152c:	aa 24       	eor	r10, r10
    152e:	bb 24       	eor	r11, r11
    1530:	65 01       	movw	r12, r10
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	e0 e0       	ldi	r30, 0x00	; 0
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	c1 01       	movw	r24, r2
    1540:	81 70       	andi	r24, 0x01	; 1
    1542:	90 70       	andi	r25, 0x00	; 0
    1544:	89 2b       	or	r24, r25
    1546:	e9 f0       	breq	.+58     	; 0x1582 <__mulsf3+0xf4>
    1548:	e6 0c       	add	r14, r6
    154a:	f7 1c       	adc	r15, r7
    154c:	08 1d       	adc	r16, r8
    154e:	19 1d       	adc	r17, r9
    1550:	9a 01       	movw	r18, r20
    1552:	ab 01       	movw	r20, r22
    1554:	2a 0d       	add	r18, r10
    1556:	3b 1d       	adc	r19, r11
    1558:	4c 1d       	adc	r20, r12
    155a:	5d 1d       	adc	r21, r13
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	a0 e0       	ldi	r26, 0x00	; 0
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e6 14       	cp	r14, r6
    1566:	f7 04       	cpc	r15, r7
    1568:	08 05       	cpc	r16, r8
    156a:	19 05       	cpc	r17, r9
    156c:	20 f4       	brcc	.+8      	; 0x1576 <__mulsf3+0xe8>
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a0 e0       	ldi	r26, 0x00	; 0
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	ba 01       	movw	r22, r20
    1578:	a9 01       	movw	r20, r18
    157a:	48 0f       	add	r20, r24
    157c:	59 1f       	adc	r21, r25
    157e:	6a 1f       	adc	r22, r26
    1580:	7b 1f       	adc	r23, r27
    1582:	aa 0c       	add	r10, r10
    1584:	bb 1c       	adc	r11, r11
    1586:	cc 1c       	adc	r12, r12
    1588:	dd 1c       	adc	r13, r13
    158a:	97 fe       	sbrs	r9, 7
    158c:	08 c0       	rjmp	.+16     	; 0x159e <__mulsf3+0x110>
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a0 e0       	ldi	r26, 0x00	; 0
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	a8 2a       	or	r10, r24
    1598:	b9 2a       	or	r11, r25
    159a:	ca 2a       	or	r12, r26
    159c:	db 2a       	or	r13, r27
    159e:	31 96       	adiw	r30, 0x01	; 1
    15a0:	e0 32       	cpi	r30, 0x20	; 32
    15a2:	f1 05       	cpc	r31, r1
    15a4:	49 f0       	breq	.+18     	; 0x15b8 <__mulsf3+0x12a>
    15a6:	66 0c       	add	r6, r6
    15a8:	77 1c       	adc	r7, r7
    15aa:	88 1c       	adc	r8, r8
    15ac:	99 1c       	adc	r9, r9
    15ae:	56 94       	lsr	r5
    15b0:	47 94       	ror	r4
    15b2:	37 94       	ror	r3
    15b4:	27 94       	ror	r2
    15b6:	c3 cf       	rjmp	.-122    	; 0x153e <__mulsf3+0xb0>
    15b8:	fa 85       	ldd	r31, Y+10	; 0x0a
    15ba:	ea 89       	ldd	r30, Y+18	; 0x12
    15bc:	2b 89       	ldd	r18, Y+19	; 0x13
    15be:	3c 89       	ldd	r19, Y+20	; 0x14
    15c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    15c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    15c4:	28 0f       	add	r18, r24
    15c6:	39 1f       	adc	r19, r25
    15c8:	2e 5f       	subi	r18, 0xFE	; 254
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	17 c0       	rjmp	.+46     	; 0x15fc <__mulsf3+0x16e>
    15ce:	ca 01       	movw	r24, r20
    15d0:	81 70       	andi	r24, 0x01	; 1
    15d2:	90 70       	andi	r25, 0x00	; 0
    15d4:	89 2b       	or	r24, r25
    15d6:	61 f0       	breq	.+24     	; 0x15f0 <__mulsf3+0x162>
    15d8:	16 95       	lsr	r17
    15da:	07 95       	ror	r16
    15dc:	f7 94       	ror	r15
    15de:	e7 94       	ror	r14
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a0 e0       	ldi	r26, 0x00	; 0
    15e6:	b0 e8       	ldi	r27, 0x80	; 128
    15e8:	e8 2a       	or	r14, r24
    15ea:	f9 2a       	or	r15, r25
    15ec:	0a 2b       	or	r16, r26
    15ee:	1b 2b       	or	r17, r27
    15f0:	76 95       	lsr	r23
    15f2:	67 95       	ror	r22
    15f4:	57 95       	ror	r21
    15f6:	47 95       	ror	r20
    15f8:	2f 5f       	subi	r18, 0xFF	; 255
    15fa:	3f 4f       	sbci	r19, 0xFF	; 255
    15fc:	77 fd       	sbrc	r23, 7
    15fe:	e7 cf       	rjmp	.-50     	; 0x15ce <__mulsf3+0x140>
    1600:	0c c0       	rjmp	.+24     	; 0x161a <__mulsf3+0x18c>
    1602:	44 0f       	add	r20, r20
    1604:	55 1f       	adc	r21, r21
    1606:	66 1f       	adc	r22, r22
    1608:	77 1f       	adc	r23, r23
    160a:	17 fd       	sbrc	r17, 7
    160c:	41 60       	ori	r20, 0x01	; 1
    160e:	ee 0c       	add	r14, r14
    1610:	ff 1c       	adc	r15, r15
    1612:	00 1f       	adc	r16, r16
    1614:	11 1f       	adc	r17, r17
    1616:	21 50       	subi	r18, 0x01	; 1
    1618:	30 40       	sbci	r19, 0x00	; 0
    161a:	40 30       	cpi	r20, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	59 07       	cpc	r21, r25
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	69 07       	cpc	r22, r25
    1624:	90 e4       	ldi	r25, 0x40	; 64
    1626:	79 07       	cpc	r23, r25
    1628:	60 f3       	brcs	.-40     	; 0x1602 <__mulsf3+0x174>
    162a:	2b 8f       	std	Y+27, r18	; 0x1b
    162c:	3c 8f       	std	Y+28, r19	; 0x1c
    162e:	db 01       	movw	r26, r22
    1630:	ca 01       	movw	r24, r20
    1632:	8f 77       	andi	r24, 0x7F	; 127
    1634:	90 70       	andi	r25, 0x00	; 0
    1636:	a0 70       	andi	r26, 0x00	; 0
    1638:	b0 70       	andi	r27, 0x00	; 0
    163a:	80 34       	cpi	r24, 0x40	; 64
    163c:	91 05       	cpc	r25, r1
    163e:	a1 05       	cpc	r26, r1
    1640:	b1 05       	cpc	r27, r1
    1642:	61 f4       	brne	.+24     	; 0x165c <__mulsf3+0x1ce>
    1644:	47 fd       	sbrc	r20, 7
    1646:	0a c0       	rjmp	.+20     	; 0x165c <__mulsf3+0x1ce>
    1648:	e1 14       	cp	r14, r1
    164a:	f1 04       	cpc	r15, r1
    164c:	01 05       	cpc	r16, r1
    164e:	11 05       	cpc	r17, r1
    1650:	29 f0       	breq	.+10     	; 0x165c <__mulsf3+0x1ce>
    1652:	40 5c       	subi	r20, 0xC0	; 192
    1654:	5f 4f       	sbci	r21, 0xFF	; 255
    1656:	6f 4f       	sbci	r22, 0xFF	; 255
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	40 78       	andi	r20, 0x80	; 128
    165c:	1a 8e       	std	Y+26, r1	; 0x1a
    165e:	fe 17       	cp	r31, r30
    1660:	11 f0       	breq	.+4      	; 0x1666 <__mulsf3+0x1d8>
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	8a 8f       	std	Y+26, r24	; 0x1a
    1666:	4d 8f       	std	Y+29, r20	; 0x1d
    1668:	5e 8f       	std	Y+30, r21	; 0x1e
    166a:	6f 8f       	std	Y+31, r22	; 0x1f
    166c:	78 a3       	std	Y+32, r23	; 0x20
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	89 8f       	std	Y+25, r24	; 0x19
    1672:	ce 01       	movw	r24, r28
    1674:	49 96       	adiw	r24, 0x19	; 25
    1676:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__pack_f>
    167a:	a0 96       	adiw	r28, 0x20	; 32
    167c:	e2 e1       	ldi	r30, 0x12	; 18
    167e:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__epilogue_restores__>

00001682 <__gtsf2>:
    1682:	a8 e1       	ldi	r26, 0x18	; 24
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e7 e4       	ldi	r30, 0x47	; 71
    1688:	fb e0       	ldi	r31, 0x0B	; 11
    168a:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__prologue_saves__+0x18>
    168e:	69 83       	std	Y+1, r22	; 0x01
    1690:	7a 83       	std	Y+2, r23	; 0x02
    1692:	8b 83       	std	Y+3, r24	; 0x03
    1694:	9c 83       	std	Y+4, r25	; 0x04
    1696:	2d 83       	std	Y+5, r18	; 0x05
    1698:	3e 83       	std	Y+6, r19	; 0x06
    169a:	4f 83       	std	Y+7, r20	; 0x07
    169c:	58 87       	std	Y+8, r21	; 0x08
    169e:	89 e0       	ldi	r24, 0x09	; 9
    16a0:	e8 2e       	mov	r14, r24
    16a2:	f1 2c       	mov	r15, r1
    16a4:	ec 0e       	add	r14, r28
    16a6:	fd 1e       	adc	r15, r29
    16a8:	ce 01       	movw	r24, r28
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	b7 01       	movw	r22, r14
    16ae:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__unpack_f>
    16b2:	8e 01       	movw	r16, r28
    16b4:	0f 5e       	subi	r16, 0xEF	; 239
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
    16b8:	ce 01       	movw	r24, r28
    16ba:	05 96       	adiw	r24, 0x05	; 5
    16bc:	b8 01       	movw	r22, r16
    16be:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__unpack_f>
    16c2:	89 85       	ldd	r24, Y+9	; 0x09
    16c4:	82 30       	cpi	r24, 0x02	; 2
    16c6:	40 f0       	brcs	.+16     	; 0x16d8 <__gtsf2+0x56>
    16c8:	89 89       	ldd	r24, Y+17	; 0x11
    16ca:	82 30       	cpi	r24, 0x02	; 2
    16cc:	28 f0       	brcs	.+10     	; 0x16d8 <__gtsf2+0x56>
    16ce:	c7 01       	movw	r24, r14
    16d0:	b8 01       	movw	r22, r16
    16d2:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fpcmp_parts_f>
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <__gtsf2+0x58>
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	68 96       	adiw	r28, 0x18	; 24
    16dc:	e6 e0       	ldi	r30, 0x06	; 6
    16de:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__epilogue_restores__+0x18>

000016e2 <__gesf2>:
    16e2:	a8 e1       	ldi	r26, 0x18	; 24
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e7 e7       	ldi	r30, 0x77	; 119
    16e8:	fb e0       	ldi	r31, 0x0B	; 11
    16ea:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__prologue_saves__+0x18>
    16ee:	69 83       	std	Y+1, r22	; 0x01
    16f0:	7a 83       	std	Y+2, r23	; 0x02
    16f2:	8b 83       	std	Y+3, r24	; 0x03
    16f4:	9c 83       	std	Y+4, r25	; 0x04
    16f6:	2d 83       	std	Y+5, r18	; 0x05
    16f8:	3e 83       	std	Y+6, r19	; 0x06
    16fa:	4f 83       	std	Y+7, r20	; 0x07
    16fc:	58 87       	std	Y+8, r21	; 0x08
    16fe:	89 e0       	ldi	r24, 0x09	; 9
    1700:	e8 2e       	mov	r14, r24
    1702:	f1 2c       	mov	r15, r1
    1704:	ec 0e       	add	r14, r28
    1706:	fd 1e       	adc	r15, r29
    1708:	ce 01       	movw	r24, r28
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	b7 01       	movw	r22, r14
    170e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__unpack_f>
    1712:	8e 01       	movw	r16, r28
    1714:	0f 5e       	subi	r16, 0xEF	; 239
    1716:	1f 4f       	sbci	r17, 0xFF	; 255
    1718:	ce 01       	movw	r24, r28
    171a:	05 96       	adiw	r24, 0x05	; 5
    171c:	b8 01       	movw	r22, r16
    171e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__unpack_f>
    1722:	89 85       	ldd	r24, Y+9	; 0x09
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	40 f0       	brcs	.+16     	; 0x1738 <__gesf2+0x56>
    1728:	89 89       	ldd	r24, Y+17	; 0x11
    172a:	82 30       	cpi	r24, 0x02	; 2
    172c:	28 f0       	brcs	.+10     	; 0x1738 <__gesf2+0x56>
    172e:	c7 01       	movw	r24, r14
    1730:	b8 01       	movw	r22, r16
    1732:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fpcmp_parts_f>
    1736:	01 c0       	rjmp	.+2      	; 0x173a <__gesf2+0x58>
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	68 96       	adiw	r28, 0x18	; 24
    173c:	e6 e0       	ldi	r30, 0x06	; 6
    173e:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__epilogue_restores__+0x18>

00001742 <__ltsf2>:
    1742:	a8 e1       	ldi	r26, 0x18	; 24
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e7 ea       	ldi	r30, 0xA7	; 167
    1748:	fb e0       	ldi	r31, 0x0B	; 11
    174a:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__prologue_saves__+0x18>
    174e:	69 83       	std	Y+1, r22	; 0x01
    1750:	7a 83       	std	Y+2, r23	; 0x02
    1752:	8b 83       	std	Y+3, r24	; 0x03
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	2d 83       	std	Y+5, r18	; 0x05
    1758:	3e 83       	std	Y+6, r19	; 0x06
    175a:	4f 83       	std	Y+7, r20	; 0x07
    175c:	58 87       	std	Y+8, r21	; 0x08
    175e:	89 e0       	ldi	r24, 0x09	; 9
    1760:	e8 2e       	mov	r14, r24
    1762:	f1 2c       	mov	r15, r1
    1764:	ec 0e       	add	r14, r28
    1766:	fd 1e       	adc	r15, r29
    1768:	ce 01       	movw	r24, r28
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	b7 01       	movw	r22, r14
    176e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__unpack_f>
    1772:	8e 01       	movw	r16, r28
    1774:	0f 5e       	subi	r16, 0xEF	; 239
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	ce 01       	movw	r24, r28
    177a:	05 96       	adiw	r24, 0x05	; 5
    177c:	b8 01       	movw	r22, r16
    177e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__unpack_f>
    1782:	89 85       	ldd	r24, Y+9	; 0x09
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	40 f0       	brcs	.+16     	; 0x1798 <__ltsf2+0x56>
    1788:	89 89       	ldd	r24, Y+17	; 0x11
    178a:	82 30       	cpi	r24, 0x02	; 2
    178c:	28 f0       	brcs	.+10     	; 0x1798 <__ltsf2+0x56>
    178e:	c7 01       	movw	r24, r14
    1790:	b8 01       	movw	r22, r16
    1792:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fpcmp_parts_f>
    1796:	01 c0       	rjmp	.+2      	; 0x179a <__ltsf2+0x58>
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	68 96       	adiw	r28, 0x18	; 24
    179c:	e6 e0       	ldi	r30, 0x06	; 6
    179e:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__epilogue_restores__+0x18>

000017a2 <__floatsisf>:
    17a2:	a8 e0       	ldi	r26, 0x08	; 8
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e7 ed       	ldi	r30, 0xD7	; 215
    17a8:	fb e0       	ldi	r31, 0x0B	; 11
    17aa:	0c 94 3e 19 	jmp	0x327c	; 0x327c <__prologue_saves__+0x12>
    17ae:	9b 01       	movw	r18, r22
    17b0:	ac 01       	movw	r20, r24
    17b2:	83 e0       	ldi	r24, 0x03	; 3
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	da 01       	movw	r26, r20
    17b8:	c9 01       	movw	r24, r18
    17ba:	88 27       	eor	r24, r24
    17bc:	b7 fd       	sbrc	r27, 7
    17be:	83 95       	inc	r24
    17c0:	99 27       	eor	r25, r25
    17c2:	aa 27       	eor	r26, r26
    17c4:	bb 27       	eor	r27, r27
    17c6:	b8 2e       	mov	r11, r24
    17c8:	21 15       	cp	r18, r1
    17ca:	31 05       	cpc	r19, r1
    17cc:	41 05       	cpc	r20, r1
    17ce:	51 05       	cpc	r21, r1
    17d0:	19 f4       	brne	.+6      	; 0x17d8 <__floatsisf+0x36>
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	3a c0       	rjmp	.+116    	; 0x184c <__floatsisf+0xaa>
    17d8:	88 23       	and	r24, r24
    17da:	a9 f0       	breq	.+42     	; 0x1806 <__floatsisf+0x64>
    17dc:	20 30       	cpi	r18, 0x00	; 0
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	38 07       	cpc	r19, r24
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	48 07       	cpc	r20, r24
    17e6:	80 e8       	ldi	r24, 0x80	; 128
    17e8:	58 07       	cpc	r21, r24
    17ea:	29 f4       	brne	.+10     	; 0x17f6 <__floatsisf+0x54>
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	9f ec       	ldi	r25, 0xCF	; 207
    17f4:	30 c0       	rjmp	.+96     	; 0x1856 <__floatsisf+0xb4>
    17f6:	ee 24       	eor	r14, r14
    17f8:	ff 24       	eor	r15, r15
    17fa:	87 01       	movw	r16, r14
    17fc:	e2 1a       	sub	r14, r18
    17fe:	f3 0a       	sbc	r15, r19
    1800:	04 0b       	sbc	r16, r20
    1802:	15 0b       	sbc	r17, r21
    1804:	02 c0       	rjmp	.+4      	; 0x180a <__floatsisf+0x68>
    1806:	79 01       	movw	r14, r18
    1808:	8a 01       	movw	r16, r20
    180a:	8e e1       	ldi	r24, 0x1E	; 30
    180c:	c8 2e       	mov	r12, r24
    180e:	d1 2c       	mov	r13, r1
    1810:	dc 82       	std	Y+4, r13	; 0x04
    1812:	cb 82       	std	Y+3, r12	; 0x03
    1814:	ed 82       	std	Y+5, r14	; 0x05
    1816:	fe 82       	std	Y+6, r15	; 0x06
    1818:	0f 83       	std	Y+7, r16	; 0x07
    181a:	18 87       	std	Y+8, r17	; 0x08
    181c:	c8 01       	movw	r24, r16
    181e:	b7 01       	movw	r22, r14
    1820:	0e 94 83 0c 	call	0x1906	; 0x1906 <__clzsi2>
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	18 16       	cp	r1, r24
    1828:	19 06       	cpc	r1, r25
    182a:	84 f4       	brge	.+32     	; 0x184c <__floatsisf+0xaa>
    182c:	08 2e       	mov	r0, r24
    182e:	04 c0       	rjmp	.+8      	; 0x1838 <__floatsisf+0x96>
    1830:	ee 0c       	add	r14, r14
    1832:	ff 1c       	adc	r15, r15
    1834:	00 1f       	adc	r16, r16
    1836:	11 1f       	adc	r17, r17
    1838:	0a 94       	dec	r0
    183a:	d2 f7       	brpl	.-12     	; 0x1830 <__floatsisf+0x8e>
    183c:	ed 82       	std	Y+5, r14	; 0x05
    183e:	fe 82       	std	Y+6, r15	; 0x06
    1840:	0f 83       	std	Y+7, r16	; 0x07
    1842:	18 87       	std	Y+8, r17	; 0x08
    1844:	c8 1a       	sub	r12, r24
    1846:	d9 0a       	sbc	r13, r25
    1848:	dc 82       	std	Y+4, r13	; 0x04
    184a:	cb 82       	std	Y+3, r12	; 0x03
    184c:	ba 82       	std	Y+2, r11	; 0x02
    184e:	ce 01       	movw	r24, r28
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__pack_f>
    1856:	28 96       	adiw	r28, 0x08	; 8
    1858:	e9 e0       	ldi	r30, 0x09	; 9
    185a:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <__epilogue_restores__+0x12>

0000185e <__fixsfsi>:
    185e:	ac e0       	ldi	r26, 0x0C	; 12
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e5 e3       	ldi	r30, 0x35	; 53
    1864:	fc e0       	ldi	r31, 0x0C	; 12
    1866:	0c 94 45 19 	jmp	0x328a	; 0x328a <__prologue_saves__+0x20>
    186a:	69 83       	std	Y+1, r22	; 0x01
    186c:	7a 83       	std	Y+2, r23	; 0x02
    186e:	8b 83       	std	Y+3, r24	; 0x03
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	ce 01       	movw	r24, r28
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	be 01       	movw	r22, r28
    1878:	6b 5f       	subi	r22, 0xFB	; 251
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__unpack_f>
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	82 30       	cpi	r24, 0x02	; 2
    1884:	61 f1       	breq	.+88     	; 0x18de <__fixsfsi+0x80>
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	50 f1       	brcs	.+84     	; 0x18de <__fixsfsi+0x80>
    188a:	84 30       	cpi	r24, 0x04	; 4
    188c:	21 f4       	brne	.+8      	; 0x1896 <__fixsfsi+0x38>
    188e:	8e 81       	ldd	r24, Y+6	; 0x06
    1890:	88 23       	and	r24, r24
    1892:	51 f1       	breq	.+84     	; 0x18e8 <__fixsfsi+0x8a>
    1894:	2e c0       	rjmp	.+92     	; 0x18f2 <__fixsfsi+0x94>
    1896:	2f 81       	ldd	r18, Y+7	; 0x07
    1898:	38 85       	ldd	r19, Y+8	; 0x08
    189a:	37 fd       	sbrc	r19, 7
    189c:	20 c0       	rjmp	.+64     	; 0x18de <__fixsfsi+0x80>
    189e:	6e 81       	ldd	r22, Y+6	; 0x06
    18a0:	2f 31       	cpi	r18, 0x1F	; 31
    18a2:	31 05       	cpc	r19, r1
    18a4:	1c f0       	brlt	.+6      	; 0x18ac <__fixsfsi+0x4e>
    18a6:	66 23       	and	r22, r22
    18a8:	f9 f0       	breq	.+62     	; 0x18e8 <__fixsfsi+0x8a>
    18aa:	23 c0       	rjmp	.+70     	; 0x18f2 <__fixsfsi+0x94>
    18ac:	8e e1       	ldi	r24, 0x1E	; 30
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	82 1b       	sub	r24, r18
    18b2:	93 0b       	sbc	r25, r19
    18b4:	29 85       	ldd	r18, Y+9	; 0x09
    18b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    18b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    18ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <__fixsfsi+0x68>
    18be:	56 95       	lsr	r21
    18c0:	47 95       	ror	r20
    18c2:	37 95       	ror	r19
    18c4:	27 95       	ror	r18
    18c6:	8a 95       	dec	r24
    18c8:	d2 f7       	brpl	.-12     	; 0x18be <__fixsfsi+0x60>
    18ca:	66 23       	and	r22, r22
    18cc:	b1 f0       	breq	.+44     	; 0x18fa <__fixsfsi+0x9c>
    18ce:	50 95       	com	r21
    18d0:	40 95       	com	r20
    18d2:	30 95       	com	r19
    18d4:	21 95       	neg	r18
    18d6:	3f 4f       	sbci	r19, 0xFF	; 255
    18d8:	4f 4f       	sbci	r20, 0xFF	; 255
    18da:	5f 4f       	sbci	r21, 0xFF	; 255
    18dc:	0e c0       	rjmp	.+28     	; 0x18fa <__fixsfsi+0x9c>
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	50 e0       	ldi	r21, 0x00	; 0
    18e6:	09 c0       	rjmp	.+18     	; 0x18fa <__fixsfsi+0x9c>
    18e8:	2f ef       	ldi	r18, 0xFF	; 255
    18ea:	3f ef       	ldi	r19, 0xFF	; 255
    18ec:	4f ef       	ldi	r20, 0xFF	; 255
    18ee:	5f e7       	ldi	r21, 0x7F	; 127
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <__fixsfsi+0x9c>
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	50 e8       	ldi	r21, 0x80	; 128
    18fa:	b9 01       	movw	r22, r18
    18fc:	ca 01       	movw	r24, r20
    18fe:	2c 96       	adiw	r28, 0x0c	; 12
    1900:	e2 e0       	ldi	r30, 0x02	; 2
    1902:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__epilogue_restores__+0x20>

00001906 <__clzsi2>:
    1906:	ef 92       	push	r14
    1908:	ff 92       	push	r15
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	7b 01       	movw	r14, r22
    1910:	8c 01       	movw	r16, r24
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	e8 16       	cp	r14, r24
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	f8 06       	cpc	r15, r24
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	08 07       	cpc	r16, r24
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	18 07       	cpc	r17, r24
    1922:	88 f4       	brcc	.+34     	; 0x1946 <__clzsi2+0x40>
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	e8 16       	cp	r14, r24
    1928:	f1 04       	cpc	r15, r1
    192a:	01 05       	cpc	r16, r1
    192c:	11 05       	cpc	r17, r1
    192e:	31 f0       	breq	.+12     	; 0x193c <__clzsi2+0x36>
    1930:	28 f0       	brcs	.+10     	; 0x193c <__clzsi2+0x36>
    1932:	88 e0       	ldi	r24, 0x08	; 8
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e0       	ldi	r26, 0x00	; 0
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	17 c0       	rjmp	.+46     	; 0x196a <__clzsi2+0x64>
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a0 e0       	ldi	r26, 0x00	; 0
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	12 c0       	rjmp	.+36     	; 0x196a <__clzsi2+0x64>
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	e8 16       	cp	r14, r24
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	f8 06       	cpc	r15, r24
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	08 07       	cpc	r16, r24
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	18 07       	cpc	r17, r24
    1956:	28 f0       	brcs	.+10     	; 0x1962 <__clzsi2+0x5c>
    1958:	88 e1       	ldi	r24, 0x18	; 24
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a0 e0       	ldi	r26, 0x00	; 0
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	04 c0       	rjmp	.+8      	; 0x196a <__clzsi2+0x64>
    1962:	80 e1       	ldi	r24, 0x10	; 16
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	a0 e0       	ldi	r26, 0x00	; 0
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	20 e2       	ldi	r18, 0x20	; 32
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	28 1b       	sub	r18, r24
    1974:	39 0b       	sbc	r19, r25
    1976:	4a 0b       	sbc	r20, r26
    1978:	5b 0b       	sbc	r21, r27
    197a:	04 c0       	rjmp	.+8      	; 0x1984 <__clzsi2+0x7e>
    197c:	16 95       	lsr	r17
    197e:	07 95       	ror	r16
    1980:	f7 94       	ror	r15
    1982:	e7 94       	ror	r14
    1984:	8a 95       	dec	r24
    1986:	d2 f7       	brpl	.-12     	; 0x197c <__clzsi2+0x76>
    1988:	f7 01       	movw	r30, r14
    198a:	e8 59       	subi	r30, 0x98	; 152
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	80 81       	ld	r24, Z
    1990:	28 1b       	sub	r18, r24
    1992:	31 09       	sbc	r19, r1
    1994:	41 09       	sbc	r20, r1
    1996:	51 09       	sbc	r21, r1
    1998:	c9 01       	movw	r24, r18
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	ff 90       	pop	r15
    19a0:	ef 90       	pop	r14
    19a2:	08 95       	ret

000019a4 <__pack_f>:
    19a4:	df 92       	push	r13
    19a6:	ef 92       	push	r14
    19a8:	ff 92       	push	r15
    19aa:	0f 93       	push	r16
    19ac:	1f 93       	push	r17
    19ae:	fc 01       	movw	r30, r24
    19b0:	e4 80       	ldd	r14, Z+4	; 0x04
    19b2:	f5 80       	ldd	r15, Z+5	; 0x05
    19b4:	06 81       	ldd	r16, Z+6	; 0x06
    19b6:	17 81       	ldd	r17, Z+7	; 0x07
    19b8:	d1 80       	ldd	r13, Z+1	; 0x01
    19ba:	80 81       	ld	r24, Z
    19bc:	82 30       	cpi	r24, 0x02	; 2
    19be:	48 f4       	brcc	.+18     	; 0x19d2 <__pack_f+0x2e>
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	a0 e1       	ldi	r26, 0x10	; 16
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e8 2a       	or	r14, r24
    19ca:	f9 2a       	or	r15, r25
    19cc:	0a 2b       	or	r16, r26
    19ce:	1b 2b       	or	r17, r27
    19d0:	a5 c0       	rjmp	.+330    	; 0x1b1c <__pack_f+0x178>
    19d2:	84 30       	cpi	r24, 0x04	; 4
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <__pack_f+0x34>
    19d6:	9f c0       	rjmp	.+318    	; 0x1b16 <__pack_f+0x172>
    19d8:	82 30       	cpi	r24, 0x02	; 2
    19da:	21 f4       	brne	.+8      	; 0x19e4 <__pack_f+0x40>
    19dc:	ee 24       	eor	r14, r14
    19de:	ff 24       	eor	r15, r15
    19e0:	87 01       	movw	r16, r14
    19e2:	05 c0       	rjmp	.+10     	; 0x19ee <__pack_f+0x4a>
    19e4:	e1 14       	cp	r14, r1
    19e6:	f1 04       	cpc	r15, r1
    19e8:	01 05       	cpc	r16, r1
    19ea:	11 05       	cpc	r17, r1
    19ec:	19 f4       	brne	.+6      	; 0x19f4 <__pack_f+0x50>
    19ee:	e0 e0       	ldi	r30, 0x00	; 0
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	96 c0       	rjmp	.+300    	; 0x1b20 <__pack_f+0x17c>
    19f4:	62 81       	ldd	r22, Z+2	; 0x02
    19f6:	73 81       	ldd	r23, Z+3	; 0x03
    19f8:	9f ef       	ldi	r25, 0xFF	; 255
    19fa:	62 38       	cpi	r22, 0x82	; 130
    19fc:	79 07       	cpc	r23, r25
    19fe:	0c f0       	brlt	.+2      	; 0x1a02 <__pack_f+0x5e>
    1a00:	5b c0       	rjmp	.+182    	; 0x1ab8 <__pack_f+0x114>
    1a02:	22 e8       	ldi	r18, 0x82	; 130
    1a04:	3f ef       	ldi	r19, 0xFF	; 255
    1a06:	26 1b       	sub	r18, r22
    1a08:	37 0b       	sbc	r19, r23
    1a0a:	2a 31       	cpi	r18, 0x1A	; 26
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	2c f0       	brlt	.+10     	; 0x1a1a <__pack_f+0x76>
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	2a c0       	rjmp	.+84     	; 0x1a6e <__pack_f+0xca>
    1a1a:	b8 01       	movw	r22, r16
    1a1c:	a7 01       	movw	r20, r14
    1a1e:	02 2e       	mov	r0, r18
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <__pack_f+0x86>
    1a22:	76 95       	lsr	r23
    1a24:	67 95       	ror	r22
    1a26:	57 95       	ror	r21
    1a28:	47 95       	ror	r20
    1a2a:	0a 94       	dec	r0
    1a2c:	d2 f7       	brpl	.-12     	; 0x1a22 <__pack_f+0x7e>
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a0 e0       	ldi	r26, 0x00	; 0
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	04 c0       	rjmp	.+8      	; 0x1a40 <__pack_f+0x9c>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	aa 1f       	adc	r26, r26
    1a3e:	bb 1f       	adc	r27, r27
    1a40:	2a 95       	dec	r18
    1a42:	d2 f7       	brpl	.-12     	; 0x1a38 <__pack_f+0x94>
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	a1 09       	sbc	r26, r1
    1a48:	b1 09       	sbc	r27, r1
    1a4a:	8e 21       	and	r24, r14
    1a4c:	9f 21       	and	r25, r15
    1a4e:	a0 23       	and	r26, r16
    1a50:	b1 23       	and	r27, r17
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	a1 05       	cpc	r26, r1
    1a56:	b1 05       	cpc	r27, r1
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <__pack_f+0xbe>
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a0 e0       	ldi	r26, 0x00	; 0
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	9a 01       	movw	r18, r20
    1a64:	ab 01       	movw	r20, r22
    1a66:	28 2b       	or	r18, r24
    1a68:	39 2b       	or	r19, r25
    1a6a:	4a 2b       	or	r20, r26
    1a6c:	5b 2b       	or	r21, r27
    1a6e:	da 01       	movw	r26, r20
    1a70:	c9 01       	movw	r24, r18
    1a72:	8f 77       	andi	r24, 0x7F	; 127
    1a74:	90 70       	andi	r25, 0x00	; 0
    1a76:	a0 70       	andi	r26, 0x00	; 0
    1a78:	b0 70       	andi	r27, 0x00	; 0
    1a7a:	80 34       	cpi	r24, 0x40	; 64
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	a1 05       	cpc	r26, r1
    1a80:	b1 05       	cpc	r27, r1
    1a82:	39 f4       	brne	.+14     	; 0x1a92 <__pack_f+0xee>
    1a84:	27 ff       	sbrs	r18, 7
    1a86:	09 c0       	rjmp	.+18     	; 0x1a9a <__pack_f+0xf6>
    1a88:	20 5c       	subi	r18, 0xC0	; 192
    1a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <__pack_f+0xf6>
    1a92:	21 5c       	subi	r18, 0xC1	; 193
    1a94:	3f 4f       	sbci	r19, 0xFF	; 255
    1a96:	4f 4f       	sbci	r20, 0xFF	; 255
    1a98:	5f 4f       	sbci	r21, 0xFF	; 255
    1a9a:	e0 e0       	ldi	r30, 0x00	; 0
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	20 30       	cpi	r18, 0x00	; 0
    1aa0:	a0 e0       	ldi	r26, 0x00	; 0
    1aa2:	3a 07       	cpc	r19, r26
    1aa4:	a0 e0       	ldi	r26, 0x00	; 0
    1aa6:	4a 07       	cpc	r20, r26
    1aa8:	a0 e4       	ldi	r26, 0x40	; 64
    1aaa:	5a 07       	cpc	r21, r26
    1aac:	10 f0       	brcs	.+4      	; 0x1ab2 <__pack_f+0x10e>
    1aae:	e1 e0       	ldi	r30, 0x01	; 1
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	79 01       	movw	r14, r18
    1ab4:	8a 01       	movw	r16, r20
    1ab6:	27 c0       	rjmp	.+78     	; 0x1b06 <__pack_f+0x162>
    1ab8:	60 38       	cpi	r22, 0x80	; 128
    1aba:	71 05       	cpc	r23, r1
    1abc:	64 f5       	brge	.+88     	; 0x1b16 <__pack_f+0x172>
    1abe:	fb 01       	movw	r30, r22
    1ac0:	e1 58       	subi	r30, 0x81	; 129
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	d8 01       	movw	r26, r16
    1ac6:	c7 01       	movw	r24, r14
    1ac8:	8f 77       	andi	r24, 0x7F	; 127
    1aca:	90 70       	andi	r25, 0x00	; 0
    1acc:	a0 70       	andi	r26, 0x00	; 0
    1ace:	b0 70       	andi	r27, 0x00	; 0
    1ad0:	80 34       	cpi	r24, 0x40	; 64
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	a1 05       	cpc	r26, r1
    1ad6:	b1 05       	cpc	r27, r1
    1ad8:	39 f4       	brne	.+14     	; 0x1ae8 <__pack_f+0x144>
    1ada:	e7 fe       	sbrs	r14, 7
    1adc:	0d c0       	rjmp	.+26     	; 0x1af8 <__pack_f+0x154>
    1ade:	80 e4       	ldi	r24, 0x40	; 64
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e0       	ldi	r26, 0x00	; 0
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	04 c0       	rjmp	.+8      	; 0x1af0 <__pack_f+0x14c>
    1ae8:	8f e3       	ldi	r24, 0x3F	; 63
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a0 e0       	ldi	r26, 0x00	; 0
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e8 0e       	add	r14, r24
    1af2:	f9 1e       	adc	r15, r25
    1af4:	0a 1f       	adc	r16, r26
    1af6:	1b 1f       	adc	r17, r27
    1af8:	17 ff       	sbrs	r17, 7
    1afa:	05 c0       	rjmp	.+10     	; 0x1b06 <__pack_f+0x162>
    1afc:	16 95       	lsr	r17
    1afe:	07 95       	ror	r16
    1b00:	f7 94       	ror	r15
    1b02:	e7 94       	ror	r14
    1b04:	31 96       	adiw	r30, 0x01	; 1
    1b06:	87 e0       	ldi	r24, 0x07	; 7
    1b08:	16 95       	lsr	r17
    1b0a:	07 95       	ror	r16
    1b0c:	f7 94       	ror	r15
    1b0e:	e7 94       	ror	r14
    1b10:	8a 95       	dec	r24
    1b12:	d1 f7       	brne	.-12     	; 0x1b08 <__pack_f+0x164>
    1b14:	05 c0       	rjmp	.+10     	; 0x1b20 <__pack_f+0x17c>
    1b16:	ee 24       	eor	r14, r14
    1b18:	ff 24       	eor	r15, r15
    1b1a:	87 01       	movw	r16, r14
    1b1c:	ef ef       	ldi	r30, 0xFF	; 255
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	6e 2f       	mov	r22, r30
    1b22:	67 95       	ror	r22
    1b24:	66 27       	eor	r22, r22
    1b26:	67 95       	ror	r22
    1b28:	90 2f       	mov	r25, r16
    1b2a:	9f 77       	andi	r25, 0x7F	; 127
    1b2c:	d7 94       	ror	r13
    1b2e:	dd 24       	eor	r13, r13
    1b30:	d7 94       	ror	r13
    1b32:	8e 2f       	mov	r24, r30
    1b34:	86 95       	lsr	r24
    1b36:	49 2f       	mov	r20, r25
    1b38:	46 2b       	or	r20, r22
    1b3a:	58 2f       	mov	r21, r24
    1b3c:	5d 29       	or	r21, r13
    1b3e:	b7 01       	movw	r22, r14
    1b40:	ca 01       	movw	r24, r20
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	ff 90       	pop	r15
    1b48:	ef 90       	pop	r14
    1b4a:	df 90       	pop	r13
    1b4c:	08 95       	ret

00001b4e <__unpack_f>:
    1b4e:	fc 01       	movw	r30, r24
    1b50:	db 01       	movw	r26, r22
    1b52:	40 81       	ld	r20, Z
    1b54:	51 81       	ldd	r21, Z+1	; 0x01
    1b56:	22 81       	ldd	r18, Z+2	; 0x02
    1b58:	62 2f       	mov	r22, r18
    1b5a:	6f 77       	andi	r22, 0x7F	; 127
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	22 1f       	adc	r18, r18
    1b60:	22 27       	eor	r18, r18
    1b62:	22 1f       	adc	r18, r18
    1b64:	93 81       	ldd	r25, Z+3	; 0x03
    1b66:	89 2f       	mov	r24, r25
    1b68:	88 0f       	add	r24, r24
    1b6a:	82 2b       	or	r24, r18
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	99 1f       	adc	r25, r25
    1b72:	99 27       	eor	r25, r25
    1b74:	99 1f       	adc	r25, r25
    1b76:	11 96       	adiw	r26, 0x01	; 1
    1b78:	9c 93       	st	X, r25
    1b7a:	11 97       	sbiw	r26, 0x01	; 1
    1b7c:	21 15       	cp	r18, r1
    1b7e:	31 05       	cpc	r19, r1
    1b80:	a9 f5       	brne	.+106    	; 0x1bec <__unpack_f+0x9e>
    1b82:	41 15       	cp	r20, r1
    1b84:	51 05       	cpc	r21, r1
    1b86:	61 05       	cpc	r22, r1
    1b88:	71 05       	cpc	r23, r1
    1b8a:	11 f4       	brne	.+4      	; 0x1b90 <__unpack_f+0x42>
    1b8c:	82 e0       	ldi	r24, 0x02	; 2
    1b8e:	37 c0       	rjmp	.+110    	; 0x1bfe <__unpack_f+0xb0>
    1b90:	82 e8       	ldi	r24, 0x82	; 130
    1b92:	9f ef       	ldi	r25, 0xFF	; 255
    1b94:	13 96       	adiw	r26, 0x03	; 3
    1b96:	9c 93       	st	X, r25
    1b98:	8e 93       	st	-X, r24
    1b9a:	12 97       	sbiw	r26, 0x02	; 2
    1b9c:	9a 01       	movw	r18, r20
    1b9e:	ab 01       	movw	r20, r22
    1ba0:	67 e0       	ldi	r22, 0x07	; 7
    1ba2:	22 0f       	add	r18, r18
    1ba4:	33 1f       	adc	r19, r19
    1ba6:	44 1f       	adc	r20, r20
    1ba8:	55 1f       	adc	r21, r21
    1baa:	6a 95       	dec	r22
    1bac:	d1 f7       	brne	.-12     	; 0x1ba2 <__unpack_f+0x54>
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	8c 93       	st	X, r24
    1bb2:	0d c0       	rjmp	.+26     	; 0x1bce <__unpack_f+0x80>
    1bb4:	22 0f       	add	r18, r18
    1bb6:	33 1f       	adc	r19, r19
    1bb8:	44 1f       	adc	r20, r20
    1bba:	55 1f       	adc	r21, r21
    1bbc:	12 96       	adiw	r26, 0x02	; 2
    1bbe:	8d 91       	ld	r24, X+
    1bc0:	9c 91       	ld	r25, X
    1bc2:	13 97       	sbiw	r26, 0x03	; 3
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	13 96       	adiw	r26, 0x03	; 3
    1bc8:	9c 93       	st	X, r25
    1bca:	8e 93       	st	-X, r24
    1bcc:	12 97       	sbiw	r26, 0x02	; 2
    1bce:	20 30       	cpi	r18, 0x00	; 0
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	38 07       	cpc	r19, r24
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	48 07       	cpc	r20, r24
    1bd8:	80 e4       	ldi	r24, 0x40	; 64
    1bda:	58 07       	cpc	r21, r24
    1bdc:	58 f3       	brcs	.-42     	; 0x1bb4 <__unpack_f+0x66>
    1bde:	14 96       	adiw	r26, 0x04	; 4
    1be0:	2d 93       	st	X+, r18
    1be2:	3d 93       	st	X+, r19
    1be4:	4d 93       	st	X+, r20
    1be6:	5c 93       	st	X, r21
    1be8:	17 97       	sbiw	r26, 0x07	; 7
    1bea:	08 95       	ret
    1bec:	2f 3f       	cpi	r18, 0xFF	; 255
    1bee:	31 05       	cpc	r19, r1
    1bf0:	79 f4       	brne	.+30     	; 0x1c10 <__unpack_f+0xc2>
    1bf2:	41 15       	cp	r20, r1
    1bf4:	51 05       	cpc	r21, r1
    1bf6:	61 05       	cpc	r22, r1
    1bf8:	71 05       	cpc	r23, r1
    1bfa:	19 f4       	brne	.+6      	; 0x1c02 <__unpack_f+0xb4>
    1bfc:	84 e0       	ldi	r24, 0x04	; 4
    1bfe:	8c 93       	st	X, r24
    1c00:	08 95       	ret
    1c02:	64 ff       	sbrs	r22, 4
    1c04:	03 c0       	rjmp	.+6      	; 0x1c0c <__unpack_f+0xbe>
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	8c 93       	st	X, r24
    1c0a:	12 c0       	rjmp	.+36     	; 0x1c30 <__unpack_f+0xe2>
    1c0c:	1c 92       	st	X, r1
    1c0e:	10 c0       	rjmp	.+32     	; 0x1c30 <__unpack_f+0xe2>
    1c10:	2f 57       	subi	r18, 0x7F	; 127
    1c12:	30 40       	sbci	r19, 0x00	; 0
    1c14:	13 96       	adiw	r26, 0x03	; 3
    1c16:	3c 93       	st	X, r19
    1c18:	2e 93       	st	-X, r18
    1c1a:	12 97       	sbiw	r26, 0x02	; 2
    1c1c:	83 e0       	ldi	r24, 0x03	; 3
    1c1e:	8c 93       	st	X, r24
    1c20:	87 e0       	ldi	r24, 0x07	; 7
    1c22:	44 0f       	add	r20, r20
    1c24:	55 1f       	adc	r21, r21
    1c26:	66 1f       	adc	r22, r22
    1c28:	77 1f       	adc	r23, r23
    1c2a:	8a 95       	dec	r24
    1c2c:	d1 f7       	brne	.-12     	; 0x1c22 <__unpack_f+0xd4>
    1c2e:	70 64       	ori	r23, 0x40	; 64
    1c30:	14 96       	adiw	r26, 0x04	; 4
    1c32:	4d 93       	st	X+, r20
    1c34:	5d 93       	st	X+, r21
    1c36:	6d 93       	st	X+, r22
    1c38:	7c 93       	st	X, r23
    1c3a:	17 97       	sbiw	r26, 0x07	; 7
    1c3c:	08 95       	ret

00001c3e <__fpcmp_parts_f>:
    1c3e:	1f 93       	push	r17
    1c40:	dc 01       	movw	r26, r24
    1c42:	fb 01       	movw	r30, r22
    1c44:	9c 91       	ld	r25, X
    1c46:	92 30       	cpi	r25, 0x02	; 2
    1c48:	08 f4       	brcc	.+2      	; 0x1c4c <__fpcmp_parts_f+0xe>
    1c4a:	47 c0       	rjmp	.+142    	; 0x1cda <__fpcmp_parts_f+0x9c>
    1c4c:	80 81       	ld	r24, Z
    1c4e:	82 30       	cpi	r24, 0x02	; 2
    1c50:	08 f4       	brcc	.+2      	; 0x1c54 <__fpcmp_parts_f+0x16>
    1c52:	43 c0       	rjmp	.+134    	; 0x1cda <__fpcmp_parts_f+0x9c>
    1c54:	94 30       	cpi	r25, 0x04	; 4
    1c56:	51 f4       	brne	.+20     	; 0x1c6c <__fpcmp_parts_f+0x2e>
    1c58:	11 96       	adiw	r26, 0x01	; 1
    1c5a:	1c 91       	ld	r17, X
    1c5c:	84 30       	cpi	r24, 0x04	; 4
    1c5e:	99 f5       	brne	.+102    	; 0x1cc6 <__fpcmp_parts_f+0x88>
    1c60:	81 81       	ldd	r24, Z+1	; 0x01
    1c62:	68 2f       	mov	r22, r24
    1c64:	70 e0       	ldi	r23, 0x00	; 0
    1c66:	61 1b       	sub	r22, r17
    1c68:	71 09       	sbc	r23, r1
    1c6a:	3f c0       	rjmp	.+126    	; 0x1cea <__fpcmp_parts_f+0xac>
    1c6c:	84 30       	cpi	r24, 0x04	; 4
    1c6e:	21 f0       	breq	.+8      	; 0x1c78 <__fpcmp_parts_f+0x3a>
    1c70:	92 30       	cpi	r25, 0x02	; 2
    1c72:	31 f4       	brne	.+12     	; 0x1c80 <__fpcmp_parts_f+0x42>
    1c74:	82 30       	cpi	r24, 0x02	; 2
    1c76:	b9 f1       	breq	.+110    	; 0x1ce6 <__fpcmp_parts_f+0xa8>
    1c78:	81 81       	ldd	r24, Z+1	; 0x01
    1c7a:	88 23       	and	r24, r24
    1c7c:	89 f1       	breq	.+98     	; 0x1ce0 <__fpcmp_parts_f+0xa2>
    1c7e:	2d c0       	rjmp	.+90     	; 0x1cda <__fpcmp_parts_f+0x9c>
    1c80:	11 96       	adiw	r26, 0x01	; 1
    1c82:	1c 91       	ld	r17, X
    1c84:	11 97       	sbiw	r26, 0x01	; 1
    1c86:	82 30       	cpi	r24, 0x02	; 2
    1c88:	f1 f0       	breq	.+60     	; 0x1cc6 <__fpcmp_parts_f+0x88>
    1c8a:	81 81       	ldd	r24, Z+1	; 0x01
    1c8c:	18 17       	cp	r17, r24
    1c8e:	d9 f4       	brne	.+54     	; 0x1cc6 <__fpcmp_parts_f+0x88>
    1c90:	12 96       	adiw	r26, 0x02	; 2
    1c92:	2d 91       	ld	r18, X+
    1c94:	3c 91       	ld	r19, X
    1c96:	13 97       	sbiw	r26, 0x03	; 3
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	82 17       	cp	r24, r18
    1c9e:	93 07       	cpc	r25, r19
    1ca0:	94 f0       	brlt	.+36     	; 0x1cc6 <__fpcmp_parts_f+0x88>
    1ca2:	28 17       	cp	r18, r24
    1ca4:	39 07       	cpc	r19, r25
    1ca6:	bc f0       	brlt	.+46     	; 0x1cd6 <__fpcmp_parts_f+0x98>
    1ca8:	14 96       	adiw	r26, 0x04	; 4
    1caa:	8d 91       	ld	r24, X+
    1cac:	9d 91       	ld	r25, X+
    1cae:	0d 90       	ld	r0, X+
    1cb0:	bc 91       	ld	r27, X
    1cb2:	a0 2d       	mov	r26, r0
    1cb4:	24 81       	ldd	r18, Z+4	; 0x04
    1cb6:	35 81       	ldd	r19, Z+5	; 0x05
    1cb8:	46 81       	ldd	r20, Z+6	; 0x06
    1cba:	57 81       	ldd	r21, Z+7	; 0x07
    1cbc:	28 17       	cp	r18, r24
    1cbe:	39 07       	cpc	r19, r25
    1cc0:	4a 07       	cpc	r20, r26
    1cc2:	5b 07       	cpc	r21, r27
    1cc4:	18 f4       	brcc	.+6      	; 0x1ccc <__fpcmp_parts_f+0x8e>
    1cc6:	11 23       	and	r17, r17
    1cc8:	41 f0       	breq	.+16     	; 0x1cda <__fpcmp_parts_f+0x9c>
    1cca:	0a c0       	rjmp	.+20     	; 0x1ce0 <__fpcmp_parts_f+0xa2>
    1ccc:	82 17       	cp	r24, r18
    1cce:	93 07       	cpc	r25, r19
    1cd0:	a4 07       	cpc	r26, r20
    1cd2:	b5 07       	cpc	r27, r21
    1cd4:	40 f4       	brcc	.+16     	; 0x1ce6 <__fpcmp_parts_f+0xa8>
    1cd6:	11 23       	and	r17, r17
    1cd8:	19 f0       	breq	.+6      	; 0x1ce0 <__fpcmp_parts_f+0xa2>
    1cda:	61 e0       	ldi	r22, 0x01	; 1
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	05 c0       	rjmp	.+10     	; 0x1cea <__fpcmp_parts_f+0xac>
    1ce0:	6f ef       	ldi	r22, 0xFF	; 255
    1ce2:	7f ef       	ldi	r23, 0xFF	; 255
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <__fpcmp_parts_f+0xac>
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	cb 01       	movw	r24, r22
    1cec:	1f 91       	pop	r17
    1cee:	08 95       	ret

00001cf0 <BUZZER_init>:


/*Description :
 * Function to initialize the buzzer
*/
void BUZZER_init(){
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    1cf8:	83 e0       	ldi	r24, 0x03	; 3
    1cfa:	67 e0       	ldi	r22, 0x07	; 7
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <GPIO_setupPinDirection>
}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <BUZZER_on>:

/*Description :
 * Function to turn on the buzzer
*/
void BUZZER_on(){
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1d10:	83 e0       	ldi	r24, 0x03	; 3
    1d12:	67 e0       	ldi	r22, 0x07	; 7
    1d14:	41 e0       	ldi	r20, 0x01	; 1
    1d16:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_writePin>
}
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <BUZZER_off>:

/*Description :
 * Function to turn off the buzzer
*/
void BUZZER_off(){
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1d28:	83 e0       	ldi	r24, 0x03	; 3
    1d2a:	67 e0       	ldi	r22, 0x07	; 7
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_writePin>
}
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <DcMotor_Init>:
#include<avr/io.h>
/*
 * Description :
 * A function to initialize the dc motor
 */
void DcMotor_Init(void){
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT, MOTOR_INPUT1, PIN_OUTPUT);
    1d40:	83 e0       	ldi	r24, 0x03	; 3
    1d42:	65 e0       	ldi	r22, 0x05	; 5
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT, MOTOR_INPUT2, PIN_OUTPUT);
    1d4a:	83 e0       	ldi	r24, 0x03	; 3
    1d4c:	66 e0       	ldi	r22, 0x06	; 6
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_PORT, MOTOR_INPUT1,0);
    1d54:	83 e0       	ldi	r24, 0x03	; 3
    1d56:	65 e0       	ldi	r22, 0x05	; 5
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT, MOTOR_INPUT2,0);
    1d5e:	83 e0       	ldi	r24, 0x03	; 3
    1d60:	66 e0       	ldi	r22, 0x06	; 6
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_writePin>

}
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <DcMotor_Rotate>:
 * Inputs :
 * the state of the motor (clk_wise , anti-clk_wise , stop)
 * the speed in precent
 */

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <DcMotor_Rotate+0x6>
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <DcMotor_Rotate+0x8>
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	6a 83       	std	Y+2, r22	; 0x02
	Timer0_PWM_Init(speed);
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <Timer0_PWM_Init>
	switch(state){
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	3c 83       	std	Y+4, r19	; 0x04
    1d8c:	2b 83       	std	Y+3, r18	; 0x03
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	91 05       	cpc	r25, r1
    1d96:	a1 f0       	breq	.+40     	; 0x1dc0 <DcMotor_Rotate+0x52>
    1d98:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9c:	22 30       	cpi	r18, 0x02	; 2
    1d9e:	31 05       	cpc	r19, r1
    1da0:	d1 f0       	breq	.+52     	; 0x1dd6 <DcMotor_Rotate+0x68>
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	01 f5       	brne	.+64     	; 0x1dea <DcMotor_Rotate+0x7c>
	case STOP :
		GPIO_writePin(MOTOR_PORT, MOTOR_INPUT1,LOGIC_LOW);
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	65 e0       	ldi	r22, 0x05	; 5
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT, MOTOR_INPUT2,LOGIC_LOW);
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	66 e0       	ldi	r22, 0x06	; 6
    1db8:	40 e0       	ldi	r20, 0x00	; 0
    1dba:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_writePin>
    1dbe:	15 c0       	rjmp	.+42     	; 0x1dea <DcMotor_Rotate+0x7c>
		break;
	case ANTI_CLK_WISE :
		GPIO_writePin(MOTOR_PORT, MOTOR_INPUT1,LOGIC_HIGH);
    1dc0:	83 e0       	ldi	r24, 0x03	; 3
    1dc2:	65 e0       	ldi	r22, 0x05	; 5
    1dc4:	41 e0       	ldi	r20, 0x01	; 1
    1dc6:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT, MOTOR_INPUT2,LOGIC_LOW);
    1dca:	83 e0       	ldi	r24, 0x03	; 3
    1dcc:	66 e0       	ldi	r22, 0x06	; 6
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_writePin>
    1dd4:	0a c0       	rjmp	.+20     	; 0x1dea <DcMotor_Rotate+0x7c>
		break;
	case CLK_WISE :
		GPIO_writePin(MOTOR_PORT, MOTOR_INPUT1,LOGIC_LOW);
    1dd6:	83 e0       	ldi	r24, 0x03	; 3
    1dd8:	65 e0       	ldi	r22, 0x05	; 5
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT, MOTOR_INPUT2,LOGIC_HIGH);
    1de0:	83 e0       	ldi	r24, 0x03	; 3
    1de2:	66 e0       	ldi	r22, 0x06	; 6
    1de4:	41 e0       	ldi	r20, 0x01	; 1
    1de6:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_writePin>
		break;

	}
}
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <Timer0_PWM_Init>:
 * Function responsible for generating the wave of pwm.
 * Inputs :
 * The duty cycle in precent
 */
void Timer0_PWM_Init(uint8 duty_cycle)
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <Timer0_PWM_Init+0x6>
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	8a 83       	std	Y+2, r24	; 0x02
	TCNT0 = 0; // Set Timer Initial Value to 0
    1e04:	e2 e5       	ldi	r30, 0x52	; 82
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	10 82       	st	Z, r1
	//Get the compare value
	uint8 comp_val = (uint8)((duty_cycle*0.01) * 255);
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	aa 27       	eor	r26, r26
    1e12:	97 fd       	sbrc	r25, 7
    1e14:	a0 95       	com	r26
    1e16:	ba 2f       	mov	r27, r26
    1e18:	bc 01       	movw	r22, r24
    1e1a:	cd 01       	movw	r24, r26
    1e1c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__floatsisf>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	2a e0       	ldi	r18, 0x0A	; 10
    1e2a:	37 ed       	ldi	r19, 0xD7	; 215
    1e2c:	43 e2       	ldi	r20, 0x23	; 35
    1e2e:	5c e3       	ldi	r21, 0x3C	; 60
    1e30:	0e 94 47 0a 	call	0x148e	; 0x148e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	bc 01       	movw	r22, r24
    1e3a:	cd 01       	movw	r24, r26
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	4f e7       	ldi	r20, 0x7F	; 127
    1e42:	53 e4       	ldi	r21, 0x43	; 67
    1e44:	0e 94 47 0a 	call	0x148e	; 0x148e <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	89 83       	std	Y+1, r24	; 0x01
	OCR0  = comp_val; // Set Compare Value
    1e5a:	ec e5       	ldi	r30, 0x5C	; 92
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	63 e0       	ldi	r22, 0x03	; 3
    1e66:	41 e0       	ldi	r20, 0x01	; 1
    1e68:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1e6c:	e3 e5       	ldi	r30, 0x53	; 83
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	8a e6       	ldi	r24, 0x6A	; 106
    1e72:	80 83       	st	Z, r24
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <EEPROM_writeByte+0x6>
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <EEPROM_writeByte+0x8>
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1e90:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1e94:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <TWI_getStatus>
    1e98:	88 30       	cpi	r24, 0x08	; 8
    1e9a:	11 f0       	breq	.+4      	; 0x1ea0 <EEPROM_writeByte+0x22>
        return ERROR;
    1e9c:	1c 82       	std	Y+4, r1	; 0x04
    1e9e:	28 c0       	rjmp	.+80     	; 0x1ef0 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea4:	80 70       	andi	r24, 0x00	; 0
    1ea6:	97 70       	andi	r25, 0x07	; 7
    1ea8:	88 0f       	add	r24, r24
    1eaa:	89 2f       	mov	r24, r25
    1eac:	88 1f       	adc	r24, r24
    1eae:	99 0b       	sbc	r25, r25
    1eb0:	91 95       	neg	r25
    1eb2:	80 6a       	ori	r24, 0xA0	; 160
    1eb4:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1eb8:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <TWI_getStatus>
    1ebc:	88 31       	cpi	r24, 0x18	; 24
    1ebe:	11 f0       	breq	.+4      	; 0x1ec4 <EEPROM_writeByte+0x46>
        return ERROR; 
    1ec0:	1c 82       	std	Y+4, r1	; 0x04
    1ec2:	16 c0       	rjmp	.+44     	; 0x1ef0 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1eca:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <TWI_getStatus>
    1ece:	88 32       	cpi	r24, 0x28	; 40
    1ed0:	11 f0       	breq	.+4      	; 0x1ed6 <EEPROM_writeByte+0x58>
        return ERROR;
    1ed2:	1c 82       	std	Y+4, r1	; 0x04
    1ed4:	0d c0       	rjmp	.+26     	; 0x1ef0 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1edc:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <TWI_getStatus>
    1ee0:	88 32       	cpi	r24, 0x28	; 40
    1ee2:	11 f0       	breq	.+4      	; 0x1ee8 <EEPROM_writeByte+0x6a>
        return ERROR;
    1ee4:	1c 82       	std	Y+4, r1	; 0x04
    1ee6:	04 c0       	rjmp	.+8      	; 0x1ef0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1ee8:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <TWI_stop>
	
    return SUCCESS;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	8c 83       	std	Y+4, r24	; 0x04
    1ef0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <EEPROM_readByte+0x6>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <EEPROM_readByte+0x8>
    1f08:	0f 92       	push	r0
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	9a 83       	std	Y+2, r25	; 0x02
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	7c 83       	std	Y+4, r23	; 0x04
    1f14:	6b 83       	std	Y+3, r22	; 0x03
	/*We send the frame: start - address of device and r/w - memory address - start - slave address - read - data*/
	/* Send the Start Bit */
    TWI_start();
    1f16:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1f1a:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <TWI_getStatus>
    1f1e:	88 30       	cpi	r24, 0x08	; 8
    1f20:	11 f0       	breq	.+4      	; 0x1f26 <EEPROM_readByte+0x26>
        return ERROR;
    1f22:	1d 82       	std	Y+5, r1	; 0x05
    1f24:	44 c0       	rjmp	.+136    	; 0x1fae <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	80 70       	andi	r24, 0x00	; 0
    1f2c:	97 70       	andi	r25, 0x07	; 7
    1f2e:	88 0f       	add	r24, r24
    1f30:	89 2f       	mov	r24, r25
    1f32:	88 1f       	adc	r24, r24
    1f34:	99 0b       	sbc	r25, r25
    1f36:	91 95       	neg	r25
    1f38:	80 6a       	ori	r24, 0xA0	; 160
    1f3a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1f3e:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <TWI_getStatus>
    1f42:	88 31       	cpi	r24, 0x18	; 24
    1f44:	11 f0       	breq	.+4      	; 0x1f4a <EEPROM_readByte+0x4a>
        return ERROR;
    1f46:	1d 82       	std	Y+5, r1	; 0x05
    1f48:	32 c0       	rjmp	.+100    	; 0x1fae <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1f50:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <TWI_getStatus>
    1f54:	88 32       	cpi	r24, 0x28	; 40
    1f56:	11 f0       	breq	.+4      	; 0x1f5c <EEPROM_readByte+0x5c>
        return ERROR;
    1f58:	1d 82       	std	Y+5, r1	; 0x05
    1f5a:	29 c0       	rjmp	.+82     	; 0x1fae <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1f5c:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1f60:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <TWI_getStatus>
    1f64:	80 31       	cpi	r24, 0x10	; 16
    1f66:	11 f0       	breq	.+4      	; 0x1f6c <EEPROM_readByte+0x6c>
        return ERROR;
    1f68:	1d 82       	std	Y+5, r1	; 0x05
    1f6a:	21 c0       	rjmp	.+66     	; 0x1fae <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	80 70       	andi	r24, 0x00	; 0
    1f72:	97 70       	andi	r25, 0x07	; 7
    1f74:	88 0f       	add	r24, r24
    1f76:	89 2f       	mov	r24, r25
    1f78:	88 1f       	adc	r24, r24
    1f7a:	99 0b       	sbc	r25, r25
    1f7c:	91 95       	neg	r25
    1f7e:	81 6a       	ori	r24, 0xA1	; 161
    1f80:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1f84:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <TWI_getStatus>
    1f88:	80 34       	cpi	r24, 0x40	; 64
    1f8a:	11 f0       	breq	.+4      	; 0x1f90 <EEPROM_readByte+0x90>
        return ERROR;
    1f8c:	1d 82       	std	Y+5, r1	; 0x05
    1f8e:	0f c0       	rjmp	.+30     	; 0x1fae <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1f90:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <TWI_readByteWithNACK>
    1f94:	eb 81       	ldd	r30, Y+3	; 0x03
    1f96:	fc 81       	ldd	r31, Y+4	; 0x04
    1f98:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1f9a:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <TWI_getStatus>
    1f9e:	88 35       	cpi	r24, 0x58	; 88
    1fa0:	11 f0       	breq	.+4      	; 0x1fa6 <EEPROM_readByte+0xa6>
        return ERROR;
    1fa2:	1d 82       	std	Y+5, r1	; 0x05
    1fa4:	04 c0       	rjmp	.+8      	; 0x1fae <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1fa6:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <TWI_stop>

    return SUCCESS;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <GPIO_setupPinDirection+0x6>
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <GPIO_setupPinDirection+0x8>
    1fc8:	0f 92       	push	r0
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	6a 83       	std	Y+2, r22	; 0x02
    1fd2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	88 30       	cpi	r24, 0x08	; 8
    1fd8:	08 f0       	brcs	.+2      	; 0x1fdc <GPIO_setupPinDirection+0x1c>
    1fda:	d5 c0       	rjmp	.+426    	; 0x2186 <GPIO_setupPinDirection+0x1c6>
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	84 30       	cpi	r24, 0x04	; 4
    1fe0:	08 f0       	brcs	.+2      	; 0x1fe4 <GPIO_setupPinDirection+0x24>
    1fe2:	d1 c0       	rjmp	.+418    	; 0x2186 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	3d 83       	std	Y+5, r19	; 0x05
    1fec:	2c 83       	std	Y+4, r18	; 0x04
    1fee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff2:	81 30       	cpi	r24, 0x01	; 1
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <GPIO_setupPinDirection+0x3a>
    1ff8:	43 c0       	rjmp	.+134    	; 0x2080 <GPIO_setupPinDirection+0xc0>
    1ffa:	2c 81       	ldd	r18, Y+4	; 0x04
    1ffc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ffe:	22 30       	cpi	r18, 0x02	; 2
    2000:	31 05       	cpc	r19, r1
    2002:	2c f4       	brge	.+10     	; 0x200e <GPIO_setupPinDirection+0x4e>
    2004:	8c 81       	ldd	r24, Y+4	; 0x04
    2006:	9d 81       	ldd	r25, Y+5	; 0x05
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	71 f0       	breq	.+28     	; 0x2028 <GPIO_setupPinDirection+0x68>
    200c:	bc c0       	rjmp	.+376    	; 0x2186 <GPIO_setupPinDirection+0x1c6>
    200e:	2c 81       	ldd	r18, Y+4	; 0x04
    2010:	3d 81       	ldd	r19, Y+5	; 0x05
    2012:	22 30       	cpi	r18, 0x02	; 2
    2014:	31 05       	cpc	r19, r1
    2016:	09 f4       	brne	.+2      	; 0x201a <GPIO_setupPinDirection+0x5a>
    2018:	5f c0       	rjmp	.+190    	; 0x20d8 <GPIO_setupPinDirection+0x118>
    201a:	8c 81       	ldd	r24, Y+4	; 0x04
    201c:	9d 81       	ldd	r25, Y+5	; 0x05
    201e:	83 30       	cpi	r24, 0x03	; 3
    2020:	91 05       	cpc	r25, r1
    2022:	09 f4       	brne	.+2      	; 0x2026 <GPIO_setupPinDirection+0x66>
    2024:	85 c0       	rjmp	.+266    	; 0x2130 <GPIO_setupPinDirection+0x170>
    2026:	af c0       	rjmp	.+350    	; 0x2186 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	a1 f4       	brne	.+40     	; 0x2056 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    202e:	aa e3       	ldi	r26, 0x3A	; 58
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	ea e3       	ldi	r30, 0x3A	; 58
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	48 2f       	mov	r20, r24
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	02 2e       	mov	r0, r18
    2046:	02 c0       	rjmp	.+4      	; 0x204c <GPIO_setupPinDirection+0x8c>
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	0a 94       	dec	r0
    204e:	e2 f7       	brpl	.-8      	; 0x2048 <GPIO_setupPinDirection+0x88>
    2050:	84 2b       	or	r24, r20
    2052:	8c 93       	st	X, r24
    2054:	98 c0       	rjmp	.+304    	; 0x2186 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2056:	aa e3       	ldi	r26, 0x3A	; 58
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	ea e3       	ldi	r30, 0x3A	; 58
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	48 2f       	mov	r20, r24
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 2e       	mov	r0, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <GPIO_setupPinDirection+0xb4>
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	0a 94       	dec	r0
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <GPIO_setupPinDirection+0xb0>
    2078:	80 95       	com	r24
    207a:	84 23       	and	r24, r20
    207c:	8c 93       	st	X, r24
    207e:	83 c0       	rjmp	.+262    	; 0x2186 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	a1 f4       	brne	.+40     	; 0x20ae <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2086:	a7 e3       	ldi	r26, 0x37	; 55
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e7 e3       	ldi	r30, 0x37	; 55
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	48 2f       	mov	r20, r24
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	02 2e       	mov	r0, r18
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <GPIO_setupPinDirection+0xe4>
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	0a 94       	dec	r0
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <GPIO_setupPinDirection+0xe0>
    20a8:	84 2b       	or	r24, r20
    20aa:	8c 93       	st	X, r24
    20ac:	6c c0       	rjmp	.+216    	; 0x2186 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    20ae:	a7 e3       	ldi	r26, 0x37	; 55
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e7 e3       	ldi	r30, 0x37	; 55
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	48 2f       	mov	r20, r24
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	02 2e       	mov	r0, r18
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <GPIO_setupPinDirection+0x10c>
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	0a 94       	dec	r0
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <GPIO_setupPinDirection+0x108>
    20d0:	80 95       	com	r24
    20d2:	84 23       	and	r24, r20
    20d4:	8c 93       	st	X, r24
    20d6:	57 c0       	rjmp	.+174    	; 0x2186 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	81 30       	cpi	r24, 0x01	; 1
    20dc:	a1 f4       	brne	.+40     	; 0x2106 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    20de:	a4 e3       	ldi	r26, 0x34	; 52
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e4 e3       	ldi	r30, 0x34	; 52
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	48 2f       	mov	r20, r24
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	02 2e       	mov	r0, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <GPIO_setupPinDirection+0x13c>
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	0a 94       	dec	r0
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <GPIO_setupPinDirection+0x138>
    2100:	84 2b       	or	r24, r20
    2102:	8c 93       	st	X, r24
    2104:	40 c0       	rjmp	.+128    	; 0x2186 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2106:	a4 e3       	ldi	r26, 0x34	; 52
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e4 e3       	ldi	r30, 0x34	; 52
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	48 2f       	mov	r20, r24
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 2e       	mov	r0, r18
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <GPIO_setupPinDirection+0x164>
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	0a 94       	dec	r0
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <GPIO_setupPinDirection+0x160>
    2128:	80 95       	com	r24
    212a:	84 23       	and	r24, r20
    212c:	8c 93       	st	X, r24
    212e:	2b c0       	rjmp	.+86     	; 0x2186 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	81 30       	cpi	r24, 0x01	; 1
    2134:	a1 f4       	brne	.+40     	; 0x215e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2136:	a1 e3       	ldi	r26, 0x31	; 49
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e1 e3       	ldi	r30, 0x31	; 49
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	48 2f       	mov	r20, r24
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 2e       	mov	r0, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <GPIO_setupPinDirection+0x194>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <GPIO_setupPinDirection+0x190>
    2158:	84 2b       	or	r24, r20
    215a:	8c 93       	st	X, r24
    215c:	14 c0       	rjmp	.+40     	; 0x2186 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    215e:	a1 e3       	ldi	r26, 0x31	; 49
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e1 e3       	ldi	r30, 0x31	; 49
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	48 2f       	mov	r20, r24
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	02 2e       	mov	r0, r18
    2176:	02 c0       	rjmp	.+4      	; 0x217c <GPIO_setupPinDirection+0x1bc>
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	0a 94       	dec	r0
    217e:	e2 f7       	brpl	.-8      	; 0x2178 <GPIO_setupPinDirection+0x1b8>
    2180:	80 95       	com	r24
    2182:	84 23       	and	r24, r20
    2184:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <GPIO_writePin+0x6>
    219c:	00 d0       	rcall	.+0      	; 0x219e <GPIO_writePin+0x8>
    219e:	0f 92       	push	r0
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	6a 83       	std	Y+2, r22	; 0x02
    21a8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    21aa:	8a 81       	ldd	r24, Y+2	; 0x02
    21ac:	88 30       	cpi	r24, 0x08	; 8
    21ae:	08 f0       	brcs	.+2      	; 0x21b2 <GPIO_writePin+0x1c>
    21b0:	d5 c0       	rjmp	.+426    	; 0x235c <GPIO_writePin+0x1c6>
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	84 30       	cpi	r24, 0x04	; 4
    21b6:	08 f0       	brcs	.+2      	; 0x21ba <GPIO_writePin+0x24>
    21b8:	d1 c0       	rjmp	.+418    	; 0x235c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	3d 83       	std	Y+5, r19	; 0x05
    21c2:	2c 83       	std	Y+4, r18	; 0x04
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	9d 81       	ldd	r25, Y+5	; 0x05
    21c8:	81 30       	cpi	r24, 0x01	; 1
    21ca:	91 05       	cpc	r25, r1
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <GPIO_writePin+0x3a>
    21ce:	43 c0       	rjmp	.+134    	; 0x2256 <GPIO_writePin+0xc0>
    21d0:	2c 81       	ldd	r18, Y+4	; 0x04
    21d2:	3d 81       	ldd	r19, Y+5	; 0x05
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	2c f4       	brge	.+10     	; 0x21e4 <GPIO_writePin+0x4e>
    21da:	8c 81       	ldd	r24, Y+4	; 0x04
    21dc:	9d 81       	ldd	r25, Y+5	; 0x05
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	71 f0       	breq	.+28     	; 0x21fe <GPIO_writePin+0x68>
    21e2:	bc c0       	rjmp	.+376    	; 0x235c <GPIO_writePin+0x1c6>
    21e4:	2c 81       	ldd	r18, Y+4	; 0x04
    21e6:	3d 81       	ldd	r19, Y+5	; 0x05
    21e8:	22 30       	cpi	r18, 0x02	; 2
    21ea:	31 05       	cpc	r19, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <GPIO_writePin+0x5a>
    21ee:	5f c0       	rjmp	.+190    	; 0x22ae <GPIO_writePin+0x118>
    21f0:	8c 81       	ldd	r24, Y+4	; 0x04
    21f2:	9d 81       	ldd	r25, Y+5	; 0x05
    21f4:	83 30       	cpi	r24, 0x03	; 3
    21f6:	91 05       	cpc	r25, r1
    21f8:	09 f4       	brne	.+2      	; 0x21fc <GPIO_writePin+0x66>
    21fa:	85 c0       	rjmp	.+266    	; 0x2306 <GPIO_writePin+0x170>
    21fc:	af c0       	rjmp	.+350    	; 0x235c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	a1 f4       	brne	.+40     	; 0x222c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2204:	ab e3       	ldi	r26, 0x3B	; 59
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	eb e3       	ldi	r30, 0x3B	; 59
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	48 2f       	mov	r20, r24
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 2e       	mov	r0, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <GPIO_writePin+0x8c>
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <GPIO_writePin+0x88>
    2226:	84 2b       	or	r24, r20
    2228:	8c 93       	st	X, r24
    222a:	98 c0       	rjmp	.+304    	; 0x235c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    222c:	ab e3       	ldi	r26, 0x3B	; 59
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	eb e3       	ldi	r30, 0x3B	; 59
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	48 2f       	mov	r20, r24
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <GPIO_writePin+0xb4>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <GPIO_writePin+0xb0>
    224e:	80 95       	com	r24
    2250:	84 23       	and	r24, r20
    2252:	8c 93       	st	X, r24
    2254:	83 c0       	rjmp	.+262    	; 0x235c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	a1 f4       	brne	.+40     	; 0x2284 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    225c:	a8 e3       	ldi	r26, 0x38	; 56
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e8 e3       	ldi	r30, 0x38	; 56
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	48 2f       	mov	r20, r24
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	02 2e       	mov	r0, r18
    2274:	02 c0       	rjmp	.+4      	; 0x227a <GPIO_writePin+0xe4>
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	0a 94       	dec	r0
    227c:	e2 f7       	brpl	.-8      	; 0x2276 <GPIO_writePin+0xe0>
    227e:	84 2b       	or	r24, r20
    2280:	8c 93       	st	X, r24
    2282:	6c c0       	rjmp	.+216    	; 0x235c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2284:	a8 e3       	ldi	r26, 0x38	; 56
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e8 e3       	ldi	r30, 0x38	; 56
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	48 2f       	mov	r20, r24
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	02 2e       	mov	r0, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <GPIO_writePin+0x10c>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <GPIO_writePin+0x108>
    22a6:	80 95       	com	r24
    22a8:	84 23       	and	r24, r20
    22aa:	8c 93       	st	X, r24
    22ac:	57 c0       	rjmp	.+174    	; 0x235c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	a1 f4       	brne	.+40     	; 0x22dc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    22b4:	a5 e3       	ldi	r26, 0x35	; 53
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e5 e3       	ldi	r30, 0x35	; 53
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	48 2f       	mov	r20, r24
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	02 2e       	mov	r0, r18
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <GPIO_writePin+0x13c>
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	0a 94       	dec	r0
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <GPIO_writePin+0x138>
    22d6:	84 2b       	or	r24, r20
    22d8:	8c 93       	st	X, r24
    22da:	40 c0       	rjmp	.+128    	; 0x235c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    22dc:	a5 e3       	ldi	r26, 0x35	; 53
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e5 e3       	ldi	r30, 0x35	; 53
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	48 2f       	mov	r20, r24
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 2e       	mov	r0, r18
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <GPIO_writePin+0x164>
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	0a 94       	dec	r0
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <GPIO_writePin+0x160>
    22fe:	80 95       	com	r24
    2300:	84 23       	and	r24, r20
    2302:	8c 93       	st	X, r24
    2304:	2b c0       	rjmp	.+86     	; 0x235c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	a1 f4       	brne	.+40     	; 0x2334 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    230c:	a2 e3       	ldi	r26, 0x32	; 50
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e2 e3       	ldi	r30, 0x32	; 50
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	48 2f       	mov	r20, r24
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	02 2e       	mov	r0, r18
    2324:	02 c0       	rjmp	.+4      	; 0x232a <GPIO_writePin+0x194>
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	0a 94       	dec	r0
    232c:	e2 f7       	brpl	.-8      	; 0x2326 <GPIO_writePin+0x190>
    232e:	84 2b       	or	r24, r20
    2330:	8c 93       	st	X, r24
    2332:	14 c0       	rjmp	.+40     	; 0x235c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2334:	a2 e3       	ldi	r26, 0x32	; 50
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e2 e3       	ldi	r30, 0x32	; 50
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	48 2f       	mov	r20, r24
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	02 2e       	mov	r0, r18
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <GPIO_writePin+0x1bc>
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	0a 94       	dec	r0
    2354:	e2 f7       	brpl	.-8      	; 0x234e <GPIO_writePin+0x1b8>
    2356:	80 95       	com	r24
    2358:	84 23       	and	r24, r20
    235a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	00 d0       	rcall	.+0      	; 0x2372 <GPIO_readPin+0x6>
    2372:	00 d0       	rcall	.+0      	; 0x2374 <GPIO_readPin+0x8>
    2374:	0f 92       	push	r0
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	8a 83       	std	Y+2, r24	; 0x02
    237c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    237e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	88 30       	cpi	r24, 0x08	; 8
    2384:	08 f0       	brcs	.+2      	; 0x2388 <GPIO_readPin+0x1c>
    2386:	84 c0       	rjmp	.+264    	; 0x2490 <GPIO_readPin+0x124>
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	84 30       	cpi	r24, 0x04	; 4
    238c:	08 f0       	brcs	.+2      	; 0x2390 <GPIO_readPin+0x24>
    238e:	80 c0       	rjmp	.+256    	; 0x2490 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	3d 83       	std	Y+5, r19	; 0x05
    2398:	2c 83       	std	Y+4, r18	; 0x04
    239a:	4c 81       	ldd	r20, Y+4	; 0x04
    239c:	5d 81       	ldd	r21, Y+5	; 0x05
    239e:	41 30       	cpi	r20, 0x01	; 1
    23a0:	51 05       	cpc	r21, r1
    23a2:	79 f1       	breq	.+94     	; 0x2402 <GPIO_readPin+0x96>
    23a4:	8c 81       	ldd	r24, Y+4	; 0x04
    23a6:	9d 81       	ldd	r25, Y+5	; 0x05
    23a8:	82 30       	cpi	r24, 0x02	; 2
    23aa:	91 05       	cpc	r25, r1
    23ac:	34 f4       	brge	.+12     	; 0x23ba <GPIO_readPin+0x4e>
    23ae:	2c 81       	ldd	r18, Y+4	; 0x04
    23b0:	3d 81       	ldd	r19, Y+5	; 0x05
    23b2:	21 15       	cp	r18, r1
    23b4:	31 05       	cpc	r19, r1
    23b6:	69 f0       	breq	.+26     	; 0x23d2 <GPIO_readPin+0x66>
    23b8:	6b c0       	rjmp	.+214    	; 0x2490 <GPIO_readPin+0x124>
    23ba:	4c 81       	ldd	r20, Y+4	; 0x04
    23bc:	5d 81       	ldd	r21, Y+5	; 0x05
    23be:	42 30       	cpi	r20, 0x02	; 2
    23c0:	51 05       	cpc	r21, r1
    23c2:	b9 f1       	breq	.+110    	; 0x2432 <GPIO_readPin+0xc6>
    23c4:	8c 81       	ldd	r24, Y+4	; 0x04
    23c6:	9d 81       	ldd	r25, Y+5	; 0x05
    23c8:	83 30       	cpi	r24, 0x03	; 3
    23ca:	91 05       	cpc	r25, r1
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <GPIO_readPin+0x64>
    23ce:	49 c0       	rjmp	.+146    	; 0x2462 <GPIO_readPin+0xf6>
    23d0:	5f c0       	rjmp	.+190    	; 0x2490 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    23d2:	e9 e3       	ldi	r30, 0x39	; 57
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a9 01       	movw	r20, r18
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <GPIO_readPin+0x7e>
    23e6:	55 95       	asr	r21
    23e8:	47 95       	ror	r20
    23ea:	8a 95       	dec	r24
    23ec:	e2 f7       	brpl	.-8      	; 0x23e6 <GPIO_readPin+0x7a>
    23ee:	ca 01       	movw	r24, r20
    23f0:	81 70       	andi	r24, 0x01	; 1
    23f2:	90 70       	andi	r25, 0x00	; 0
    23f4:	88 23       	and	r24, r24
    23f6:	19 f0       	breq	.+6      	; 0x23fe <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	49 c0       	rjmp	.+146    	; 0x2490 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    23fe:	19 82       	std	Y+1, r1	; 0x01
    2400:	47 c0       	rjmp	.+142    	; 0x2490 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2402:	e6 e3       	ldi	r30, 0x36	; 54
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	88 2f       	mov	r24, r24
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	a9 01       	movw	r20, r18
    2414:	02 c0       	rjmp	.+4      	; 0x241a <GPIO_readPin+0xae>
    2416:	55 95       	asr	r21
    2418:	47 95       	ror	r20
    241a:	8a 95       	dec	r24
    241c:	e2 f7       	brpl	.-8      	; 0x2416 <GPIO_readPin+0xaa>
    241e:	ca 01       	movw	r24, r20
    2420:	81 70       	andi	r24, 0x01	; 1
    2422:	90 70       	andi	r25, 0x00	; 0
    2424:	88 23       	and	r24, r24
    2426:	19 f0       	breq	.+6      	; 0x242e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	31 c0       	rjmp	.+98     	; 0x2490 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    242e:	19 82       	std	Y+1, r1	; 0x01
    2430:	2f c0       	rjmp	.+94     	; 0x2490 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2432:	e3 e3       	ldi	r30, 0x33	; 51
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	88 2f       	mov	r24, r24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a9 01       	movw	r20, r18
    2444:	02 c0       	rjmp	.+4      	; 0x244a <GPIO_readPin+0xde>
    2446:	55 95       	asr	r21
    2448:	47 95       	ror	r20
    244a:	8a 95       	dec	r24
    244c:	e2 f7       	brpl	.-8      	; 0x2446 <GPIO_readPin+0xda>
    244e:	ca 01       	movw	r24, r20
    2450:	81 70       	andi	r24, 0x01	; 1
    2452:	90 70       	andi	r25, 0x00	; 0
    2454:	88 23       	and	r24, r24
    2456:	19 f0       	breq	.+6      	; 0x245e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	19 c0       	rjmp	.+50     	; 0x2490 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    245e:	19 82       	std	Y+1, r1	; 0x01
    2460:	17 c0       	rjmp	.+46     	; 0x2490 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2462:	e0 e3       	ldi	r30, 0x30	; 48
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	88 2f       	mov	r24, r24
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	a9 01       	movw	r20, r18
    2474:	02 c0       	rjmp	.+4      	; 0x247a <GPIO_readPin+0x10e>
    2476:	55 95       	asr	r21
    2478:	47 95       	ror	r20
    247a:	8a 95       	dec	r24
    247c:	e2 f7       	brpl	.-8      	; 0x2476 <GPIO_readPin+0x10a>
    247e:	ca 01       	movw	r24, r20
    2480:	81 70       	andi	r24, 0x01	; 1
    2482:	90 70       	andi	r25, 0x00	; 0
    2484:	88 23       	and	r24, r24
    2486:	19 f0       	breq	.+6      	; 0x248e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	01 c0       	rjmp	.+2      	; 0x2490 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    248e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2490:	89 81       	ldd	r24, Y+1	; 0x01
}
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <GPIO_setupPortDirection+0x6>
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <GPIO_setupPortDirection+0x8>
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	84 30       	cpi	r24, 0x04	; 4
    24b6:	90 f5       	brcc	.+100    	; 0x251c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	3c 83       	std	Y+4, r19	; 0x04
    24c0:	2b 83       	std	Y+3, r18	; 0x03
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	9c 81       	ldd	r25, Y+4	; 0x04
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	91 05       	cpc	r25, r1
    24ca:	d1 f0       	breq	.+52     	; 0x2500 <GPIO_setupPortDirection+0x5e>
    24cc:	2b 81       	ldd	r18, Y+3	; 0x03
    24ce:	3c 81       	ldd	r19, Y+4	; 0x04
    24d0:	22 30       	cpi	r18, 0x02	; 2
    24d2:	31 05       	cpc	r19, r1
    24d4:	2c f4       	brge	.+10     	; 0x24e0 <GPIO_setupPortDirection+0x3e>
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	9c 81       	ldd	r25, Y+4	; 0x04
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	61 f0       	breq	.+24     	; 0x24f6 <GPIO_setupPortDirection+0x54>
    24de:	1e c0       	rjmp	.+60     	; 0x251c <GPIO_setupPortDirection+0x7a>
    24e0:	2b 81       	ldd	r18, Y+3	; 0x03
    24e2:	3c 81       	ldd	r19, Y+4	; 0x04
    24e4:	22 30       	cpi	r18, 0x02	; 2
    24e6:	31 05       	cpc	r19, r1
    24e8:	81 f0       	breq	.+32     	; 0x250a <GPIO_setupPortDirection+0x68>
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	83 30       	cpi	r24, 0x03	; 3
    24f0:	91 05       	cpc	r25, r1
    24f2:	81 f0       	breq	.+32     	; 0x2514 <GPIO_setupPortDirection+0x72>
    24f4:	13 c0       	rjmp	.+38     	; 0x251c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    24f6:	ea e3       	ldi	r30, 0x3A	; 58
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	80 83       	st	Z, r24
    24fe:	0e c0       	rjmp	.+28     	; 0x251c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2500:	e7 e3       	ldi	r30, 0x37	; 55
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	80 83       	st	Z, r24
    2508:	09 c0       	rjmp	.+18     	; 0x251c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    250a:	e4 e3       	ldi	r30, 0x34	; 52
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	80 83       	st	Z, r24
    2512:	04 c0       	rjmp	.+8      	; 0x251c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2514:	e1 e3       	ldi	r30, 0x31	; 49
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	80 83       	st	Z, r24
			break;
		}
	}
}
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	00 d0       	rcall	.+0      	; 0x2530 <GPIO_writePort+0x6>
    2530:	00 d0       	rcall	.+0      	; 0x2532 <GPIO_writePort+0x8>
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	84 30       	cpi	r24, 0x04	; 4
    253e:	90 f5       	brcc	.+100    	; 0x25a4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	3c 83       	std	Y+4, r19	; 0x04
    2548:	2b 83       	std	Y+3, r18	; 0x03
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	9c 81       	ldd	r25, Y+4	; 0x04
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	91 05       	cpc	r25, r1
    2552:	d1 f0       	breq	.+52     	; 0x2588 <GPIO_writePort+0x5e>
    2554:	2b 81       	ldd	r18, Y+3	; 0x03
    2556:	3c 81       	ldd	r19, Y+4	; 0x04
    2558:	22 30       	cpi	r18, 0x02	; 2
    255a:	31 05       	cpc	r19, r1
    255c:	2c f4       	brge	.+10     	; 0x2568 <GPIO_writePort+0x3e>
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	9c 81       	ldd	r25, Y+4	; 0x04
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	61 f0       	breq	.+24     	; 0x257e <GPIO_writePort+0x54>
    2566:	1e c0       	rjmp	.+60     	; 0x25a4 <GPIO_writePort+0x7a>
    2568:	2b 81       	ldd	r18, Y+3	; 0x03
    256a:	3c 81       	ldd	r19, Y+4	; 0x04
    256c:	22 30       	cpi	r18, 0x02	; 2
    256e:	31 05       	cpc	r19, r1
    2570:	81 f0       	breq	.+32     	; 0x2592 <GPIO_writePort+0x68>
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	9c 81       	ldd	r25, Y+4	; 0x04
    2576:	83 30       	cpi	r24, 0x03	; 3
    2578:	91 05       	cpc	r25, r1
    257a:	81 f0       	breq	.+32     	; 0x259c <GPIO_writePort+0x72>
    257c:	13 c0       	rjmp	.+38     	; 0x25a4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    257e:	eb e3       	ldi	r30, 0x3B	; 59
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	80 83       	st	Z, r24
    2586:	0e c0       	rjmp	.+28     	; 0x25a4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2588:	e8 e3       	ldi	r30, 0x38	; 56
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	80 83       	st	Z, r24
    2590:	09 c0       	rjmp	.+18     	; 0x25a4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2592:	e5 e3       	ldi	r30, 0x35	; 53
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	80 83       	st	Z, r24
    259a:	04 c0       	rjmp	.+8      	; 0x25a4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    259c:	e2 e3       	ldi	r30, 0x32	; 50
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	80 83       	st	Z, r24
			break;
		}
	}
}
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <GPIO_readPort+0x6>
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <GPIO_readPort+0x8>
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    25c0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	84 30       	cpi	r24, 0x04	; 4
    25c6:	90 f5       	brcc	.+100    	; 0x262c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	3c 83       	std	Y+4, r19	; 0x04
    25d0:	2b 83       	std	Y+3, r18	; 0x03
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	9c 81       	ldd	r25, Y+4	; 0x04
    25d6:	81 30       	cpi	r24, 0x01	; 1
    25d8:	91 05       	cpc	r25, r1
    25da:	d1 f0       	breq	.+52     	; 0x2610 <GPIO_readPort+0x5e>
    25dc:	2b 81       	ldd	r18, Y+3	; 0x03
    25de:	3c 81       	ldd	r19, Y+4	; 0x04
    25e0:	22 30       	cpi	r18, 0x02	; 2
    25e2:	31 05       	cpc	r19, r1
    25e4:	2c f4       	brge	.+10     	; 0x25f0 <GPIO_readPort+0x3e>
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	61 f0       	breq	.+24     	; 0x2606 <GPIO_readPort+0x54>
    25ee:	1e c0       	rjmp	.+60     	; 0x262c <GPIO_readPort+0x7a>
    25f0:	2b 81       	ldd	r18, Y+3	; 0x03
    25f2:	3c 81       	ldd	r19, Y+4	; 0x04
    25f4:	22 30       	cpi	r18, 0x02	; 2
    25f6:	31 05       	cpc	r19, r1
    25f8:	81 f0       	breq	.+32     	; 0x261a <GPIO_readPort+0x68>
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	83 30       	cpi	r24, 0x03	; 3
    2600:	91 05       	cpc	r25, r1
    2602:	81 f0       	breq	.+32     	; 0x2624 <GPIO_readPort+0x72>
    2604:	13 c0       	rjmp	.+38     	; 0x262c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2606:	e9 e3       	ldi	r30, 0x39	; 57
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	89 83       	std	Y+1, r24	; 0x01
    260e:	0e c0       	rjmp	.+28     	; 0x262c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2610:	e6 e3       	ldi	r30, 0x36	; 54
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	09 c0       	rjmp	.+18     	; 0x262c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    261a:	e3 e3       	ldi	r30, 0x33	; 51
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	04 c0       	rjmp	.+8      	; 0x262c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2624:	e0 e3       	ldi	r30, 0x30	; 48
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    262c:	89 81       	ldd	r24, Y+1	; 0x01
}
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <main>:
/*This variable holds the number of wrong entered pass */
unsigned int num_of_repeat = 0 ;



int main(){
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	6a 97       	sbiw	r28, 0x1a	; 26
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
	//This structure holds the properties of uart init.
	uart_ConfigType conifg_uart = {DISABLED , ONE_BIT , EIGHT_BIT , 9600};
    2650:	ce 01       	movw	r24, r28
    2652:	01 96       	adiw	r24, 0x01	; 1
    2654:	9a 8b       	std	Y+18, r25	; 0x12
    2656:	89 8b       	std	Y+17, r24	; 0x11
    2658:	e5 e7       	ldi	r30, 0x75	; 117
    265a:	f1 e0       	ldi	r31, 0x01	; 1
    265c:	fc 8b       	std	Y+20, r31	; 0x14
    265e:	eb 8b       	std	Y+19, r30	; 0x13
    2660:	f7 e0       	ldi	r31, 0x07	; 7
    2662:	fd 8b       	std	Y+21, r31	; 0x15
    2664:	eb 89       	ldd	r30, Y+19	; 0x13
    2666:	fc 89       	ldd	r31, Y+20	; 0x14
    2668:	00 80       	ld	r0, Z
    266a:	8b 89       	ldd	r24, Y+19	; 0x13
    266c:	9c 89       	ldd	r25, Y+20	; 0x14
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	9c 8b       	std	Y+20, r25	; 0x14
    2672:	8b 8b       	std	Y+19, r24	; 0x13
    2674:	e9 89       	ldd	r30, Y+17	; 0x11
    2676:	fa 89       	ldd	r31, Y+18	; 0x12
    2678:	00 82       	st	Z, r0
    267a:	89 89       	ldd	r24, Y+17	; 0x11
    267c:	9a 89       	ldd	r25, Y+18	; 0x12
    267e:	01 96       	adiw	r24, 0x01	; 1
    2680:	9a 8b       	std	Y+18, r25	; 0x12
    2682:	89 8b       	std	Y+17, r24	; 0x11
    2684:	9d 89       	ldd	r25, Y+21	; 0x15
    2686:	91 50       	subi	r25, 0x01	; 1
    2688:	9d 8b       	std	Y+21, r25	; 0x15
    268a:	ed 89       	ldd	r30, Y+21	; 0x15
    268c:	ee 23       	and	r30, r30
    268e:	51 f7       	brne	.-44     	; 0x2664 <main+0x28>
	UART_init(&conifg_uart);//Start init the uart
    2690:	ce 01       	movw	r24, r28
    2692:	01 96       	adiw	r24, 0x01	; 1
    2694:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <UART_init>
	//This structure holds the properties of i2c init.
	i2c_ConfigType config_i2c = {500000 , 0x01};
    2698:	ce 01       	movw	r24, r28
    269a:	08 96       	adiw	r24, 0x08	; 8
    269c:	9f 8b       	std	Y+23, r25	; 0x17
    269e:	8e 8b       	std	Y+22, r24	; 0x16
    26a0:	ec e6       	ldi	r30, 0x6C	; 108
    26a2:	f1 e0       	ldi	r31, 0x01	; 1
    26a4:	f9 8f       	std	Y+25, r31	; 0x19
    26a6:	e8 8f       	std	Y+24, r30	; 0x18
    26a8:	f9 e0       	ldi	r31, 0x09	; 9
    26aa:	fa 8f       	std	Y+26, r31	; 0x1a
    26ac:	e8 8d       	ldd	r30, Y+24	; 0x18
    26ae:	f9 8d       	ldd	r31, Y+25	; 0x19
    26b0:	00 80       	ld	r0, Z
    26b2:	88 8d       	ldd	r24, Y+24	; 0x18
    26b4:	99 8d       	ldd	r25, Y+25	; 0x19
    26b6:	01 96       	adiw	r24, 0x01	; 1
    26b8:	99 8f       	std	Y+25, r25	; 0x19
    26ba:	88 8f       	std	Y+24, r24	; 0x18
    26bc:	ee 89       	ldd	r30, Y+22	; 0x16
    26be:	ff 89       	ldd	r31, Y+23	; 0x17
    26c0:	00 82       	st	Z, r0
    26c2:	8e 89       	ldd	r24, Y+22	; 0x16
    26c4:	9f 89       	ldd	r25, Y+23	; 0x17
    26c6:	01 96       	adiw	r24, 0x01	; 1
    26c8:	9f 8b       	std	Y+23, r25	; 0x17
    26ca:	8e 8b       	std	Y+22, r24	; 0x16
    26cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26ce:	91 50       	subi	r25, 0x01	; 1
    26d0:	9a 8f       	std	Y+26, r25	; 0x1a
    26d2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    26d4:	ee 23       	and	r30, r30
    26d6:	51 f7       	brne	.-44     	; 0x26ac <main+0x70>
	TWI_init(&config_i2c);//Init the i2c
    26d8:	ce 01       	movw	r24, r28
    26da:	08 96       	adiw	r24, 0x08	; 8
    26dc:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <TWI_init>
	DcMotor_Init();//Dc motor init
    26e0:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <DcMotor_Init>
	SREG |= (1 << 7);//Enable global interrupts
    26e4:	af e5       	ldi	r26, 0x5F	; 95
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	ef e5       	ldi	r30, 0x5F	; 95
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	80 68       	ori	r24, 0x80	; 128
    26f0:	8c 93       	st	X, r24
	while(1){
		receive_pass(1);
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	0e 94 7d 13 	call	0x26fa	; 0x26fa <receive_pass>
    26f8:	fc cf       	rjmp	.-8      	; 0x26f2 <main+0xb6>

000026fa <receive_pass>:
 * params :
 * saveFlag : This flag decides wheather the pass should be saved in eeprom or not
 * saveFlag ==0 : Don't save in eeprom
 * saveFlag ==1 : Save the pass in eeprom
 */
void receive_pass(uint8 saveFlag){
    26fa:	0f 93       	push	r16
    26fc:	1f 93       	push	r17
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	00 d0       	rcall	.+0      	; 0x2704 <receive_pass+0xa>
    2704:	00 d0       	rcall	.+0      	; 0x2706 <receive_pass+0xc>
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	8c 83       	std	Y+4, r24	; 0x04
	 * state_flag == 0 : we want to control the door
	 * state_flag == 1 : we want to change password
	 * */
	uint8 state_flag ;
	/*This loop receives the password*/
	for(int i = 0 ; i< 5 ; i++){
    270c:	1a 82       	std	Y+2, r1	; 0x02
    270e:	19 82       	std	Y+1, r1	; 0x01
    2710:	0d c0       	rjmp	.+26     	; 0x272c <receive_pass+0x32>
		pass[i] = UART_recieveByte();
    2712:	09 81       	ldd	r16, Y+1	; 0x01
    2714:	1a 81       	ldd	r17, Y+2	; 0x02
    2716:	0e 94 79 18 	call	0x30f2	; 0x30f2 <UART_recieveByte>
    271a:	f8 01       	movw	r30, r16
    271c:	e7 57       	subi	r30, 0x77	; 119
    271e:	fe 4f       	sbci	r31, 0xFE	; 254
    2720:	80 83       	st	Z, r24
	 * state_flag == 0 : we want to control the door
	 * state_flag == 1 : we want to change password
	 * */
	uint8 state_flag ;
	/*This loop receives the password*/
	for(int i = 0 ; i< 5 ; i++){
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	9a 81       	ldd	r25, Y+2	; 0x02
    2726:	01 96       	adiw	r24, 0x01	; 1
    2728:	9a 83       	std	Y+2, r25	; 0x02
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	9a 81       	ldd	r25, Y+2	; 0x02
    2730:	85 30       	cpi	r24, 0x05	; 5
    2732:	91 05       	cpc	r25, r1
    2734:	74 f3       	brlt	.-36     	; 0x2712 <receive_pass+0x18>
		pass[i] = UART_recieveByte();
	}
	state_flag = UART_recieveByte();
    2736:	0e 94 79 18 	call	0x30f2	; 0x30f2 <UART_recieveByte>
    273a:	8b 83       	std	Y+3, r24	; 0x03
	if (saveFlag == 1){//To save the password in eeprom
    273c:	8c 81       	ldd	r24, Y+4	; 0x04
    273e:	81 30       	cpi	r24, 0x01	; 1
    2740:	19 f4       	brne	.+6      	; 0x2748 <receive_pass+0x4e>
		save_pass();
    2742:	0e 94 b8 13 	call	0x2770	; 0x2770 <save_pass>
    2746:	0b c0       	rjmp	.+22     	; 0x275e <receive_pass+0x64>
	}
	//if we don't want to save the password we just check
	else if(saveFlag == 0){
    2748:	8c 81       	ldd	r24, Y+4	; 0x04
    274a:	88 23       	and	r24, r24
    274c:	41 f4       	brne	.+16     	; 0x275e <receive_pass+0x64>
		//Check the pass with the stored one
		check_pass(pass, stored_pass , state_flag);
    274e:	89 e8       	ldi	r24, 0x89	; 137
    2750:	91 e0       	ldi	r25, 0x01	; 1
    2752:	2e e8       	ldi	r18, 0x8E	; 142
    2754:	31 e0       	ldi	r19, 0x01	; 1
    2756:	b9 01       	movw	r22, r18
    2758:	4b 81       	ldd	r20, Y+3	; 0x03
    275a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <check_pass>
	}
}
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	1f 91       	pop	r17
    276c:	0f 91       	pop	r16
    276e:	08 95       	ret

00002770 <save_pass>:
/*
 * Description :
 * This function saves in EEprom
 */
void save_pass(){
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	60 97       	sbiw	r28, 0x10	; 16
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
	/*This loop saves the password in EEprom*/
	for(int i = 0 ; i< 5 ; i++){
    2784:	18 8a       	std	Y+16, r1	; 0x10
    2786:	1f 86       	std	Y+15, r1	; 0x0f
    2788:	86 c0       	rjmp	.+268    	; 0x2896 <save_pass+0x126>
		EEPROM_writeByte(0x0311+i , pass[i]);//Save the password
    278a:	8f 85       	ldd	r24, Y+15	; 0x0f
    278c:	98 89       	ldd	r25, Y+16	; 0x10
    278e:	8f 5e       	subi	r24, 0xEF	; 239
    2790:	9c 4f       	sbci	r25, 0xFC	; 252
    2792:	9c 01       	movw	r18, r24
    2794:	8f 85       	ldd	r24, Y+15	; 0x0f
    2796:	98 89       	ldd	r25, Y+16	; 0x10
    2798:	fc 01       	movw	r30, r24
    279a:	e7 57       	subi	r30, 0x77	; 119
    279c:	fe 4f       	sbci	r31, 0xFE	; 254
    279e:	40 81       	ld	r20, Z
    27a0:	c9 01       	movw	r24, r18
    27a2:	64 2f       	mov	r22, r20
    27a4:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <EEPROM_writeByte>
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	a0 e2       	ldi	r26, 0x20	; 32
    27ae:	b1 e4       	ldi	r27, 0x41	; 65
    27b0:	8b 87       	std	Y+11, r24	; 0x0b
    27b2:	9c 87       	std	Y+12, r25	; 0x0c
    27b4:	ad 87       	std	Y+13, r26	; 0x0d
    27b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    27bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27be:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	4a ef       	ldi	r20, 0xFA	; 250
    27c6:	54 e4       	ldi	r21, 0x44	; 68
    27c8:	0e 94 47 0a 	call	0x148e	; 0x148e <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	8f 83       	std	Y+7, r24	; 0x07
    27d2:	98 87       	std	Y+8, r25	; 0x08
    27d4:	a9 87       	std	Y+9, r26	; 0x09
    27d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27d8:	6f 81       	ldd	r22, Y+7	; 0x07
    27da:	78 85       	ldd	r23, Y+8	; 0x08
    27dc:	89 85       	ldd	r24, Y+9	; 0x09
    27de:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e8       	ldi	r20, 0x80	; 128
    27e6:	5f e3       	ldi	r21, 0x3F	; 63
    27e8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__ltsf2>
    27ec:	88 23       	and	r24, r24
    27ee:	2c f4       	brge	.+10     	; 0x27fa <save_pass+0x8a>
		__ticks = 1;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	9e 83       	std	Y+6, r25	; 0x06
    27f6:	8d 83       	std	Y+5, r24	; 0x05
    27f8:	3f c0       	rjmp	.+126    	; 0x2878 <save_pass+0x108>
	else if (__tmp > 65535)
    27fa:	6f 81       	ldd	r22, Y+7	; 0x07
    27fc:	78 85       	ldd	r23, Y+8	; 0x08
    27fe:	89 85       	ldd	r24, Y+9	; 0x09
    2800:	9a 85       	ldd	r25, Y+10	; 0x0a
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	3f ef       	ldi	r19, 0xFF	; 255
    2806:	4f e7       	ldi	r20, 0x7F	; 127
    2808:	57 e4       	ldi	r21, 0x47	; 71
    280a:	0e 94 41 0b 	call	0x1682	; 0x1682 <__gtsf2>
    280e:	18 16       	cp	r1, r24
    2810:	4c f5       	brge	.+82     	; 0x2864 <save_pass+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2812:	6b 85       	ldd	r22, Y+11	; 0x0b
    2814:	7c 85       	ldd	r23, Y+12	; 0x0c
    2816:	8d 85       	ldd	r24, Y+13	; 0x0d
    2818:	9e 85       	ldd	r25, Y+14	; 0x0e
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	51 e4       	ldi	r21, 0x41	; 65
    2822:	0e 94 47 0a 	call	0x148e	; 0x148e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9e 83       	std	Y+6, r25	; 0x06
    2838:	8d 83       	std	Y+5, r24	; 0x05
    283a:	0f c0       	rjmp	.+30     	; 0x285a <save_pass+0xea>
    283c:	88 ec       	ldi	r24, 0xC8	; 200
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	9c 83       	std	Y+4, r25	; 0x04
    2842:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	9c 81       	ldd	r25, Y+4	; 0x04
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <save_pass+0xd8>
    284c:	9c 83       	std	Y+4, r25	; 0x04
    284e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2850:	8d 81       	ldd	r24, Y+5	; 0x05
    2852:	9e 81       	ldd	r25, Y+6	; 0x06
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	9e 83       	std	Y+6, r25	; 0x06
    2858:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285a:	8d 81       	ldd	r24, Y+5	; 0x05
    285c:	9e 81       	ldd	r25, Y+6	; 0x06
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	69 f7       	brne	.-38     	; 0x283c <save_pass+0xcc>
    2862:	14 c0       	rjmp	.+40     	; 0x288c <save_pass+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2864:	6f 81       	ldd	r22, Y+7	; 0x07
    2866:	78 85       	ldd	r23, Y+8	; 0x08
    2868:	89 85       	ldd	r24, Y+9	; 0x09
    286a:	9a 85       	ldd	r25, Y+10	; 0x0a
    286c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	9e 83       	std	Y+6, r25	; 0x06
    2876:	8d 83       	std	Y+5, r24	; 0x05
    2878:	8d 81       	ldd	r24, Y+5	; 0x05
    287a:	9e 81       	ldd	r25, Y+6	; 0x06
    287c:	9a 83       	std	Y+2, r25	; 0x02
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	9a 81       	ldd	r25, Y+2	; 0x02
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <save_pass+0x114>
    2888:	9a 83       	std	Y+2, r25	; 0x02
    288a:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * This function saves in EEprom
 */
void save_pass(){
	/*This loop saves the password in EEprom*/
	for(int i = 0 ; i< 5 ; i++){
    288c:	8f 85       	ldd	r24, Y+15	; 0x0f
    288e:	98 89       	ldd	r25, Y+16	; 0x10
    2890:	01 96       	adiw	r24, 0x01	; 1
    2892:	98 8b       	std	Y+16, r25	; 0x10
    2894:	8f 87       	std	Y+15, r24	; 0x0f
    2896:	8f 85       	ldd	r24, Y+15	; 0x0f
    2898:	98 89       	ldd	r25, Y+16	; 0x10
    289a:	85 30       	cpi	r24, 0x05	; 5
    289c:	91 05       	cpc	r25, r1
    289e:	0c f4       	brge	.+2      	; 0x28a2 <save_pass+0x132>
    28a0:	74 cf       	rjmp	.-280    	; 0x278a <save_pass+0x1a>
		EEPROM_writeByte(0x0311+i , pass[i]);//Save the password
		_delay_ms(10);
	}
	read_pass();
    28a2:	0e 94 5f 14 	call	0x28be	; 0x28be <read_pass>
	receive_pass(0);
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	0e 94 7d 13 	call	0x26fa	; 0x26fa <receive_pass>
}
    28ac:	60 96       	adiw	r28, 0x10	; 16
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cd bf       	out	0x3d, r28	; 61
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <read_pass>:
/*
 * Description :
 * This function reads the password saved in eeprom
 */
void read_pass(){
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	60 97       	sbiw	r28, 0x10	; 16
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
	for(int i = 0 ; i< 5 ; i++){
    28d2:	18 8a       	std	Y+16, r1	; 0x10
    28d4:	1f 86       	std	Y+15, r1	; 0x0f
    28d6:	85 c0       	rjmp	.+266    	; 0x29e2 <read_pass+0x124>
		EEPROM_readByte(0x0311+i , stored_pass + i);
    28d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28da:	98 89       	ldd	r25, Y+16	; 0x10
    28dc:	8f 5e       	subi	r24, 0xEF	; 239
    28de:	9c 4f       	sbci	r25, 0xFC	; 252
    28e0:	ac 01       	movw	r20, r24
    28e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e4:	98 89       	ldd	r25, Y+16	; 0x10
    28e6:	9c 01       	movw	r18, r24
    28e8:	22 57       	subi	r18, 0x72	; 114
    28ea:	3e 4f       	sbci	r19, 0xFE	; 254
    28ec:	ca 01       	movw	r24, r20
    28ee:	b9 01       	movw	r22, r18
    28f0:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <EEPROM_readByte>
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	a0 e2       	ldi	r26, 0x20	; 32
    28fa:	b1 e4       	ldi	r27, 0x41	; 65
    28fc:	8b 87       	std	Y+11, r24	; 0x0b
    28fe:	9c 87       	std	Y+12, r25	; 0x0c
    2900:	ad 87       	std	Y+13, r26	; 0x0d
    2902:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2904:	6b 85       	ldd	r22, Y+11	; 0x0b
    2906:	7c 85       	ldd	r23, Y+12	; 0x0c
    2908:	8d 85       	ldd	r24, Y+13	; 0x0d
    290a:	9e 85       	ldd	r25, Y+14	; 0x0e
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	4a ef       	ldi	r20, 0xFA	; 250
    2912:	54 e4       	ldi	r21, 0x44	; 68
    2914:	0e 94 47 0a 	call	0x148e	; 0x148e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	8f 83       	std	Y+7, r24	; 0x07
    291e:	98 87       	std	Y+8, r25	; 0x08
    2920:	a9 87       	std	Y+9, r26	; 0x09
    2922:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2924:	6f 81       	ldd	r22, Y+7	; 0x07
    2926:	78 85       	ldd	r23, Y+8	; 0x08
    2928:	89 85       	ldd	r24, Y+9	; 0x09
    292a:	9a 85       	ldd	r25, Y+10	; 0x0a
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e8       	ldi	r20, 0x80	; 128
    2932:	5f e3       	ldi	r21, 0x3F	; 63
    2934:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__ltsf2>
    2938:	88 23       	and	r24, r24
    293a:	2c f4       	brge	.+10     	; 0x2946 <read_pass+0x88>
		__ticks = 1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9e 83       	std	Y+6, r25	; 0x06
    2942:	8d 83       	std	Y+5, r24	; 0x05
    2944:	3f c0       	rjmp	.+126    	; 0x29c4 <read_pass+0x106>
	else if (__tmp > 65535)
    2946:	6f 81       	ldd	r22, Y+7	; 0x07
    2948:	78 85       	ldd	r23, Y+8	; 0x08
    294a:	89 85       	ldd	r24, Y+9	; 0x09
    294c:	9a 85       	ldd	r25, Y+10	; 0x0a
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	3f ef       	ldi	r19, 0xFF	; 255
    2952:	4f e7       	ldi	r20, 0x7F	; 127
    2954:	57 e4       	ldi	r21, 0x47	; 71
    2956:	0e 94 41 0b 	call	0x1682	; 0x1682 <__gtsf2>
    295a:	18 16       	cp	r1, r24
    295c:	4c f5       	brge	.+82     	; 0x29b0 <read_pass+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2960:	7c 85       	ldd	r23, Y+12	; 0x0c
    2962:	8d 85       	ldd	r24, Y+13	; 0x0d
    2964:	9e 85       	ldd	r25, Y+14	; 0x0e
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e2       	ldi	r20, 0x20	; 32
    296c:	51 e4       	ldi	r21, 0x41	; 65
    296e:	0e 94 47 0a 	call	0x148e	; 0x148e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	bc 01       	movw	r22, r24
    2978:	cd 01       	movw	r24, r26
    297a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <read_pass+0xe8>
    2988:	88 ec       	ldi	r24, 0xC8	; 200
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	9c 83       	std	Y+4, r25	; 0x04
    298e:	8b 83       	std	Y+3, r24	; 0x03
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	9c 81       	ldd	r25, Y+4	; 0x04
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <read_pass+0xd6>
    2998:	9c 83       	std	Y+4, r25	; 0x04
    299a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
    299e:	9e 81       	ldd	r25, Y+6	; 0x06
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a6:	8d 81       	ldd	r24, Y+5	; 0x05
    29a8:	9e 81       	ldd	r25, Y+6	; 0x06
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	69 f7       	brne	.-38     	; 0x2988 <read_pass+0xca>
    29ae:	14 c0       	rjmp	.+40     	; 0x29d8 <read_pass+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b0:	6f 81       	ldd	r22, Y+7	; 0x07
    29b2:	78 85       	ldd	r23, Y+8	; 0x08
    29b4:	89 85       	ldd	r24, Y+9	; 0x09
    29b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9e 83       	std	Y+6, r25	; 0x06
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	8d 81       	ldd	r24, Y+5	; 0x05
    29c6:	9e 81       	ldd	r25, Y+6	; 0x06
    29c8:	9a 83       	std	Y+2, r25	; 0x02
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	9a 81       	ldd	r25, Y+2	; 0x02
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <read_pass+0x112>
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description :
 * This function reads the password saved in eeprom
 */
void read_pass(){
	for(int i = 0 ; i< 5 ; i++){
    29d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29da:	98 89       	ldd	r25, Y+16	; 0x10
    29dc:	01 96       	adiw	r24, 0x01	; 1
    29de:	98 8b       	std	Y+16, r25	; 0x10
    29e0:	8f 87       	std	Y+15, r24	; 0x0f
    29e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e4:	98 89       	ldd	r25, Y+16	; 0x10
    29e6:	85 30       	cpi	r24, 0x05	; 5
    29e8:	91 05       	cpc	r25, r1
    29ea:	0c f4       	brge	.+2      	; 0x29ee <read_pass+0x130>
    29ec:	75 cf       	rjmp	.-278    	; 0x28d8 <read_pass+0x1a>
		EEPROM_readByte(0x0311+i , stored_pass + i);
		_delay_ms(10);
	}
}
    29ee:	60 96       	adiw	r28, 0x10	; 16
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	08 95       	ret

00002a00 <check_pass>:
 * state_flag :this variable deciedes the next state
 *state_flag == 0 : we want to control the door
 *state_flag == 1 : we want to change password
 *
 */
void check_pass(uint8 *pass1 , uint8 *pass2 , uint8 state_flag){
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	28 97       	sbiw	r28, 0x08	; 8
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	9d 83       	std	Y+5, r25	; 0x05
    2a16:	8c 83       	std	Y+4, r24	; 0x04
    2a18:	7f 83       	std	Y+7, r23	; 0x07
    2a1a:	6e 83       	std	Y+6, r22	; 0x06
    2a1c:	48 87       	std	Y+8, r20	; 0x08
	uint8 is_matched = 0 ;
    2a1e:	1b 82       	std	Y+3, r1	; 0x03
	for(int i = 0 ; i<5 ; i++){
    2a20:	1a 82       	std	Y+2, r1	; 0x02
    2a22:	19 82       	std	Y+1, r1	; 0x01
    2a24:	19 c0       	rjmp	.+50     	; 0x2a58 <check_pass+0x58>
		if(pass1[i] != pass2[i]){
    2a26:	29 81       	ldd	r18, Y+1	; 0x01
    2a28:	3a 81       	ldd	r19, Y+2	; 0x02
    2a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2e:	fc 01       	movw	r30, r24
    2a30:	e2 0f       	add	r30, r18
    2a32:	f3 1f       	adc	r31, r19
    2a34:	40 81       	ld	r20, Z
    2a36:	29 81       	ldd	r18, Y+1	; 0x01
    2a38:	3a 81       	ldd	r19, Y+2	; 0x02
    2a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a3e:	fc 01       	movw	r30, r24
    2a40:	e2 0f       	add	r30, r18
    2a42:	f3 1f       	adc	r31, r19
    2a44:	80 81       	ld	r24, Z
    2a46:	48 17       	cp	r20, r24
    2a48:	11 f0       	breq	.+4      	; 0x2a4e <check_pass+0x4e>
			is_matched = 1 ;
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	8b 83       	std	Y+3, r24	; 0x03
 *state_flag == 1 : we want to change password
 *
 */
void check_pass(uint8 *pass1 , uint8 *pass2 , uint8 state_flag){
	uint8 is_matched = 0 ;
	for(int i = 0 ; i<5 ; i++){
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5c:	85 30       	cpi	r24, 0x05	; 5
    2a5e:	91 05       	cpc	r25, r1
    2a60:	14 f3       	brlt	.-60     	; 0x2a26 <check_pass+0x26>
		if(pass1[i] != pass2[i]){
			is_matched = 1 ;
		}
	}
	//If the passwords didn't match
	if (is_matched){
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	88 23       	and	r24, r24
    2a66:	09 f1       	breq	.+66     	; 0x2aaa <check_pass+0xaa>
		num_of_repeat++ ;
    2a68:	80 91 85 01 	lds	r24, 0x0185
    2a6c:	90 91 86 01 	lds	r25, 0x0186
    2a70:	01 96       	adiw	r24, 0x01	; 1
    2a72:	90 93 86 01 	sts	0x0186, r25
    2a76:	80 93 85 01 	sts	0x0185, r24
		if(num_of_repeat == 3){
    2a7a:	80 91 85 01 	lds	r24, 0x0185
    2a7e:	90 91 86 01 	lds	r25, 0x0186
    2a82:	83 30       	cpi	r24, 0x03	; 3
    2a84:	91 05       	cpc	r25, r1
    2a86:	51 f4       	brne	.+20     	; 0x2a9c <check_pass+0x9c>
			//reset num_of_repeat
			num_of_repeat = 0;
    2a88:	10 92 86 01 	sts	0x0186, r1
    2a8c:	10 92 85 01 	sts	0x0185, r1
			//Tells mc1 that there is a thief
			UART_sendByte(3);
    2a90:	83 e0       	ldi	r24, 0x03	; 3
    2a92:	0e 94 62 18 	call	0x30c4	; 0x30c4 <UART_sendByte>
			//turn on the buzzer for 1 minute
			breakdown_state_buzzer();
    2a96:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <breakdown_state_buzzer>
    2a9a:	1a c0       	rjmp	.+52     	; 0x2ad0 <check_pass+0xd0>
		}
		else {
			UART_sendByte(is_matched);//Tells mc1 the result of checking
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	0e 94 62 18 	call	0x30c4	; 0x30c4 <UART_sendByte>
			receive_pass(0);//Go back to receive_pass again
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	0e 94 7d 13 	call	0x26fa	; 0x26fa <receive_pass>
    2aa8:	13 c0       	rjmp	.+38     	; 0x2ad0 <check_pass+0xd0>

		}

	}
	else{
		num_of_repeat = 0;
    2aaa:	10 92 86 01 	sts	0x0186, r1
    2aae:	10 92 85 01 	sts	0x0185, r1
		UART_sendByte(is_matched);//Tells mc1 the result of checking
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	0e 94 62 18 	call	0x30c4	; 0x30c4 <UART_sendByte>
		if(state_flag == 0){//Start door unlocking
    2ab8:	88 85       	ldd	r24, Y+8	; 0x08
    2aba:	88 23       	and	r24, r24
    2abc:	19 f4       	brne	.+6      	; 0x2ac4 <check_pass+0xc4>
			door_control();
    2abe:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <door_control>
    2ac2:	06 c0       	rjmp	.+12     	; 0x2ad0 <check_pass+0xd0>
		}
		else if(state_flag == 1) {
    2ac4:	88 85       	ldd	r24, Y+8	; 0x08
    2ac6:	81 30       	cpi	r24, 0x01	; 1
    2ac8:	19 f4       	brne	.+6      	; 0x2ad0 <check_pass+0xd0>
			//Go back to receive_pass (if the user wants to change pass)
			receive_pass(1);
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	0e 94 7d 13 	call	0x26fa	; 0x26fa <receive_pass>
		}
	}
}
    2ad0:	28 96       	adiw	r28, 0x08	; 8
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	08 95       	ret

00002ae2 <door_control>:
/*
 * Description:
 * This function simulates the door unlocking step
 */
void door_control(){
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
	TIMER0_init(&config);//Start the timer
    2aea:	88 e6       	ldi	r24, 0x68	; 104
    2aec:	91 e0       	ldi	r25, 0x01	; 1
    2aee:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <TIMER0_init>
	//Set the call back when an interrupts occur
	TIMER0_setCallBack(timer_normal_processing);
    2af2:	8b ed       	ldi	r24, 0xDB	; 219
    2af4:	95 e1       	ldi	r25, 0x15	; 21
    2af6:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <TIMER0_setCallBack>
	/*First parameter is the direction of rotating*/
	/* Second parameter is the speed of motor in precent*/
	DcMotor_Rotate(CLK_WISE , 30);//Move clk wise for 15 seconds
    2afa:	82 e0       	ldi	r24, 0x02	; 2
    2afc:	6e e1       	ldi	r22, 0x1E	; 30
    2afe:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DcMotor_Rotate>
	recieved_timer_val = UART_recieveByte();//recieve the timer0 state of mc1
    2b02:	0e 94 79 18 	call	0x30f2	; 0x30f2 <UART_recieveByte>
    2b06:	80 93 84 01 	sts	0x0184, r24
	while(!stop_open || recieved_timer_val != 1){};
    2b0a:	80 91 81 01 	lds	r24, 0x0181
    2b0e:	88 23       	and	r24, r24
    2b10:	e1 f3       	breq	.-8      	; 0x2b0a <door_control+0x28>
    2b12:	80 91 84 01 	lds	r24, 0x0184
    2b16:	81 30       	cpi	r24, 0x01	; 1
    2b18:	c1 f7       	brne	.-16     	; 0x2b0a <door_control+0x28>
	DcMotor_Rotate(STOP , 0);//Stop the motor for 3 seconds
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DcMotor_Rotate>
	recieved_timer_val = UART_recieveByte();
    2b22:	0e 94 79 18 	call	0x30f2	; 0x30f2 <UART_recieveByte>
    2b26:	80 93 84 01 	sts	0x0184, r24
	while(!stop_waiting || recieved_timer_val != 2){};
    2b2a:	80 91 82 01 	lds	r24, 0x0182
    2b2e:	88 23       	and	r24, r24
    2b30:	e1 f3       	breq	.-8      	; 0x2b2a <door_control+0x48>
    2b32:	80 91 84 01 	lds	r24, 0x0184
    2b36:	82 30       	cpi	r24, 0x02	; 2
    2b38:	c1 f7       	brne	.-16     	; 0x2b2a <door_control+0x48>
	DcMotor_Rotate(ANTI_CLK_WISE , 30);//Move anti clk wise for 15 seconds
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	6e e1       	ldi	r22, 0x1E	; 30
    2b3e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DcMotor_Rotate>
	recieved_timer_val = UART_recieveByte();
    2b42:	0e 94 79 18 	call	0x30f2	; 0x30f2 <UART_recieveByte>
    2b46:	80 93 84 01 	sts	0x0184, r24
	while(!stop_close || recieved_timer_val != 3){};
    2b4a:	80 91 83 01 	lds	r24, 0x0183
    2b4e:	88 23       	and	r24, r24
    2b50:	e1 f3       	breq	.-8      	; 0x2b4a <door_control+0x68>
    2b52:	80 91 84 01 	lds	r24, 0x0184
    2b56:	83 30       	cpi	r24, 0x03	; 3
    2b58:	c1 f7       	brne	.-16     	; 0x2b4a <door_control+0x68>
	DcMotor_Rotate(STOP , 0);
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	60 e0       	ldi	r22, 0x00	; 0
    2b5e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DcMotor_Rotate>
	//Reset all flags to use again
	stop_open = 0 ;
    2b62:	10 92 81 01 	sts	0x0181, r1
	stop_waiting = 0 ;
    2b66:	10 92 82 01 	sts	0x0182, r1
	stop_close = 0 ;
    2b6a:	10 92 83 01 	sts	0x0183, r1
	//Go back to state of recieving pass
	receive_pass(0);
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	0e 94 7d 13 	call	0x26fa	; 0x26fa <receive_pass>

}
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	08 95       	ret

00002b7a <breakdown_state_buzzer>:

void breakdown_state_buzzer(){
    2b7a:	df 93       	push	r29
    2b7c:	cf 93       	push	r28
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
	TIMER0_init(&config);//Start the timer
    2b82:	88 e6       	ldi	r24, 0x68	; 104
    2b84:	91 e0       	ldi	r25, 0x01	; 1
    2b86:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <TIMER0_init>
	//Set the call back when an interrupts occur
	TIMER0_setCallBack(timer_normal_processing_error_mc2);
    2b8a:	84 e1       	ldi	r24, 0x14	; 20
    2b8c:	96 e1       	ldi	r25, 0x16	; 22
    2b8e:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <TIMER0_setCallBack>
	BUZZER_init();//Init the buzzer
    2b92:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <BUZZER_init>
	BUZZER_on();//Start the buzzer
    2b96:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <BUZZER_on>
	while(!err_stop){}//wait until 1 minute pass
    2b9a:	80 91 80 01 	lds	r24, 0x0180
    2b9e:	88 23       	and	r24, r24
    2ba0:	e1 f3       	breq	.-8      	; 0x2b9a <breakdown_state_buzzer+0x20>
	BUZZER_off();//close the buzzer
    2ba2:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <BUZZER_off>
	err_stop = 0 ;//reset the flag
    2ba6:	10 92 80 01 	sts	0x0180, r1
	receive_pass(0);	//Go back to state of recieving pass
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	0e 94 7d 13 	call	0x26fa	; 0x26fa <receive_pass>

}
    2bb0:	cf 91       	pop	r28
    2bb2:	df 91       	pop	r29
    2bb4:	08 95       	ret

00002bb6 <timer_normal_processing>:
/*
 * Description :
 * This function is the callback when isr happens during locking and unlocking the door
 */
void timer_normal_processing(){
    2bb6:	df 93       	push	r29
    2bb8:	cf 93       	push	r28
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
	timer_flag++;//Increment the flag for the ticks
    2bbe:	80 91 7c 01 	lds	r24, 0x017C
    2bc2:	90 91 7d 01 	lds	r25, 0x017D
    2bc6:	01 96       	adiw	r24, 0x01	; 1
    2bc8:	90 93 7d 01 	sts	0x017D, r25
    2bcc:	80 93 7c 01 	sts	0x017C, r24
	//This condition means that 15 seconds passed
	if(timer_flag == 465){
    2bd0:	80 91 7c 01 	lds	r24, 0x017C
    2bd4:	90 91 7d 01 	lds	r25, 0x017D
    2bd8:	21 e0       	ldi	r18, 0x01	; 1
    2bda:	81 3d       	cpi	r24, 0xD1	; 209
    2bdc:	92 07       	cpc	r25, r18
    2bde:	21 f4       	brne	.+8      	; 0x2be8 <timer_normal_processing+0x32>
		stop_open = 1 ;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	80 93 81 01 	sts	0x0181, r24
    2be6:	1d c0       	rjmp	.+58     	; 0x2c22 <timer_normal_processing+0x6c>
	}
	//This condition means that 3 seconds passed
	else if(timer_flag == 555){
    2be8:	80 91 7c 01 	lds	r24, 0x017C
    2bec:	90 91 7d 01 	lds	r25, 0x017D
    2bf0:	22 e0       	ldi	r18, 0x02	; 2
    2bf2:	8b 32       	cpi	r24, 0x2B	; 43
    2bf4:	92 07       	cpc	r25, r18
    2bf6:	21 f4       	brne	.+8      	; 0x2c00 <timer_normal_processing+0x4a>
		stop_waiting = 1 ;
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	80 93 82 01 	sts	0x0182, r24
    2bfe:	11 c0       	rjmp	.+34     	; 0x2c22 <timer_normal_processing+0x6c>
	}
	//This condition means that 15 seconds passed
	else if (timer_flag == 1015){
    2c00:	80 91 7c 01 	lds	r24, 0x017C
    2c04:	90 91 7d 01 	lds	r25, 0x017D
    2c08:	23 e0       	ldi	r18, 0x03	; 3
    2c0a:	87 3f       	cpi	r24, 0xF7	; 247
    2c0c:	92 07       	cpc	r25, r18
    2c0e:	49 f4       	brne	.+18     	; 0x2c22 <timer_normal_processing+0x6c>
		stop_close = 1;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	80 93 83 01 	sts	0x0183, r24
		timer_flag = 0;//Reset the timer flag
    2c16:	10 92 7d 01 	sts	0x017D, r1
    2c1a:	10 92 7c 01 	sts	0x017C, r1
		TIMER0_Deinit();//Reset the timer
    2c1e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <TIMER0_Deinit>
	}
}
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <timer_normal_processing_error_mc2>:
/*
 * Description :
 * This function is the callback when isr happens during the err message
 */
void timer_normal_processing_error_mc2(){
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
	timer_error_flag++ ;
    2c30:	80 91 7e 01 	lds	r24, 0x017E
    2c34:	90 91 7f 01 	lds	r25, 0x017F
    2c38:	01 96       	adiw	r24, 0x01	; 1
    2c3a:	90 93 7f 01 	sts	0x017F, r25
    2c3e:	80 93 7e 01 	sts	0x017E, r24
	//One minute passed
	if(timer_error_flag == 1830){
    2c42:	80 91 7e 01 	lds	r24, 0x017E
    2c46:	90 91 7f 01 	lds	r25, 0x017F
    2c4a:	27 e0       	ldi	r18, 0x07	; 7
    2c4c:	86 32       	cpi	r24, 0x26	; 38
    2c4e:	92 07       	cpc	r25, r18
    2c50:	49 f4       	brne	.+18     	; 0x2c64 <timer_normal_processing_error_mc2+0x3c>
		err_stop = 1 ;
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	80 93 80 01 	sts	0x0180, r24
		timer_error_flag = 0 ;//Reset the timer err flag
    2c58:	10 92 7f 01 	sts	0x017F, r1
    2c5c:	10 92 7e 01 	sts	0x017E, r1
		TIMER0_Deinit();//Reset the timer
    2c60:	0e 94 d5 16 	call	0x2daa	; 0x2daa <TIMER0_Deinit>
	}
}
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2c6a:	1f 92       	push	r1
    2c6c:	0f 92       	push	r0
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	0f 92       	push	r0
    2c72:	11 24       	eor	r1, r1
    2c74:	2f 93       	push	r18
    2c76:	3f 93       	push	r19
    2c78:	4f 93       	push	r20
    2c7a:	5f 93       	push	r21
    2c7c:	6f 93       	push	r22
    2c7e:	7f 93       	push	r23
    2c80:	8f 93       	push	r24
    2c82:	9f 93       	push	r25
    2c84:	af 93       	push	r26
    2c86:	bf 93       	push	r27
    2c88:	ef 93       	push	r30
    2c8a:	ff 93       	push	r31
    2c8c:	df 93       	push	r29
    2c8e:	cf 93       	push	r28
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2c94:	80 91 87 01 	lds	r24, 0x0187
    2c98:	90 91 88 01 	lds	r25, 0x0188
    2c9c:	00 97       	sbiw	r24, 0x00	; 0
    2c9e:	29 f0       	breq	.+10     	; 0x2caa <__vector_9+0x40>
	{
		/* Call the Call Back function in the application*/
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2ca0:	e0 91 87 01 	lds	r30, 0x0187
    2ca4:	f0 91 88 01 	lds	r31, 0x0188
    2ca8:	09 95       	icall
	}

}
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	ff 91       	pop	r31
    2cb0:	ef 91       	pop	r30
    2cb2:	bf 91       	pop	r27
    2cb4:	af 91       	pop	r26
    2cb6:	9f 91       	pop	r25
    2cb8:	8f 91       	pop	r24
    2cba:	7f 91       	pop	r23
    2cbc:	6f 91       	pop	r22
    2cbe:	5f 91       	pop	r21
    2cc0:	4f 91       	pop	r20
    2cc2:	3f 91       	pop	r19
    2cc4:	2f 91       	pop	r18
    2cc6:	0f 90       	pop	r0
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	0f 90       	pop	r0
    2ccc:	1f 90       	pop	r1
    2cce:	18 95       	reti

00002cd0 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    2cd0:	1f 92       	push	r1
    2cd2:	0f 92       	push	r0
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	0f 92       	push	r0
    2cd8:	11 24       	eor	r1, r1
    2cda:	2f 93       	push	r18
    2cdc:	3f 93       	push	r19
    2cde:	4f 93       	push	r20
    2ce0:	5f 93       	push	r21
    2ce2:	6f 93       	push	r22
    2ce4:	7f 93       	push	r23
    2ce6:	8f 93       	push	r24
    2ce8:	9f 93       	push	r25
    2cea:	af 93       	push	r26
    2cec:	bf 93       	push	r27
    2cee:	ef 93       	push	r30
    2cf0:	ff 93       	push	r31
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2cfa:	80 91 87 01 	lds	r24, 0x0187
    2cfe:	90 91 88 01 	lds	r25, 0x0188
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	29 f0       	breq	.+10     	; 0x2d10 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application*/
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2d06:	e0 91 87 01 	lds	r30, 0x0187
    2d0a:	f0 91 88 01 	lds	r31, 0x0188
    2d0e:	09 95       	icall
	}

}
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	ff 91       	pop	r31
    2d16:	ef 91       	pop	r30
    2d18:	bf 91       	pop	r27
    2d1a:	af 91       	pop	r26
    2d1c:	9f 91       	pop	r25
    2d1e:	8f 91       	pop	r24
    2d20:	7f 91       	pop	r23
    2d22:	6f 91       	pop	r22
    2d24:	5f 91       	pop	r21
    2d26:	4f 91       	pop	r20
    2d28:	3f 91       	pop	r19
    2d2a:	2f 91       	pop	r18
    2d2c:	0f 90       	pop	r0
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	0f 90       	pop	r0
    2d32:	1f 90       	pop	r1
    2d34:	18 95       	reti

00002d36 <TIMER0_init>:

/*
 * Description : This function is used to initialize the timer0
 * params : The structure with the initialize specifications
 */
void TIMER0_init(timer0_config *config_ptr){
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	00 d0       	rcall	.+0      	; 0x2d3c <TIMER0_init+0x6>
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    2d40:	9a 83       	std	Y+2, r25	; 0x02
    2d42:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = config_ptr->init_val; /* Set Timer initial value to 0 */
    2d44:	a2 e5       	ldi	r26, 0x52	; 82
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4c:	80 81       	ld	r24, Z
    2d4e:	8c 93       	st	X, r24
	TCCR0 |= (1<<FOC0) ; /* non-pwm mode */
    2d50:	a3 e5       	ldi	r26, 0x53	; 83
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	e3 e5       	ldi	r30, 0x53	; 83
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	80 68       	ori	r24, 0x80	; 128
    2d5c:	8c 93       	st	X, r24
	if (config_ptr->mode == NORMAL){
    2d5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d60:	fa 81       	ldd	r31, Y+2	; 0x02
    2d62:	81 81       	ldd	r24, Z+1	; 0x01
    2d64:	88 23       	and	r24, r24
    2d66:	29 f4       	brne	.+10     	; 0x2d72 <TIMER0_init+0x3c>
		TIMSK = (1<<TOIE0); /* Enable Timer0 Overflow Interrupt */
    2d68:	e9 e5       	ldi	r30, 0x59	; 89
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	80 83       	st	Z, r24
    2d70:	0a c0       	rjmp	.+20     	; 0x2d86 <TIMER0_init+0x50>
	}
	else {
		TIMSK = (1 << OCIE0);/* Enable Timer0 compare mode Interrupt */
    2d72:	e9 e5       	ldi	r30, 0x59	; 89
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	82 e0       	ldi	r24, 0x02	; 2
    2d78:	80 83       	st	Z, r24
		OCR0 = config_ptr->comp_val ;
    2d7a:	ac e5       	ldi	r26, 0x5C	; 92
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d80:	fa 81       	ldd	r31, Y+2	; 0x02
    2d82:	82 81       	ldd	r24, Z+2	; 0x02
    2d84:	8c 93       	st	X, r24
	}
	TCCR0 = (TCCR0 & 0xF8) | (config_ptr->prescaler & 0x07); /*Set the prescaler in first 3 bits of TCCR0*/
    2d86:	a3 e5       	ldi	r26, 0x53	; 83
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e3 e5       	ldi	r30, 0x53	; 83
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	98 2f       	mov	r25, r24
    2d92:	98 7f       	andi	r25, 0xF8	; 248
    2d94:	e9 81       	ldd	r30, Y+1	; 0x01
    2d96:	fa 81       	ldd	r31, Y+2	; 0x02
    2d98:	83 81       	ldd	r24, Z+3	; 0x03
    2d9a:	87 70       	andi	r24, 0x07	; 7
    2d9c:	89 2b       	or	r24, r25
    2d9e:	8c 93       	st	X, r24

}
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <TIMER0_Deinit>:

/*
 * Description : This function is used to deinit the timer0
 * params : none
 */
void TIMER0_Deinit(){
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0 ;
    2db2:	e2 e5       	ldi	r30, 0x52	; 82
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	10 82       	st	Z, r1
	OCR0 = 0;
    2db8:	ec e5       	ldi	r30, 0x5C	; 92
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	10 82       	st	Z, r1
	TIMSK = 0 ;
    2dbe:	e9 e5       	ldi	r30, 0x59	; 89
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	10 82       	st	Z, r1
	TCCR0 = 0;
    2dc4:	e3 e5       	ldi	r30, 0x53	; 83
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	10 82       	st	Z, r1
}
    2dca:	cf 91       	pop	r28
    2dcc:	df 91       	pop	r29
    2dce:	08 95       	ret

00002dd0 <TIMER0_setCallBack>:

/*
 * Description : This function is used to set the call back which is going to be implemented in the ISR
 * params : address the function that would be implemented in ISR
 */
void TIMER0_setCallBack(void(*a_ptr)(void)){
    2dd0:	df 93       	push	r29
    2dd2:	cf 93       	push	r28
    2dd4:	00 d0       	rcall	.+0      	; 0x2dd6 <TIMER0_setCallBack+0x6>
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	9a 83       	std	Y+2, r25	; 0x02
    2ddc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	9a 81       	ldd	r25, Y+2	; 0x02
    2de2:	90 93 88 01 	sts	0x0188, r25
    2de6:	80 93 87 01 	sts	0x0187, r24
}
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	08 95       	ret

00002df4 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(i2c_ConfigType *config_ptr)
{
    2df4:	2f 92       	push	r2
    2df6:	3f 92       	push	r3
    2df8:	4f 92       	push	r4
    2dfa:	5f 92       	push	r5
    2dfc:	6f 92       	push	r6
    2dfe:	7f 92       	push	r7
    2e00:	8f 92       	push	r8
    2e02:	9f 92       	push	r9
    2e04:	af 92       	push	r10
    2e06:	bf 92       	push	r11
    2e08:	cf 92       	push	r12
    2e0a:	df 92       	push	r13
    2e0c:	ef 92       	push	r14
    2e0e:	ff 92       	push	r15
    2e10:	0f 93       	push	r16
    2e12:	1f 93       	push	r17
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <TWI_init+0x26>
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <TWI_init+0x28>
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	9a 83       	std	Y+2, r25	; 0x02
    2e22:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate */
    TWBR = (uint8)(1000000/config_ptr->bit_rate - 2);
    2e24:	80 e2       	ldi	r24, 0x20	; 32
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	9c 83       	std	Y+4, r25	; 0x04
    2e2a:	8b 83       	std	Y+3, r24	; 0x03
    2e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e30:	20 80       	ld	r2, Z
    2e32:	31 80       	ldd	r3, Z+1	; 0x01
    2e34:	42 80       	ldd	r4, Z+2	; 0x02
    2e36:	53 80       	ldd	r5, Z+3	; 0x03
    2e38:	64 80       	ldd	r6, Z+4	; 0x04
    2e3a:	75 80       	ldd	r7, Z+5	; 0x05
    2e3c:	86 80       	ldd	r8, Z+6	; 0x06
    2e3e:	97 80       	ldd	r9, Z+7	; 0x07
    2e40:	20 e4       	ldi	r18, 0x40	; 64
    2e42:	32 e4       	ldi	r19, 0x42	; 66
    2e44:	4f e0       	ldi	r20, 0x0F	; 15
    2e46:	50 e0       	ldi	r21, 0x00	; 0
    2e48:	60 e0       	ldi	r22, 0x00	; 0
    2e4a:	70 e0       	ldi	r23, 0x00	; 0
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	a2 2c       	mov	r10, r2
    2e52:	b3 2c       	mov	r11, r3
    2e54:	c4 2c       	mov	r12, r4
    2e56:	d5 2c       	mov	r13, r5
    2e58:	e6 2c       	mov	r14, r6
    2e5a:	f7 2c       	mov	r15, r7
    2e5c:	08 2d       	mov	r16, r8
    2e5e:	19 2d       	mov	r17, r9
    2e60:	0e 94 75 00 	call	0xea	; 0xea <__divdi3>
    2e64:	a2 2e       	mov	r10, r18
    2e66:	b3 2e       	mov	r11, r19
    2e68:	c4 2e       	mov	r12, r20
    2e6a:	d5 2e       	mov	r13, r21
    2e6c:	e6 2e       	mov	r14, r22
    2e6e:	f7 2e       	mov	r15, r23
    2e70:	08 2f       	mov	r16, r24
    2e72:	19 2f       	mov	r17, r25
    2e74:	2a 2d       	mov	r18, r10
    2e76:	3b 2d       	mov	r19, r11
    2e78:	4c 2d       	mov	r20, r12
    2e7a:	5d 2d       	mov	r21, r13
    2e7c:	6e 2d       	mov	r22, r14
    2e7e:	7f 2d       	mov	r23, r15
    2e80:	80 2f       	mov	r24, r16
    2e82:	91 2f       	mov	r25, r17
    2e84:	82 2f       	mov	r24, r18
    2e86:	82 50       	subi	r24, 0x02	; 2
    2e88:	eb 81       	ldd	r30, Y+3	; 0x03
    2e8a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e8c:	80 83       	st	Z, r24
	TWSR = 0x00;
    2e8e:	e1 e2       	ldi	r30, 0x21	; 33
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = config_ptr->device_address; // my address = 0x01 :)
    2e94:	a2 e2       	ldi	r26, 0x22	; 34
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	e9 81       	ldd	r30, Y+1	; 0x01
    2e9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e9c:	80 85       	ldd	r24, Z+8	; 0x08
    2e9e:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2ea0:	e6 e5       	ldi	r30, 0x56	; 86
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	84 e0       	ldi	r24, 0x04	; 4
    2ea6:	80 83       	st	Z, r24
}
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	1f 91       	pop	r17
    2eb6:	0f 91       	pop	r16
    2eb8:	ff 90       	pop	r15
    2eba:	ef 90       	pop	r14
    2ebc:	df 90       	pop	r13
    2ebe:	cf 90       	pop	r12
    2ec0:	bf 90       	pop	r11
    2ec2:	af 90       	pop	r10
    2ec4:	9f 90       	pop	r9
    2ec6:	8f 90       	pop	r8
    2ec8:	7f 90       	pop	r7
    2eca:	6f 90       	pop	r6
    2ecc:	5f 90       	pop	r5
    2ece:	4f 90       	pop	r4
    2ed0:	3f 90       	pop	r3
    2ed2:	2f 90       	pop	r2
    2ed4:	08 95       	ret

00002ed6 <TWI_start>:

void TWI_start(void)
{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2ede:	e6 e5       	ldi	r30, 0x56	; 86
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	84 ea       	ldi	r24, 0xA4	; 164
    2ee4:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2ee6:	e6 e5       	ldi	r30, 0x56	; 86
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	88 23       	and	r24, r24
    2eee:	dc f7       	brge	.-10     	; 0x2ee6 <TWI_start+0x10>
}
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <TWI_stop>:

void TWI_stop(void)
{
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2efe:	e6 e5       	ldi	r30, 0x56	; 86
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	84 e9       	ldi	r24, 0x94	; 148
    2f04:	80 83       	st	Z, r24
}
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	0f 92       	push	r0
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2f18:	e3 e2       	ldi	r30, 0x23	; 35
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2f20:	e6 e5       	ldi	r30, 0x56	; 86
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	84 e8       	ldi	r24, 0x84	; 132
    2f26:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2f28:	e6 e5       	ldi	r30, 0x56	; 86
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	88 23       	and	r24, r24
    2f30:	dc f7       	brge	.-10     	; 0x2f28 <TWI_writeByte+0x1c>
}
    2f32:	0f 90       	pop	r0
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	08 95       	ret

00002f3a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2f42:	e6 e5       	ldi	r30, 0x56	; 86
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	84 ec       	ldi	r24, 0xC4	; 196
    2f48:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2f4a:	e6 e5       	ldi	r30, 0x56	; 86
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
    2f50:	88 23       	and	r24, r24
    2f52:	dc f7       	brge	.-10     	; 0x2f4a <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2f54:	e3 e2       	ldi	r30, 0x23	; 35
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
}
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	08 95       	ret

00002f60 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2f60:	df 93       	push	r29
    2f62:	cf 93       	push	r28
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2f68:	e6 e5       	ldi	r30, 0x56	; 86
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	84 e8       	ldi	r24, 0x84	; 132
    2f6e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2f70:	e6 e5       	ldi	r30, 0x56	; 86
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	88 23       	and	r24, r24
    2f78:	dc f7       	brge	.-10     	; 0x2f70 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2f7a:	e3 e2       	ldi	r30, 0x23	; 35
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
}
    2f80:	cf 91       	pop	r28
    2f82:	df 91       	pop	r29
    2f84:	08 95       	ret

00002f86 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	0f 92       	push	r0
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2f90:	e1 e2       	ldi	r30, 0x21	; 33
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	88 7f       	andi	r24, 0xF8	; 248
    2f98:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f9c:	0f 90       	pop	r0
    2f9e:	cf 91       	pop	r28
    2fa0:	df 91       	pop	r29
    2fa2:	08 95       	ret

00002fa4 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const uart_ConfigType * Config_Ptr)
{
    2fa4:	df 93       	push	r29
    2fa6:	cf 93       	push	r28
    2fa8:	00 d0       	rcall	.+0      	; 0x2faa <UART_init+0x6>
    2faa:	00 d0       	rcall	.+0      	; 0x2fac <UART_init+0x8>
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	9c 83       	std	Y+4, r25	; 0x04
    2fb2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2fb4:	1a 82       	std	Y+2, r1	; 0x02
    2fb6:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2fb8:	eb e2       	ldi	r30, 0x2B	; 43
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	82 e0       	ldi	r24, 0x02	; 2
    2fbe:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = Determine the number of data bits in the frame according to Config_Ptr
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2fc0:	ea e2       	ldi	r30, 0x2A	; 42
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	88 e1       	ldi	r24, 0x18	; 24
    2fc6:	80 83       	st	Z, r24
	if (Config_Ptr->dataRange == 7){
    2fc8:	eb 81       	ldd	r30, Y+3	; 0x03
    2fca:	fc 81       	ldd	r31, Y+4	; 0x04
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	87 30       	cpi	r24, 0x07	; 7
    2fd0:	39 f4       	brne	.+14     	; 0x2fe0 <UART_init+0x3c>
		UCSRB |= (1 << UCSZ2);
    2fd2:	aa e2       	ldi	r26, 0x2A	; 42
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	ea e2       	ldi	r30, 0x2A	; 42
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	84 60       	ori	r24, 0x04	; 4
    2fde:	8c 93       	st	X, r24
	 * UPM1:0  = Determine the parity bit
	 * USBS    = Determine stop bits according to Config_Ptr
	 * UCSZ1:0 = Determine the number of data bits in the frame according to Config_Ptr
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2fe0:	e0 e4       	ldi	r30, 0x40	; 64
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 e8       	ldi	r24, 0x80	; 128
    2fe6:	80 83       	st	Z, r24
	/*Set the parity in UPM1:0 (bits no. 4 & 5) */
	UCSRC = (UCSRC & 0xcf) | ((Config_Ptr ->parity <<4) & 0x30);
    2fe8:	a0 e4       	ldi	r26, 0x40	; 64
    2fea:	b0 e0       	ldi	r27, 0x00	; 0
    2fec:	e0 e4       	ldi	r30, 0x40	; 64
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	80 81       	ld	r24, Z
    2ff2:	28 2f       	mov	r18, r24
    2ff4:	2f 7c       	andi	r18, 0xCF	; 207
    2ff6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff8:	fc 81       	ldd	r31, Y+4	; 0x04
    2ffa:	80 81       	ld	r24, Z
    2ffc:	88 2f       	mov	r24, r24
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	82 95       	swap	r24
    3002:	92 95       	swap	r25
    3004:	90 7f       	andi	r25, 0xF0	; 240
    3006:	98 27       	eor	r25, r24
    3008:	80 7f       	andi	r24, 0xF0	; 240
    300a:	98 27       	eor	r25, r24
    300c:	80 73       	andi	r24, 0x30	; 48
    300e:	82 2b       	or	r24, r18
    3010:	8c 93       	st	X, r24
	/*Set the data range in UCSZ1:0 (bits number 1 , 2)*/
	UCSRC = (UCSRC & 0xf9) | ((Config_Ptr ->dataRange << 1) & 0x06);
    3012:	a0 e4       	ldi	r26, 0x40	; 64
    3014:	b0 e0       	ldi	r27, 0x00	; 0
    3016:	e0 e4       	ldi	r30, 0x40	; 64
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	80 81       	ld	r24, Z
    301c:	28 2f       	mov	r18, r24
    301e:	29 7f       	andi	r18, 0xF9	; 249
    3020:	eb 81       	ldd	r30, Y+3	; 0x03
    3022:	fc 81       	ldd	r31, Y+4	; 0x04
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	88 2f       	mov	r24, r24
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	88 0f       	add	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	86 70       	andi	r24, 0x06	; 6
    3030:	82 2b       	or	r24, r18
    3032:	8c 93       	st	X, r24
	/*Set the numbers of stop bits in USBS */
	UCSRC = (UCSRC & 0xf7) | ((Config_Ptr ->stopBit << 3) & 0x08);
    3034:	a0 e4       	ldi	r26, 0x40	; 64
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	e0 e4       	ldi	r30, 0x40	; 64
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	28 2f       	mov	r18, r24
    3040:	27 7f       	andi	r18, 0xF7	; 247
    3042:	eb 81       	ldd	r30, Y+3	; 0x03
    3044:	fc 81       	ldd	r31, Y+4	; 0x04
    3046:	81 81       	ldd	r24, Z+1	; 0x01
    3048:	88 2f       	mov	r24, r24
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	88 0f       	add	r24, r24
    304e:	99 1f       	adc	r25, r25
    3050:	88 0f       	add	r24, r24
    3052:	99 1f       	adc	r25, r25
    3054:	88 0f       	add	r24, r24
    3056:	99 1f       	adc	r25, r25
    3058:	88 70       	andi	r24, 0x08	; 8
    305a:	82 2b       	or	r24, r18
    305c:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    305e:	eb 81       	ldd	r30, Y+3	; 0x03
    3060:	fc 81       	ldd	r31, Y+4	; 0x04
    3062:	83 81       	ldd	r24, Z+3	; 0x03
    3064:	94 81       	ldd	r25, Z+4	; 0x04
    3066:	a5 81       	ldd	r26, Z+5	; 0x05
    3068:	b6 81       	ldd	r27, Z+6	; 0x06
    306a:	88 0f       	add	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	aa 1f       	adc	r26, r26
    3070:	bb 1f       	adc	r27, r27
    3072:	88 0f       	add	r24, r24
    3074:	99 1f       	adc	r25, r25
    3076:	aa 1f       	adc	r26, r26
    3078:	bb 1f       	adc	r27, r27
    307a:	88 0f       	add	r24, r24
    307c:	99 1f       	adc	r25, r25
    307e:	aa 1f       	adc	r26, r26
    3080:	bb 1f       	adc	r27, r27
    3082:	9c 01       	movw	r18, r24
    3084:	ad 01       	movw	r20, r26
    3086:	80 e4       	ldi	r24, 0x40	; 64
    3088:	92 e4       	ldi	r25, 0x42	; 66
    308a:	af e0       	ldi	r26, 0x0F	; 15
    308c:	b0 e0       	ldi	r27, 0x00	; 0
    308e:	bc 01       	movw	r22, r24
    3090:	cd 01       	movw	r24, r26
    3092:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__udivmodsi4>
    3096:	da 01       	movw	r26, r20
    3098:	c9 01       	movw	r24, r18
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	9a 83       	std	Y+2, r25	; 0x02
    309e:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    30a0:	e0 e4       	ldi	r30, 0x40	; 64
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	9a 81       	ldd	r25, Y+2	; 0x02
    30a8:	89 2f       	mov	r24, r25
    30aa:	99 27       	eor	r25, r25
    30ac:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    30ae:	e9 e2       	ldi	r30, 0x29	; 41
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	80 83       	st	Z, r24
}
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	0f 90       	pop	r0
    30be:	cf 91       	pop	r28
    30c0:	df 91       	pop	r29
    30c2:	08 95       	ret

000030c4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    30c4:	df 93       	push	r29
    30c6:	cf 93       	push	r28
    30c8:	0f 92       	push	r0
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
    30ce:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    30d0:	eb e2       	ldi	r30, 0x2B	; 43
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	80 81       	ld	r24, Z
    30d6:	88 2f       	mov	r24, r24
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	80 72       	andi	r24, 0x20	; 32
    30dc:	90 70       	andi	r25, 0x00	; 0
    30de:	00 97       	sbiw	r24, 0x00	; 0
    30e0:	b9 f3       	breq	.-18     	; 0x30d0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    30e2:	ec e2       	ldi	r30, 0x2C	; 44
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    30ea:	0f 90       	pop	r0
    30ec:	cf 91       	pop	r28
    30ee:	df 91       	pop	r29
    30f0:	08 95       	ret

000030f2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    30f2:	df 93       	push	r29
    30f4:	cf 93       	push	r28
    30f6:	cd b7       	in	r28, 0x3d	; 61
    30f8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    30fa:	eb e2       	ldi	r30, 0x2B	; 43
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	88 23       	and	r24, r24
    3102:	dc f7       	brge	.-10     	; 0x30fa <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3104:	ec e2       	ldi	r30, 0x2C	; 44
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	80 81       	ld	r24, Z
}
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	08 95       	ret

00003110 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3110:	df 93       	push	r29
    3112:	cf 93       	push	r28
    3114:	00 d0       	rcall	.+0      	; 0x3116 <UART_sendString+0x6>
    3116:	0f 92       	push	r0
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
    311c:	9b 83       	std	Y+3, r25	; 0x03
    311e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3120:	19 82       	std	Y+1, r1	; 0x01
    3122:	0e c0       	rjmp	.+28     	; 0x3140 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	28 2f       	mov	r18, r24
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	9b 81       	ldd	r25, Y+3	; 0x03
    312e:	fc 01       	movw	r30, r24
    3130:	e2 0f       	add	r30, r18
    3132:	f3 1f       	adc	r31, r19
    3134:	80 81       	ld	r24, Z
    3136:	0e 94 62 18 	call	0x30c4	; 0x30c4 <UART_sendByte>
		i++;
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	8f 5f       	subi	r24, 0xFF	; 255
    313e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	28 2f       	mov	r18, r24
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	8a 81       	ldd	r24, Y+2	; 0x02
    3148:	9b 81       	ldd	r25, Y+3	; 0x03
    314a:	fc 01       	movw	r30, r24
    314c:	e2 0f       	add	r30, r18
    314e:	f3 1f       	adc	r31, r19
    3150:	80 81       	ld	r24, Z
    3152:	88 23       	and	r24, r24
    3154:	39 f7       	brne	.-50     	; 0x3124 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    3156:	0f 90       	pop	r0
    3158:	0f 90       	pop	r0
    315a:	0f 90       	pop	r0
    315c:	cf 91       	pop	r28
    315e:	df 91       	pop	r29
    3160:	08 95       	ret

00003162 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3162:	0f 93       	push	r16
    3164:	1f 93       	push	r17
    3166:	df 93       	push	r29
    3168:	cf 93       	push	r28
    316a:	00 d0       	rcall	.+0      	; 0x316c <UART_receiveString+0xa>
    316c:	0f 92       	push	r0
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	9b 83       	std	Y+3, r25	; 0x03
    3174:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3176:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	28 2f       	mov	r18, r24
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	9b 81       	ldd	r25, Y+3	; 0x03
    3182:	8c 01       	movw	r16, r24
    3184:	02 0f       	add	r16, r18
    3186:	13 1f       	adc	r17, r19
    3188:	0e 94 79 18 	call	0x30f2	; 0x30f2 <UART_recieveByte>
    318c:	f8 01       	movw	r30, r16
    318e:	80 83       	st	Z, r24
    3190:	0f c0       	rjmp	.+30     	; 0x31b0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	8f 5f       	subi	r24, 0xFF	; 255
    3196:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	28 2f       	mov	r18, r24
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	9b 81       	ldd	r25, Y+3	; 0x03
    31a2:	8c 01       	movw	r16, r24
    31a4:	02 0f       	add	r16, r18
    31a6:	13 1f       	adc	r17, r19
    31a8:	0e 94 79 18 	call	0x30f2	; 0x30f2 <UART_recieveByte>
    31ac:	f8 01       	movw	r30, r16
    31ae:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
    31b2:	28 2f       	mov	r18, r24
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	8a 81       	ldd	r24, Y+2	; 0x02
    31b8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ba:	fc 01       	movw	r30, r24
    31bc:	e2 0f       	add	r30, r18
    31be:	f3 1f       	adc	r31, r19
    31c0:	80 81       	ld	r24, Z
    31c2:	83 32       	cpi	r24, 0x23	; 35
    31c4:	31 f7       	brne	.-52     	; 0x3192 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	28 2f       	mov	r18, r24
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	8a 81       	ldd	r24, Y+2	; 0x02
    31ce:	9b 81       	ldd	r25, Y+3	; 0x03
    31d0:	fc 01       	movw	r30, r24
    31d2:	e2 0f       	add	r30, r18
    31d4:	f3 1f       	adc	r31, r19
    31d6:	10 82       	st	Z, r1
}
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	1f 91       	pop	r17
    31e4:	0f 91       	pop	r16
    31e6:	08 95       	ret

000031e8 <__udivmodsi4>:
    31e8:	a1 e2       	ldi	r26, 0x21	; 33
    31ea:	1a 2e       	mov	r1, r26
    31ec:	aa 1b       	sub	r26, r26
    31ee:	bb 1b       	sub	r27, r27
    31f0:	fd 01       	movw	r30, r26
    31f2:	0d c0       	rjmp	.+26     	; 0x320e <__udivmodsi4_ep>

000031f4 <__udivmodsi4_loop>:
    31f4:	aa 1f       	adc	r26, r26
    31f6:	bb 1f       	adc	r27, r27
    31f8:	ee 1f       	adc	r30, r30
    31fa:	ff 1f       	adc	r31, r31
    31fc:	a2 17       	cp	r26, r18
    31fe:	b3 07       	cpc	r27, r19
    3200:	e4 07       	cpc	r30, r20
    3202:	f5 07       	cpc	r31, r21
    3204:	20 f0       	brcs	.+8      	; 0x320e <__udivmodsi4_ep>
    3206:	a2 1b       	sub	r26, r18
    3208:	b3 0b       	sbc	r27, r19
    320a:	e4 0b       	sbc	r30, r20
    320c:	f5 0b       	sbc	r31, r21

0000320e <__udivmodsi4_ep>:
    320e:	66 1f       	adc	r22, r22
    3210:	77 1f       	adc	r23, r23
    3212:	88 1f       	adc	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	1a 94       	dec	r1
    3218:	69 f7       	brne	.-38     	; 0x31f4 <__udivmodsi4_loop>
    321a:	60 95       	com	r22
    321c:	70 95       	com	r23
    321e:	80 95       	com	r24
    3220:	90 95       	com	r25
    3222:	9b 01       	movw	r18, r22
    3224:	ac 01       	movw	r20, r24
    3226:	bd 01       	movw	r22, r26
    3228:	cf 01       	movw	r24, r30
    322a:	08 95       	ret

0000322c <__mulsi3>:
    322c:	62 9f       	mul	r22, r18
    322e:	d0 01       	movw	r26, r0
    3230:	73 9f       	mul	r23, r19
    3232:	f0 01       	movw	r30, r0
    3234:	82 9f       	mul	r24, r18
    3236:	e0 0d       	add	r30, r0
    3238:	f1 1d       	adc	r31, r1
    323a:	64 9f       	mul	r22, r20
    323c:	e0 0d       	add	r30, r0
    323e:	f1 1d       	adc	r31, r1
    3240:	92 9f       	mul	r25, r18
    3242:	f0 0d       	add	r31, r0
    3244:	83 9f       	mul	r24, r19
    3246:	f0 0d       	add	r31, r0
    3248:	74 9f       	mul	r23, r20
    324a:	f0 0d       	add	r31, r0
    324c:	65 9f       	mul	r22, r21
    324e:	f0 0d       	add	r31, r0
    3250:	99 27       	eor	r25, r25
    3252:	72 9f       	mul	r23, r18
    3254:	b0 0d       	add	r27, r0
    3256:	e1 1d       	adc	r30, r1
    3258:	f9 1f       	adc	r31, r25
    325a:	63 9f       	mul	r22, r19
    325c:	b0 0d       	add	r27, r0
    325e:	e1 1d       	adc	r30, r1
    3260:	f9 1f       	adc	r31, r25
    3262:	bd 01       	movw	r22, r26
    3264:	cf 01       	movw	r24, r30
    3266:	11 24       	eor	r1, r1
    3268:	08 95       	ret

0000326a <__prologue_saves__>:
    326a:	2f 92       	push	r2
    326c:	3f 92       	push	r3
    326e:	4f 92       	push	r4
    3270:	5f 92       	push	r5
    3272:	6f 92       	push	r6
    3274:	7f 92       	push	r7
    3276:	8f 92       	push	r8
    3278:	9f 92       	push	r9
    327a:	af 92       	push	r10
    327c:	bf 92       	push	r11
    327e:	cf 92       	push	r12
    3280:	df 92       	push	r13
    3282:	ef 92       	push	r14
    3284:	ff 92       	push	r15
    3286:	0f 93       	push	r16
    3288:	1f 93       	push	r17
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
    3292:	ca 1b       	sub	r28, r26
    3294:	db 0b       	sbc	r29, r27
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	f8 94       	cli
    329a:	de bf       	out	0x3e, r29	; 62
    329c:	0f be       	out	0x3f, r0	; 63
    329e:	cd bf       	out	0x3d, r28	; 61
    32a0:	09 94       	ijmp

000032a2 <__epilogue_restores__>:
    32a2:	2a 88       	ldd	r2, Y+18	; 0x12
    32a4:	39 88       	ldd	r3, Y+17	; 0x11
    32a6:	48 88       	ldd	r4, Y+16	; 0x10
    32a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    32aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    32ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    32ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    32b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    32b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    32b4:	b9 84       	ldd	r11, Y+9	; 0x09
    32b6:	c8 84       	ldd	r12, Y+8	; 0x08
    32b8:	df 80       	ldd	r13, Y+7	; 0x07
    32ba:	ee 80       	ldd	r14, Y+6	; 0x06
    32bc:	fd 80       	ldd	r15, Y+5	; 0x05
    32be:	0c 81       	ldd	r16, Y+4	; 0x04
    32c0:	1b 81       	ldd	r17, Y+3	; 0x03
    32c2:	aa 81       	ldd	r26, Y+2	; 0x02
    32c4:	b9 81       	ldd	r27, Y+1	; 0x01
    32c6:	ce 0f       	add	r28, r30
    32c8:	d1 1d       	adc	r29, r1
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	de bf       	out	0x3e, r29	; 62
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	cd bf       	out	0x3d, r28	; 61
    32d4:	ed 01       	movw	r28, r26
    32d6:	08 95       	ret

000032d8 <_exit>:
    32d8:	f8 94       	cli

000032da <__stop_program>:
    32da:	ff cf       	rjmp	.-2      	; 0x32da <__stop_program>
